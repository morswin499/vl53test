
vl53test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008a74  08008a74  00009a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af4  08008af4  0000a31c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008af4  08008af4  00009af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008afc  08008afc  0000a31c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008afc  08008afc  00009afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08008b04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  2000031c  08008e20  0000a31c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08008e20  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a31c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aaf  00000000  00000000  0000a34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237f  00000000  00000000  0001ddfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00020180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba9  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c3d  00000000  00000000  00021c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012949  00000000  00000000  0004485e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1acf  00000000  00000000  000571a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  00128cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012d184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000031c 	.word	0x2000031c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a5c 	.word	0x08008a5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000320 	.word	0x20000320
 800020c:	08008a5c 	.word	0x08008a5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_GPIO_EXTI_Callback>:

	    return 1;

	}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
     {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
     	if(GPIO_Pin == TOF_Pin)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80005ec:	d10e      	bne.n	800060c <HAL_GPIO_EXTI_Callback+0x30>
     	{
     		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_GPIO_EXTI_Callback+0x38>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4909      	ldr	r1, [pc, #36]	@ (8000618 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fa0b 	bl	8004a10 <VL53L0X_GetRangingMeasurementData>
     		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_GPIO_EXTI_Callback+0x38>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fca7 	bl	8004f54 <VL53L0X_ClearInterruptMask>
     		TofDataRead = 1;
 8000606:	4b05      	ldr	r3, [pc, #20]	@ (800061c <HAL_GPIO_EXTI_Callback+0x40>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
     	}
     }
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000000 	.word	0x20000000
 8000618:	20000418 	.word	0x20000418
 800061c:	200005bc 	.word	0x200005bc

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fb39 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f885 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f949 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f91d 	bl	8000870 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000636:	f000 f8ed 	bl	8000814 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
 800063a:	4936      	ldr	r1, [pc, #216]	@ (8000714 <main+0xf4>)
 800063c:	4836      	ldr	r0, [pc, #216]	@ (8000718 <main+0xf8>)
 800063e:	f007 fd65 	bl	800810c <siprintf>
 8000642:	4603      	mov	r3, r0
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b35      	ldr	r3, [pc, #212]	@ (800071c <main+0xfc>)
 8000648:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 800064a:	4b34      	ldr	r3, [pc, #208]	@ (800071c <main+0xfc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	2364      	movs	r3, #100	@ 0x64
 8000652:	4931      	ldr	r1, [pc, #196]	@ (8000718 <main+0xf8>)
 8000654:	4832      	ldr	r0, [pc, #200]	@ (8000720 <main+0x100>)
 8000656:	f002 fcf3 	bl	8003040 <HAL_UART_Transmit>

  Dev->I2cHandle = &hi2c1;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <main+0x104>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a32      	ldr	r2, [pc, #200]	@ (8000728 <main+0x108>)
 8000660:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  Dev->I2cDevAddr = 0x52;
 8000664:	4b2f      	ldr	r3, [pc, #188]	@ (8000724 <main+0x104>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2252      	movs	r2, #82	@ 0x52
 800066a:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

  //HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
  HAL_Delay(20);
 800066e:	2014      	movs	r0, #20
 8000670:	f000 fb86 	bl	8000d80 <HAL_Delay>
 // HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
  HAL_Delay(20);
 8000674:	2014      	movs	r0, #20
 8000676:	f000 fb83 	bl	8000d80 <HAL_Delay>

  //
  // VL53L0X init for Single Measurement
  //
  	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800067a:	2017      	movs	r0, #23
 800067c:	f000 fccd 	bl	800101a <HAL_NVIC_DisableIRQ>

    VL53L0X_WaitDeviceBooted( Dev );
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <main+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fb35 	bl	8003cf4 <VL53L0X_WaitDeviceBooted>
    VL53L0X_DataInit( Dev );
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <main+0x104>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f8a6 	bl	80037e0 <VL53L0X_DataInit>
    VL53L0X_StaticInit( Dev );
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <main+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f003 f9ab 	bl	80039f4 <VL53L0X_StaticInit>
    VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <main+0x104>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1c7a      	adds	r2, r7, #1
 80006a4:	1cb9      	adds	r1, r7, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 f86a 	bl	8004780 <VL53L0X_PerformRefCalibration>
    VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80006ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <main+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	1cfa      	adds	r2, r7, #3
 80006b2:	1d39      	adds	r1, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fcaf 	bl	8005018 <VL53L0X_PerformRefSpadManagement>
    VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <main+0x104>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2101      	movs	r1, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fbb5 	bl	8003e30 <VL53L0X_SetDeviceMode>
    VL53L0X_StartMeasurement(Dev);
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <main+0x104>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 f8d4 	bl	8004878 <VL53L0X_StartMeasurement>

    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006d0:	2017      	movs	r0, #23
 80006d2:	f000 fc94 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006d6:	2017      	movs	r0, #23
 80006d8:	f000 fc91 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  while (1)
  {
	  if(TofDataRead == 1)
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <main+0x10c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d1fb      	bne.n	80006dc <main+0xbc>
	  	  {
	  		MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <main+0x110>)
 80006e6:	891b      	ldrh	r3, [r3, #8]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4912      	ldr	r1, [pc, #72]	@ (8000734 <main+0x114>)
 80006ec:	480a      	ldr	r0, [pc, #40]	@ (8000718 <main+0xf8>)
 80006ee:	f007 fd0d 	bl	800810c <siprintf>
 80006f2:	4603      	mov	r3, r0
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <main+0xfc>)
 80006f8:	701a      	strb	r2, [r3, #0]
	  		HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <main+0xfc>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	4905      	ldr	r1, [pc, #20]	@ (8000718 <main+0xf8>)
 8000704:	4806      	ldr	r0, [pc, #24]	@ (8000720 <main+0x100>)
 8000706:	f002 fc9b 	bl	8003040 <HAL_UART_Transmit>
	  		TofDataRead = 0;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <main+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	  if(TofDataRead == 1)
 8000710:	e7e4      	b.n	80006dc <main+0xbc>
 8000712:	bf00      	nop
 8000714:	08008a74 	.word	0x08008a74
 8000718:	200003d4 	.word	0x200003d4
 800071c:	20000414 	.word	0x20000414
 8000720:	2000038c 	.word	0x2000038c
 8000724:	20000000 	.word	0x20000000
 8000728:	20000338 	.word	0x20000338
 800072c:	200005bc 	.word	0x200005bc
 8000730:	20000418 	.word	0x20000418
 8000734:	08008a90 	.word	0x08008a90

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2234      	movs	r2, #52	@ 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f007 fd02 	bl	8008150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b2a      	ldr	r3, [pc, #168]	@ (800080c <SystemClock_Config+0xd4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a29      	ldr	r2, [pc, #164]	@ (800080c <SystemClock_Config+0xd4>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b27      	ldr	r3, [pc, #156]	@ (800080c <SystemClock_Config+0xd4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <SystemClock_Config+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000784:	4a22      	ldr	r2, [pc, #136]	@ (8000810 <SystemClock_Config+0xd8>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <SystemClock_Config+0xd8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ac:	2310      	movs	r3, #16
 80007ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f94c 	bl	8002a64 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007d2:	f000 f8fb 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fdec 	bl	80023d0 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007fe:	f000 f8e5 	bl	80009cc <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	@ 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	@ (8000868 <MX_I2C1_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000820:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_I2C1_Init+0x58>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000852:	f000 fdc3 	bl	80013dc <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 f8b6 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000338 	.word	0x20000338
 8000868:	40005400 	.word	0x40005400
 800086c:	00061a80 	.word	0x00061a80

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_USART2_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a8:	f002 fb7a 	bl	8002fa0 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 f88b 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000038c 	.word	0x2000038c
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b38      	ldr	r3, [pc, #224]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a37      	ldr	r2, [pc, #220]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b35      	ldr	r3, [pc, #212]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b31      	ldr	r3, [pc, #196]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a30      	ldr	r2, [pc, #192]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b2a      	ldr	r3, [pc, #168]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a29      	ldr	r2, [pc, #164]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <MX_GPIO_Init+0xfc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	481d      	ldr	r0, [pc, #116]	@ (80009c4 <MX_GPIO_Init+0x100>)
 8000950:	f000 fd12 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4817      	ldr	r0, [pc, #92]	@ (80009c8 <MX_GPIO_Init+0x104>)
 800096c:	f000 fb70 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480f      	ldr	r0, [pc, #60]	@ (80009c4 <MX_GPIO_Init+0x100>)
 8000988:	f000 fb62 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_Pin */
  GPIO_InitStruct.Pin = TOF_Pin;
 800098c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4808      	ldr	r0, [pc, #32]	@ (80009c4 <MX_GPIO_Init+0x100>)
 80009a4:	f000 fb54 	bl	8001050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2017      	movs	r0, #23
 80009ae:	f000 fb0a 	bl	8000fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b2:	2017      	movs	r0, #23
 80009b4:	f000 fb23 	bl	8000ffe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020800 	.word	0x40020800

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a16:	2007      	movs	r0, #7
 8000a18:	f000 faca 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <HAL_I2C_MspInit+0x84>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12c      	bne.n	8000aa4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <HAL_I2C_MspInit+0x8c>)
 8000a84:	f000 fae4 	bl	8001050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a07      	ldr	r2, [pc, #28]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_UART_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <HAL_UART_MspInit+0x8c>)
 8000b2e:	f000 fa8f 	bl	8001050 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f8cf 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_Pin);
 8000baa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000bae:	f000 fbfd 	bl	80013ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
 // HAL_GPIO_EXTI_Callback(TOF_Pin);
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	@ (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f007 faba 	bl	8008160 <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	200005c0 	.word	0x200005c0
 8000c20:	20000750 	.word	0x20000750

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f007 fa79 	bl	800816c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fcd1 	bl	8000620 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8000c8c:	08008b04 	.word	0x08008b04
  ldr r2, =_sbss
 8000c90:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8000c94:	20000750 	.word	0x20000750

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f973 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fe82 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f999 	bl	8001036 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 f953 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000004 	.word	0x20000004
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	200005c4 	.word	0x200005c4

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200005c4 	.word	0x200005c4

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffee 	bl	8000d68 <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffde 	bl	8000d68 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000000c 	.word	0x2000000c

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db12      	blt.n	8000ea0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	490a      	ldr	r1, [pc, #40]	@ (8000eac <__NVIC_DisableIRQ+0x44>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	3320      	adds	r3, #32
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e94:	f3bf 8f4f 	dsb	sy
}
 8000e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9a:	f3bf 8f6f 	isb	sy
}
 8000e9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	@ (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	@ (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff05 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff1a 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff0d 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff1d 	bl	8000e68 <__NVIC_DisableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff94 	bl	8000f6c <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e165      	b.n	8001338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8154 	bne.w	8001332 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80ae 	beq.w	8001332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <HAL_GPIO_Init+0x300>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a5c      	ldr	r2, [pc, #368]	@ (8001350 <HAL_GPIO_Init+0x300>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001350 <HAL_GPIO_Init+0x300>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a58      	ldr	r2, [pc, #352]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	@ (8001358 <HAL_GPIO_Init+0x308>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x21a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	@ (800135c <HAL_GPIO_Init+0x30c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x216>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	@ (8001360 <HAL_GPIO_Init+0x310>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x212>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	@ (8001364 <HAL_GPIO_Init+0x314>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x20e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	@ (8001368 <HAL_GPIO_Init+0x318>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x20a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4a      	ldr	r2, [pc, #296]	@ (800136c <HAL_GPIO_Init+0x31c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x206>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a49      	ldr	r2, [pc, #292]	@ (8001370 <HAL_GPIO_Init+0x320>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x202>
 800124e:	2306      	movs	r3, #6
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x21c>
 8001252:	2307      	movs	r3, #7
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x21c>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x21c>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x21c>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x21c>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x21c>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x21c>
 800126a:	2300      	movs	r3, #0
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127c:	4935      	ldr	r1, [pc, #212]	@ (8001354 <HAL_GPIO_Init+0x304>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4b3a      	ldr	r3, [pc, #232]	@ (8001374 <HAL_GPIO_Init+0x324>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ae:	4a31      	ldr	r2, [pc, #196]	@ (8001374 <HAL_GPIO_Init+0x324>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HAL_GPIO_Init+0x324>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d8:	4a26      	ldr	r2, [pc, #152]	@ (8001374 <HAL_GPIO_Init+0x324>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <HAL_GPIO_Init+0x324>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001302:	4a1c      	ldr	r2, [pc, #112]	@ (8001374 <HAL_GPIO_Init+0x324>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <HAL_GPIO_Init+0x324>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132c:	4a11      	ldr	r2, [pc, #68]	@ (8001374 <HAL_GPIO_Init+0x324>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	f67f ae96 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40021400 	.word	0x40021400
 8001370:	40021800 	.word	0x40021800
 8001374:	40013c00 	.word	0x40013c00

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f906 	bl	80005dc <HAL_GPIO_EXTI_Callback>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013c00 	.word	0x40013c00

080013dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e12b      	b.n	8001646 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fb10 	bl	8000a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800142e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800143e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001440:	f001 f8b8 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 8001444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a81      	ldr	r2, [pc, #516]	@ (8001650 <HAL_I2C_Init+0x274>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d807      	bhi.n	8001460 <HAL_I2C_Init+0x84>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4a80      	ldr	r2, [pc, #512]	@ (8001654 <HAL_I2C_Init+0x278>)
 8001454:	4293      	cmp	r3, r2
 8001456:	bf94      	ite	ls
 8001458:	2301      	movls	r3, #1
 800145a:	2300      	movhi	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	e006      	b.n	800146e <HAL_I2C_Init+0x92>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4a7d      	ldr	r2, [pc, #500]	@ (8001658 <HAL_I2C_Init+0x27c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	bf94      	ite	ls
 8001468:	2301      	movls	r3, #1
 800146a:	2300      	movhi	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0e7      	b.n	8001646 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4a78      	ldr	r2, [pc, #480]	@ (800165c <HAL_I2C_Init+0x280>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0c9b      	lsrs	r3, r3, #18
 8001480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001650 <HAL_I2C_Init+0x274>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d802      	bhi.n	80014b0 <HAL_I2C_Init+0xd4>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	e009      	b.n	80014c4 <HAL_I2C_Init+0xe8>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	4a69      	ldr	r2, [pc, #420]	@ (8001660 <HAL_I2C_Init+0x284>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	3301      	adds	r3, #1
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	430b      	orrs	r3, r1
 80014ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	495c      	ldr	r1, [pc, #368]	@ (8001650 <HAL_I2C_Init+0x274>)
 80014e0:	428b      	cmp	r3, r1
 80014e2:	d819      	bhi.n	8001518 <HAL_I2C_Init+0x13c>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1e59      	subs	r1, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014f8:	400b      	ands	r3, r1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <HAL_I2C_Init+0x138>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1e59      	subs	r1, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fbb1 f3f3 	udiv	r3, r1, r3
 800150c:	3301      	adds	r3, #1
 800150e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001512:	e051      	b.n	80015b8 <HAL_I2C_Init+0x1dc>
 8001514:	2304      	movs	r3, #4
 8001516:	e04f      	b.n	80015b8 <HAL_I2C_Init+0x1dc>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d111      	bne.n	8001544 <HAL_I2C_Init+0x168>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e58      	subs	r0, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	e012      	b.n	800156a <HAL_I2C_Init+0x18e>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	0099      	lsls	r1, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	fbb0 f3f3 	udiv	r3, r0, r3
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Init+0x196>
 800156e:	2301      	movs	r3, #1
 8001570:	e022      	b.n	80015b8 <HAL_I2C_Init+0x1dc>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <HAL_I2C_Init+0x1bc>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1e58      	subs	r0, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	440b      	add	r3, r1
 8001588:	fbb0 f3f3 	udiv	r3, r0, r3
 800158c:	3301      	adds	r3, #1
 800158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001596:	e00f      	b.n	80015b8 <HAL_I2C_Init+0x1dc>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	0099      	lsls	r1, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6911      	ldr	r1, [r2, #16]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68d2      	ldr	r2, [r2, #12]
 80015f2:	4311      	orrs	r1, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	000186a0 	.word	0x000186a0
 8001654:	001e847f 	.word	0x001e847f
 8001658:	003d08ff 	.word	0x003d08ff
 800165c:	431bde83 	.word	0x431bde83
 8001660:	10624dd3 	.word	0x10624dd3

08001664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	461a      	mov	r2, r3
 8001670:	460b      	mov	r3, r1
 8001672:	817b      	strh	r3, [r7, #10]
 8001674:	4613      	mov	r3, r2
 8001676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff fb76 	bl	8000d68 <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	f040 80e0 	bne.w	800184c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2319      	movs	r3, #25
 8001692:	2201      	movs	r2, #1
 8001694:	4970      	ldr	r1, [pc, #448]	@ (8001858 <HAL_I2C_Master_Transmit+0x1f4>)
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fc64 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
 80016a4:	e0d3      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_I2C_Master_Transmit+0x50>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e0cc      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d007      	beq.n	80016da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2221      	movs	r2, #33	@ 0x21
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2210      	movs	r2, #16
 80016f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	893a      	ldrh	r2, [r7, #8]
 800170a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a50      	ldr	r2, [pc, #320]	@ (800185c <HAL_I2C_Master_Transmit+0x1f8>)
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800171c:	8979      	ldrh	r1, [r7, #10]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 face 	bl	8001cc4 <I2C_MasterRequestWrite>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e08d      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001748:	e066      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fd22 	bl	8002198 <I2C_WaitOnTXEFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	2b04      	cmp	r3, #4
 8001760:	d107      	bne.n	8001772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06b      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11b      	bne.n	80017ec <HAL_I2C_Master_Transmit+0x188>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d017      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fd19 	bl	8002228 <I2C_WaitOnBTFFlagUntilTimeout>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00d      	beq.n	8001818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	2b04      	cmp	r3, #4
 8001802:	d107      	bne.n	8001814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e01a      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d194      	bne.n	800174a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800182e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	00100002 	.word	0x00100002
 800185c:	ffff0000 	.word	0xffff0000

08001860 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	460b      	mov	r3, r1
 800186e:	817b      	strh	r3, [r7, #10]
 8001870:	4613      	mov	r3, r2
 8001872:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fa78 	bl	8000d68 <HAL_GetTick>
 8001878:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b20      	cmp	r3, #32
 8001884:	f040 8217 	bne.w	8001cb6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	497c      	ldr	r1, [pc, #496]	@ (8001a84 <HAL_I2C_Master_Receive+0x224>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fb66 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	e20a      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_I2C_Master_Receive+0x50>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e203      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d007      	beq.n	80018d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2222      	movs	r2, #34	@ 0x22
 80018ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2210      	movs	r2, #16
 80018f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	893a      	ldrh	r2, [r7, #8]
 8001906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a5c      	ldr	r2, [pc, #368]	@ (8001a88 <HAL_I2C_Master_Receive+0x228>)
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fa52 	bl	8001dc8 <I2C_MasterRequestRead>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e1c4      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d113      	bne.n	800195e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e198      	b.n	8001c90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001962:	2b01      	cmp	r3, #1
 8001964:	d11b      	bne.n	800199e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e178      	b.n	8001c90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d11b      	bne.n	80019de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	e158      	b.n	8001c90 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a04:	e144      	b.n	8001c90 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	f200 80f1 	bhi.w	8001bf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d123      	bne.n	8001a60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fc4b 	bl	80022b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e145      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a5e:	e117      	b.n	8001c90 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d14e      	bne.n	8001b06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4906      	ldr	r1, [pc, #24]	@ (8001a8c <HAL_I2C_Master_Receive+0x22c>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fa76 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e11a      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
 8001a82:	bf00      	nop
 8001a84:	00100002 	.word	0x00100002
 8001a88:	ffff0000 	.word	0xffff0000
 8001a8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b04:	e0c4      	b.n	8001c90 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	496c      	ldr	r1, [pc, #432]	@ (8001cc0 <HAL_I2C_Master_Receive+0x460>)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fa27 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0cb      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4955      	ldr	r1, [pc, #340]	@ (8001cc0 <HAL_I2C_Master_Receive+0x460>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f9f9 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e09d      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bf0:	e04e      	b.n	8001c90 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fb5e 	bl	80022b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e058      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d124      	bne.n	8001c90 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f aeb6 	bne.w	8001a06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001cb6:	2302      	movs	r3, #2
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	00010004 	.word	0x00010004

08001cc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d006      	beq.n	8001cee <I2C_MasterRequestWrite+0x2a>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d003      	beq.n	8001cee <I2C_MasterRequestWrite+0x2a>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cec:	d108      	bne.n	8001d00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e00b      	b.n	8001d18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	d107      	bne.n	8001d18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f91d 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d3e:	d103      	bne.n	8001d48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e035      	b.n	8001db8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d54:	d108      	bne.n	8001d68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	e01b      	b.n	8001da0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d68:	897b      	ldrh	r3, [r7, #10]
 8001d6a:	11db      	asrs	r3, r3, #7
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 0306 	and.w	r3, r3, #6
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f063 030f 	orn	r3, r3, #15
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	490e      	ldr	r1, [pc, #56]	@ (8001dc0 <I2C_MasterRequestWrite+0xfc>)
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f966 	bl	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e010      	b.n	8001db8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4907      	ldr	r1, [pc, #28]	@ (8001dc4 <I2C_MasterRequestWrite+0x100>)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f956 	bl	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	00010008 	.word	0x00010008
 8001dc4:	00010002 	.word	0x00010002

08001dc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d006      	beq.n	8001e02 <I2C_MasterRequestRead+0x3a>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d003      	beq.n	8001e02 <I2C_MasterRequestRead+0x3a>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e00:	d108      	bne.n	8001e14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e00b      	b.n	8001e2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	2b11      	cmp	r3, #17
 8001e1a:	d107      	bne.n	8001e2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f893 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e52:	d103      	bne.n	8001e5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e079      	b.n	8001f54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e68:	d108      	bne.n	8001e7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e6a:	897b      	ldrh	r3, [r7, #10]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	e05f      	b.n	8001f3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e7c:	897b      	ldrh	r3, [r7, #10]
 8001e7e:	11db      	asrs	r3, r3, #7
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f003 0306 	and.w	r3, r3, #6
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f063 030f 	orn	r3, r3, #15
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4930      	ldr	r1, [pc, #192]	@ (8001f5c <I2C_MasterRequestRead+0x194>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f8dc 	bl	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e054      	b.n	8001f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4929      	ldr	r1, [pc, #164]	@ (8001f60 <I2C_MasterRequestRead+0x198>)
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f8cc 	bl	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e044      	b.n	8001f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f831 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f16:	d103      	bne.n	8001f20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e017      	b.n	8001f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	11db      	asrs	r3, r3, #7
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 0306 	and.w	r3, r3, #6
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f063 030e 	orn	r3, r3, #14
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4907      	ldr	r1, [pc, #28]	@ (8001f60 <I2C_MasterRequestRead+0x198>)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f888 	bl	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	00010008 	.word	0x00010008
 8001f60:	00010002 	.word	0x00010002

08001f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f74:	e048      	b.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d044      	beq.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7fe fef3 	bl	8000d68 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d139      	bne.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	e00c      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d116      	bne.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e023      	b.n	8002050 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10d      	bne.n	800202e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	43da      	mvns	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	e00c      	b.n	8002048 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	43da      	mvns	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4013      	ands	r3, r2
 800203a:	b29b      	uxth	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	429a      	cmp	r2, r3
 800204c:	d093      	beq.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002066:	e071      	b.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002076:	d123      	bne.n	80020c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002086:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f043 0204 	orr.w	r2, r3, #4
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e067      	b.n	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c6:	d041      	beq.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c8:	f7fe fe4e 	bl	8000d68 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d302      	bcc.n	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d136      	bne.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10c      	bne.n	8002102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4013      	ands	r3, r2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	e00b      	b.n	800211a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	43da      	mvns	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4013      	ands	r3, r2
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0220 	orr.w	r2, r3, #32
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e021      	b.n	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	0c1b      	lsrs	r3, r3, #16
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10c      	bne.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	43da      	mvns	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4013      	ands	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e00b      	b.n	8002188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4013      	ands	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf14      	ite	ne
 8002182:	2301      	movne	r3, #1
 8002184:	2300      	moveq	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	f47f af6d 	bne.w	8002068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a4:	e034      	b.n	8002210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f8e3 	bl	8002372 <I2C_IsAcknowledgeFailed>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e034      	b.n	8002220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d028      	beq.n	8002210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021be:	f7fe fdd3 	bl	8000d68 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d302      	bcc.n	80021d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11d      	bne.n	8002210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021de:	2b80      	cmp	r3, #128	@ 0x80
 80021e0:	d016      	beq.n	8002210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e007      	b.n	8002220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221a:	2b80      	cmp	r3, #128	@ 0x80
 800221c:	d1c3      	bne.n	80021a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002234:	e034      	b.n	80022a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f89b 	bl	8002372 <I2C_IsAcknowledgeFailed>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e034      	b.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d028      	beq.n	80022a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7fe fd8b 	bl	8000d68 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11d      	bne.n	80022a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b04      	cmp	r3, #4
 8002270:	d016      	beq.n	80022a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e007      	b.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d1c3      	bne.n	8002236 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022c4:	e049      	b.n	800235a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d119      	bne.n	8002308 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0210 	mvn.w	r2, #16
 80022dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e030      	b.n	800236a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002308:	f7fe fd2e 	bl	8000d68 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d302      	bcc.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11d      	bne.n	800235a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	d016      	beq.n	800235a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e007      	b.n	800236a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002364:	2b40      	cmp	r3, #64	@ 0x40
 8002366:	d1ae      	bne.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002388:	d11b      	bne.n	80023c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002392:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f043 0204 	orr.w	r2, r3, #4
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0cc      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b68      	ldr	r3, [pc, #416]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d90c      	bls.n	800240c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b65      	ldr	r3, [pc, #404]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b63      	ldr	r3, [pc, #396]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b8      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b59      	ldr	r3, [pc, #356]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a58      	ldr	r2, [pc, #352]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800242e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4b53      	ldr	r3, [pc, #332]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a52      	ldr	r2, [pc, #328]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b50      	ldr	r3, [pc, #320]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	494d      	ldr	r1, [pc, #308]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d044      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b47      	ldr	r3, [pc, #284]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d119      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d003      	beq.n	800248e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	2b03      	cmp	r3, #3
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b3f      	ldr	r3, [pc, #252]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e067      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4934      	ldr	r1, [pc, #208]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fc52 	bl	8000d68 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fc4e 	bl	8000d68 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e04f      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2b      	ldr	r3, [pc, #172]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d20c      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e032      	b.n	800257e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4916      	ldr	r1, [pc, #88]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	490e      	ldr	r1, [pc, #56]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002556:	f000 f855 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490a      	ldr	r1, [pc, #40]	@ (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	4a09      	ldr	r2, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fbb2 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00
 800258c:	40023800 	.word	0x40023800
 8002590:	08008aa8 	.word	0x08008aa8
 8002594:	20000004 	.word	0x20000004
 8002598:	20000008 	.word	0x20000008

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000004 	.word	0x20000004

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff0 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08008ab8 	.word	0x08008ab8

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffdc 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08008ab8 	.word	0x08008ab8

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002608:	b0ae      	sub	sp, #184	@ 0xb8
 800260a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262a:	4bcb      	ldr	r3, [pc, #812]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b0c      	cmp	r3, #12
 8002634:	f200 8206 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x440>
 8002638:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <HAL_RCC_GetSysClockFreq+0x3c>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	08002675 	.word	0x08002675
 8002644:	08002a45 	.word	0x08002a45
 8002648:	08002a45 	.word	0x08002a45
 800264c:	08002a45 	.word	0x08002a45
 8002650:	0800267d 	.word	0x0800267d
 8002654:	08002a45 	.word	0x08002a45
 8002658:	08002a45 	.word	0x08002a45
 800265c:	08002a45 	.word	0x08002a45
 8002660:	08002685 	.word	0x08002685
 8002664:	08002a45 	.word	0x08002a45
 8002668:	08002a45 	.word	0x08002a45
 800266c:	08002a45 	.word	0x08002a45
 8002670:	08002875 	.word	0x08002875
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4bb9      	ldr	r3, [pc, #740]	@ (800295c <HAL_RCC_GetSysClockFreq+0x358>)
 8002676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800267a:	e1e7      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267c:	4bb8      	ldr	r3, [pc, #736]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x35c>)
 800267e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002682:	e1e3      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002684:	4bb4      	ldr	r3, [pc, #720]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800268c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002690:	4bb1      	ldr	r3, [pc, #708]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d071      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269c:	4bae      	ldr	r3, [pc, #696]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80026ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4621      	mov	r1, r4
 80026dc:	1a51      	subs	r1, r2, r1
 80026de:	6439      	str	r1, [r7, #64]	@ 0x40
 80026e0:	4629      	mov	r1, r5
 80026e2:	eb63 0301 	sbc.w	r3, r3, r1
 80026e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026f4:	4649      	mov	r1, r9
 80026f6:	018b      	lsls	r3, r1, #6
 80026f8:	4641      	mov	r1, r8
 80026fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fe:	4641      	mov	r1, r8
 8002700:	018a      	lsls	r2, r1, #6
 8002702:	4641      	mov	r1, r8
 8002704:	1a51      	subs	r1, r2, r1
 8002706:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002708:	4649      	mov	r1, r9
 800270a:	eb63 0301 	sbc.w	r3, r3, r1
 800270e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800271c:	4649      	mov	r1, r9
 800271e:	00cb      	lsls	r3, r1, #3
 8002720:	4641      	mov	r1, r8
 8002722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002726:	4641      	mov	r1, r8
 8002728:	00ca      	lsls	r2, r1, #3
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4603      	mov	r3, r0
 8002730:	4622      	mov	r2, r4
 8002732:	189b      	adds	r3, r3, r2
 8002734:	633b      	str	r3, [r7, #48]	@ 0x30
 8002736:	462b      	mov	r3, r5
 8002738:	460a      	mov	r2, r1
 800273a:	eb42 0303 	adc.w	r3, r2, r3
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800274c:	4629      	mov	r1, r5
 800274e:	024b      	lsls	r3, r1, #9
 8002750:	4621      	mov	r1, r4
 8002752:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002756:	4621      	mov	r1, r4
 8002758:	024a      	lsls	r2, r1, #9
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002768:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800276c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002770:	f7fd fd9e 	bl	80002b0 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4613      	mov	r3, r2
 800277a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800277e:	e067      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b75      	ldr	r3, [pc, #468]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800278c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002798:	67bb      	str	r3, [r7, #120]	@ 0x78
 800279a:	2300      	movs	r3, #0
 800279c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800279e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80027a2:	4622      	mov	r2, r4
 80027a4:	462b      	mov	r3, r5
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	0159      	lsls	r1, r3, #5
 80027b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b4:	0150      	lsls	r0, r2, #5
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4621      	mov	r1, r4
 80027bc:	1a51      	subs	r1, r2, r1
 80027be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80027c0:	4629      	mov	r1, r5
 80027c2:	eb63 0301 	sbc.w	r3, r3, r1
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027d4:	4649      	mov	r1, r9
 80027d6:	018b      	lsls	r3, r1, #6
 80027d8:	4641      	mov	r1, r8
 80027da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027de:	4641      	mov	r1, r8
 80027e0:	018a      	lsls	r2, r1, #6
 80027e2:	4641      	mov	r1, r8
 80027e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e8:	4649      	mov	r1, r9
 80027ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002802:	4692      	mov	sl, r2
 8002804:	469b      	mov	fp, r3
 8002806:	4623      	mov	r3, r4
 8002808:	eb1a 0303 	adds.w	r3, sl, r3
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	462b      	mov	r3, r5
 8002810:	eb4b 0303 	adc.w	r3, fp, r3
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002822:	4629      	mov	r1, r5
 8002824:	028b      	lsls	r3, r1, #10
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800282c:	4621      	mov	r1, r4
 800282e:	028a      	lsls	r2, r1, #10
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002838:	2200      	movs	r2, #0
 800283a:	673b      	str	r3, [r7, #112]	@ 0x70
 800283c:	677a      	str	r2, [r7, #116]	@ 0x74
 800283e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002842:	f7fd fd35 	bl	80002b0 <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4613      	mov	r3, r2
 800284c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002850:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002872:	e0eb      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002874:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800287c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002880:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d06b      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288c:	4b32      	ldr	r3, [pc, #200]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x354>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	2200      	movs	r2, #0
 8002894:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002896:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800289a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289e:	663b      	str	r3, [r7, #96]	@ 0x60
 80028a0:	2300      	movs	r3, #0
 80028a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80028a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80028a8:	4622      	mov	r2, r4
 80028aa:	462b      	mov	r3, r5
 80028ac:	f04f 0000 	mov.w	r0, #0
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	0159      	lsls	r1, r3, #5
 80028b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ba:	0150      	lsls	r0, r2, #5
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4621      	mov	r1, r4
 80028c2:	1a51      	subs	r1, r2, r1
 80028c4:	61b9      	str	r1, [r7, #24]
 80028c6:	4629      	mov	r1, r5
 80028c8:	eb63 0301 	sbc.w	r3, r3, r1
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028da:	4659      	mov	r1, fp
 80028dc:	018b      	lsls	r3, r1, #6
 80028de:	4651      	mov	r1, sl
 80028e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028e4:	4651      	mov	r1, sl
 80028e6:	018a      	lsls	r2, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ebb2 0801 	subs.w	r8, r2, r1
 80028ee:	4659      	mov	r1, fp
 80028f0:	eb63 0901 	sbc.w	r9, r3, r1
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002900:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002904:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002908:	4690      	mov	r8, r2
 800290a:	4699      	mov	r9, r3
 800290c:	4623      	mov	r3, r4
 800290e:	eb18 0303 	adds.w	r3, r8, r3
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	462b      	mov	r3, r5
 8002916:	eb49 0303 	adc.w	r3, r9, r3
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002928:	4629      	mov	r1, r5
 800292a:	024b      	lsls	r3, r1, #9
 800292c:	4621      	mov	r1, r4
 800292e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002932:	4621      	mov	r1, r4
 8002934:	024a      	lsls	r2, r1, #9
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800293e:	2200      	movs	r2, #0
 8002940:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002942:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002944:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002948:	f7fd fcb2 	bl	80002b0 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002956:	e065      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x420>
 8002958:	40023800 	.word	0x40023800
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	2200      	movs	r2, #0
 800296c:	4618      	mov	r0, r3
 800296e:	4611      	mov	r1, r2
 8002970:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002974:	653b      	str	r3, [r7, #80]	@ 0x50
 8002976:	2300      	movs	r3, #0
 8002978:	657b      	str	r3, [r7, #84]	@ 0x54
 800297a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800297e:	4642      	mov	r2, r8
 8002980:	464b      	mov	r3, r9
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f04f 0100 	mov.w	r1, #0
 800298a:	0159      	lsls	r1, r3, #5
 800298c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002990:	0150      	lsls	r0, r2, #5
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4641      	mov	r1, r8
 8002998:	1a51      	subs	r1, r2, r1
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	4649      	mov	r1, r9
 800299e:	eb63 0301 	sbc.w	r3, r3, r1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029b0:	4659      	mov	r1, fp
 80029b2:	018b      	lsls	r3, r1, #6
 80029b4:	4651      	mov	r1, sl
 80029b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ba:	4651      	mov	r1, sl
 80029bc:	018a      	lsls	r2, r1, #6
 80029be:	4651      	mov	r1, sl
 80029c0:	1a54      	subs	r4, r2, r1
 80029c2:	4659      	mov	r1, fp
 80029c4:	eb63 0501 	sbc.w	r5, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4643      	mov	r3, r8
 80029de:	18e3      	adds	r3, r4, r3
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	464b      	mov	r3, r9
 80029e4:	eb45 0303 	adc.w	r3, r5, r3
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f6:	4629      	mov	r1, r5
 80029f8:	028b      	lsls	r3, r1, #10
 80029fa:	4621      	mov	r1, r4
 80029fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a00:	4621      	mov	r1, r4
 8002a02:	028a      	lsls	r2, r1, #10
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a16:	f7fd fc4b 	bl	80002b0 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4613      	mov	r3, r2
 8002a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0f1b      	lsrs	r3, r3, #28
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a42:	e003      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	37b8      	adds	r7, #184	@ 0xb8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400

08002a64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e28d      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8083 	beq.w	8002b8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a84:	4b94      	ldr	r3, [pc, #592]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a90:	4b91      	ldr	r3, [pc, #580]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a9c:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d112      	bne.n	8002adc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab6:	4b88      	ldr	r3, [pc, #544]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ac2:	d10b      	bne.n	8002adc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	4b84      	ldr	r3, [pc, #528]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d05b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x124>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d157      	bne.n	8002b88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e25a      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae4:	d106      	bne.n	8002af4 <HAL_RCC_OscConfig+0x90>
 8002ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01d      	b.n	8002b30 <HAL_RCC_OscConfig+0xcc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0xb4>
 8002afe:	4b76      	ldr	r3, [pc, #472]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a75      	ldr	r2, [pc, #468]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b73      	ldr	r3, [pc, #460]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a72      	ldr	r2, [pc, #456]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0xcc>
 8002b18:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a6b      	ldr	r2, [pc, #428]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe f916 	bl	8000d68 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe f912 	bl	8000d68 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	@ 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e21f      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b61      	ldr	r3, [pc, #388]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xdc>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f902 	bl	8000d68 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe f8fe 	bl	8000d68 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	@ 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e20b      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	4b57      	ldr	r3, [pc, #348]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x104>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d06f      	beq.n	8002c76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b96:	4b50      	ldr	r3, [pc, #320]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d017      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d105      	bne.n	8002bba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b47      	ldr	r3, [pc, #284]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b44      	ldr	r3, [pc, #272]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b41      	ldr	r3, [pc, #260]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x186>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1d3      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4937      	ldr	r1, [pc, #220]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <HAL_RCC_OscConfig+0x278>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe f8ab 	bl	8000d68 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fe f8a7 	bl	8000d68 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1b4      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b28      	ldr	r3, [pc, #160]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4925      	ldr	r1, [pc, #148]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x278>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe f88a 	bl	8000d68 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fe f886 	bl	8000d68 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e193      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d036      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe f86a 	bl	8000d68 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fe f866 	bl	8000d68 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e173      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x234>
 8002cb6:	e01b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_RCC_OscConfig+0x27c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe f853 	bl	8000d68 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	e00e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fe f84f 	bl	8000d68 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d907      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e15c      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470000 	.word	0x42470000
 8002ce0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	4b8a      	ldr	r3, [pc, #552]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ea      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8097 	beq.w	8002e2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b83      	ldr	r3, [pc, #524]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	4b7f      	ldr	r3, [pc, #508]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	4a7e      	ldr	r2, [pc, #504]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b79      	ldr	r3, [pc, #484]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b76      	ldr	r3, [pc, #472]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a75      	ldr	r2, [pc, #468]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7fe f80f 	bl	8000d68 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe f80b 	bl	8000d68 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e118      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b6c      	ldr	r3, [pc, #432]	@ (8002f14 <HAL_RCC_OscConfig+0x4b0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x31e>
 8002d74:	4b66      	ldr	r3, [pc, #408]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	4a65      	ldr	r2, [pc, #404]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x358>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x340>
 8002d8a:	4b61      	ldr	r3, [pc, #388]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	4a60      	ldr	r2, [pc, #384]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d96:	4b5e      	ldr	r3, [pc, #376]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0x358>
 8002da4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da8:	4a59      	ldr	r2, [pc, #356]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db0:	4b57      	ldr	r3, [pc, #348]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	4a56      	ldr	r2, [pc, #344]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	f023 0304 	bic.w	r3, r3, #4
 8002dba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d015      	beq.n	8002df0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fd ffd0 	bl	8000d68 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fd ffcc 	bl	8000d68 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0d7      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ee      	beq.n	8002dcc <HAL_RCC_OscConfig+0x368>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fd ffba 	bl	8000d68 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fd ffb6 	bl	8000d68 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0c1      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	4b40      	ldr	r3, [pc, #256]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ee      	bne.n	8002df8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e20:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80ad 	beq.w	8002f90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e36:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d060      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d145      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b33      	ldr	r3, [pc, #204]	@ (8002f18 <HAL_RCC_OscConfig+0x4b4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fd ff8a 	bl	8000d68 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fd ff86 	bl	8000d68 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e093      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	071b      	lsls	r3, r3, #28
 8002ea2:	491b      	ldr	r1, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <HAL_RCC_OscConfig+0x4b4>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fd ff5b 	bl	8000d68 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fd ff57 	bl	8000d68 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e064      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x452>
 8002ed4:	e05c      	b.n	8002f90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <HAL_RCC_OscConfig+0x4b4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fd ff44 	bl	8000d68 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fd ff40 	bl	8000d68 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e04d      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x480>
 8002f02:	e045      	b.n	8002f90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e040      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40007000 	.word	0x40007000
 8002f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <HAL_RCC_OscConfig+0x538>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d030      	beq.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d129      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d122      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d119      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d10f      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e042      	b.n	8003038 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fd76 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	@ 0x24
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f973 	bl	80032d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	@ 0x28
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	d175      	bne.n	800314c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_UART_Transmit+0x2c>
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e06e      	b.n	800314e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2221      	movs	r2, #33	@ 0x21
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800307e:	f7fd fe73 	bl	8000d68 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003098:	d108      	bne.n	80030ac <HAL_UART_Transmit+0x6c>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d104      	bne.n	80030ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	e003      	b.n	80030b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030b4:	e02e      	b.n	8003114 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	2180      	movs	r1, #128	@ 0x80
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f848 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e03a      	b.n	800314e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	3302      	adds	r3, #2
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e007      	b.n	8003106 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3301      	adds	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1cb      	bne.n	80030b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	2140      	movs	r1, #64	@ 0x40
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f814 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e006      	b.n	800314e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	e03b      	b.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d037      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003170:	f7fd fdfa 	bl	8000d68 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	6a3a      	ldr	r2, [r7, #32]
 800317c:	429a      	cmp	r2, r3
 800317e:	d302      	bcc.n	8003186 <UART_WaitOnFlagUntilTimeout+0x30>
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e03a      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b80      	cmp	r3, #128	@ 0x80
 800319c:	d020      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d01d      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d116      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f81d 	bl	8003208 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2208      	movs	r2, #8
 80031d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e00f      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4013      	ands	r3, r2
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d0b4      	beq.n	8003168 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003208:	b480      	push	{r7}
 800320a:	b095      	sub	sp, #84	@ 0x54
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003230:	643a      	str	r2, [r7, #64]	@ 0x40
 8003232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003236:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003238:	e841 2300 	strex	r3, r2, [r1]
 800323c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e5      	bne.n	8003210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3314      	adds	r3, #20
 800324a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	61fb      	str	r3, [r7, #28]
   return(result);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800326a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	2b01      	cmp	r3, #1
 800327e:	d119      	bne.n	80032b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f023 0310 	bic.w	r3, r3, #16
 8003296:	647b      	str	r3, [r7, #68]	@ 0x44
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a0:	61ba      	str	r2, [r7, #24]
 80032a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6979      	ldr	r1, [r7, #20]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	613b      	str	r3, [r7, #16]
   return(result);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032c2:	bf00      	nop
 80032c4:	3754      	adds	r7, #84	@ 0x54
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b0c0      	sub	sp, #256	@ 0x100
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	68d9      	ldr	r1, [r3, #12]
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	ea40 0301 	orr.w	r3, r0, r1
 80032f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	431a      	orrs	r2, r3
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	431a      	orrs	r2, r3
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003328:	f021 010c 	bic.w	r1, r1, #12
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003336:	430b      	orrs	r3, r1
 8003338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	6999      	ldr	r1, [r3, #24]
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	ea40 0301 	orr.w	r3, r0, r1
 8003356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b8f      	ldr	r3, [pc, #572]	@ (800359c <UART_SetConfig+0x2cc>)
 8003360:	429a      	cmp	r2, r3
 8003362:	d005      	beq.n	8003370 <UART_SetConfig+0xa0>
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b8d      	ldr	r3, [pc, #564]	@ (80035a0 <UART_SetConfig+0x2d0>)
 800336c:	429a      	cmp	r2, r3
 800336e:	d104      	bne.n	800337a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7ff f934 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8003374:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003378:	e003      	b.n	8003382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800337a:	f7ff f91b 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 800337e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800338c:	f040 810c 	bne.w	80035a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800339a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800339e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033a2:	4622      	mov	r2, r4
 80033a4:	462b      	mov	r3, r5
 80033a6:	1891      	adds	r1, r2, r2
 80033a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033aa:	415b      	adcs	r3, r3
 80033ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033b2:	4621      	mov	r1, r4
 80033b4:	eb12 0801 	adds.w	r8, r2, r1
 80033b8:	4629      	mov	r1, r5
 80033ba:	eb43 0901 	adc.w	r9, r3, r1
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d2:	4690      	mov	r8, r2
 80033d4:	4699      	mov	r9, r3
 80033d6:	4623      	mov	r3, r4
 80033d8:	eb18 0303 	adds.w	r3, r8, r3
 80033dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033e0:	462b      	mov	r3, r5
 80033e2:	eb49 0303 	adc.w	r3, r9, r3
 80033e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033fe:	460b      	mov	r3, r1
 8003400:	18db      	adds	r3, r3, r3
 8003402:	653b      	str	r3, [r7, #80]	@ 0x50
 8003404:	4613      	mov	r3, r2
 8003406:	eb42 0303 	adc.w	r3, r2, r3
 800340a:	657b      	str	r3, [r7, #84]	@ 0x54
 800340c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003414:	f7fc ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4b61      	ldr	r3, [pc, #388]	@ (80035a4 <UART_SetConfig+0x2d4>)
 800341e:	fba3 2302 	umull	r2, r3, r3, r2
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	011c      	lsls	r4, r3, #4
 8003426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003430:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003440:	415b      	adcs	r3, r3
 8003442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003448:	4641      	mov	r1, r8
 800344a:	eb12 0a01 	adds.w	sl, r2, r1
 800344e:	4649      	mov	r1, r9
 8003450:	eb43 0b01 	adc.w	fp, r3, r1
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003468:	4692      	mov	sl, r2
 800346a:	469b      	mov	fp, r3
 800346c:	4643      	mov	r3, r8
 800346e:	eb1a 0303 	adds.w	r3, sl, r3
 8003472:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003476:	464b      	mov	r3, r9
 8003478:	eb4b 0303 	adc.w	r3, fp, r3
 800347c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800348c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003494:	460b      	mov	r3, r1
 8003496:	18db      	adds	r3, r3, r3
 8003498:	643b      	str	r3, [r7, #64]	@ 0x40
 800349a:	4613      	mov	r3, r2
 800349c:	eb42 0303 	adc.w	r3, r2, r3
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034aa:	f7fc ff01 	bl	80002b0 <__aeabi_uldivmod>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <UART_SetConfig+0x2d4>)
 80034b6:	fba3 2301 	umull	r2, r3, r3, r1
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2264      	movs	r2, #100	@ 0x64
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	1acb      	subs	r3, r1, r3
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034ca:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <UART_SetConfig+0x2d4>)
 80034cc:	fba3 2302 	umull	r2, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034d8:	441c      	add	r4, r3
 80034da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034f4:	415b      	adcs	r3, r3
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034fc:	4641      	mov	r1, r8
 80034fe:	1851      	adds	r1, r2, r1
 8003500:	6339      	str	r1, [r7, #48]	@ 0x30
 8003502:	4649      	mov	r1, r9
 8003504:	414b      	adcs	r3, r1
 8003506:	637b      	str	r3, [r7, #52]	@ 0x34
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003514:	4659      	mov	r1, fp
 8003516:	00cb      	lsls	r3, r1, #3
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351e:	4651      	mov	r1, sl
 8003520:	00ca      	lsls	r2, r1, #3
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4603      	mov	r3, r0
 8003528:	4642      	mov	r2, r8
 800352a:	189b      	adds	r3, r3, r2
 800352c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003530:	464b      	mov	r3, r9
 8003532:	460a      	mov	r2, r1
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003548:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800354c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003550:	460b      	mov	r3, r1
 8003552:	18db      	adds	r3, r3, r3
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003556:	4613      	mov	r3, r2
 8003558:	eb42 0303 	adc.w	r3, r2, r3
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800355e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003566:	f7fc fea3 	bl	80002b0 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <UART_SetConfig+0x2d4>)
 8003570:	fba3 1302 	umull	r1, r3, r3, r2
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	2164      	movs	r1, #100	@ 0x64
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	3332      	adds	r3, #50	@ 0x32
 8003582:	4a08      	ldr	r2, [pc, #32]	@ (80035a4 <UART_SetConfig+0x2d4>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	f003 0207 	and.w	r2, r3, #7
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4422      	add	r2, r4
 8003596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003598:	e106      	b.n	80037a8 <UART_SetConfig+0x4d8>
 800359a:	bf00      	nop
 800359c:	40011000 	.word	0x40011000
 80035a0:	40011400 	.word	0x40011400
 80035a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035ba:	4642      	mov	r2, r8
 80035bc:	464b      	mov	r3, r9
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	6239      	str	r1, [r7, #32]
 80035c2:	415b      	adcs	r3, r3
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ca:	4641      	mov	r1, r8
 80035cc:	1854      	adds	r4, r2, r1
 80035ce:	4649      	mov	r1, r9
 80035d0:	eb43 0501 	adc.w	r5, r3, r1
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	00eb      	lsls	r3, r5, #3
 80035de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e2:	00e2      	lsls	r2, r4, #3
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	18e3      	adds	r3, r4, r3
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035f0:	464b      	mov	r3, r9
 80035f2:	eb45 0303 	adc.w	r3, r5, r3
 80035f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003606:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003616:	4629      	mov	r1, r5
 8003618:	008b      	lsls	r3, r1, #2
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003620:	4621      	mov	r1, r4
 8003622:	008a      	lsls	r2, r1, #2
 8003624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003628:	f7fc fe42 	bl	80002b0 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4b60      	ldr	r3, [pc, #384]	@ (80037b4 <UART_SetConfig+0x4e4>)
 8003632:	fba3 2302 	umull	r2, r3, r3, r2
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	011c      	lsls	r4, r3, #4
 800363a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003644:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800364c:	4642      	mov	r2, r8
 800364e:	464b      	mov	r3, r9
 8003650:	1891      	adds	r1, r2, r2
 8003652:	61b9      	str	r1, [r7, #24]
 8003654:	415b      	adcs	r3, r3
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365c:	4641      	mov	r1, r8
 800365e:	1851      	adds	r1, r2, r1
 8003660:	6139      	str	r1, [r7, #16]
 8003662:	4649      	mov	r1, r9
 8003664:	414b      	adcs	r3, r1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003674:	4659      	mov	r1, fp
 8003676:	00cb      	lsls	r3, r1, #3
 8003678:	4651      	mov	r1, sl
 800367a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367e:	4651      	mov	r1, sl
 8003680:	00ca      	lsls	r2, r1, #3
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	4603      	mov	r3, r0
 8003688:	4642      	mov	r2, r8
 800368a:	189b      	adds	r3, r3, r2
 800368c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003690:	464b      	mov	r3, r9
 8003692:	460a      	mov	r2, r1
 8003694:	eb42 0303 	adc.w	r3, r2, r3
 8003698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036b4:	4649      	mov	r1, r9
 80036b6:	008b      	lsls	r3, r1, #2
 80036b8:	4641      	mov	r1, r8
 80036ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036be:	4641      	mov	r1, r8
 80036c0:	008a      	lsls	r2, r1, #2
 80036c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036c6:	f7fc fdf3 	bl	80002b0 <__aeabi_uldivmod>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	4b38      	ldr	r3, [pc, #224]	@ (80037b4 <UART_SetConfig+0x4e4>)
 80036d2:	fba3 2301 	umull	r2, r3, r3, r1
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2264      	movs	r2, #100	@ 0x64
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	1acb      	subs	r3, r1, r3
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	3332      	adds	r3, #50	@ 0x32
 80036e4:	4a33      	ldr	r2, [pc, #204]	@ (80037b4 <UART_SetConfig+0x4e4>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f0:	441c      	add	r4, r3
 80036f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f6:	2200      	movs	r2, #0
 80036f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80036fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80036fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003700:	4642      	mov	r2, r8
 8003702:	464b      	mov	r3, r9
 8003704:	1891      	adds	r1, r2, r2
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	415b      	adcs	r3, r3
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003710:	4641      	mov	r1, r8
 8003712:	1851      	adds	r1, r2, r1
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	4649      	mov	r1, r9
 8003718:	414b      	adcs	r3, r1
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003728:	4659      	mov	r1, fp
 800372a:	00cb      	lsls	r3, r1, #3
 800372c:	4651      	mov	r1, sl
 800372e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003732:	4651      	mov	r1, sl
 8003734:	00ca      	lsls	r2, r1, #3
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	4603      	mov	r3, r0
 800373c:	4642      	mov	r2, r8
 800373e:	189b      	adds	r3, r3, r2
 8003740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003742:	464b      	mov	r3, r9
 8003744:	460a      	mov	r2, r1
 8003746:	eb42 0303 	adc.w	r3, r2, r3
 800374a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	663b      	str	r3, [r7, #96]	@ 0x60
 8003756:	667a      	str	r2, [r7, #100]	@ 0x64
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003764:	4649      	mov	r1, r9
 8003766:	008b      	lsls	r3, r1, #2
 8003768:	4641      	mov	r1, r8
 800376a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376e:	4641      	mov	r1, r8
 8003770:	008a      	lsls	r2, r1, #2
 8003772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003776:	f7fc fd9b 	bl	80002b0 <__aeabi_uldivmod>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <UART_SetConfig+0x4e4>)
 8003780:	fba3 1302 	umull	r1, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	2164      	movs	r1, #100	@ 0x64
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	3332      	adds	r3, #50	@ 0x32
 8003792:	4a08      	ldr	r2, [pc, #32]	@ (80037b4 <UART_SetConfig+0x4e4>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4422      	add	r2, r4
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037ae:	46bd      	mov	sp, r7
 80037b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037b4:	51eb851f 	.word	0x51eb851f

080037b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80037c6:	6839      	ldr	r1, [r7, #0]
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f001 fc3a 	bl	8005042 <VL53L0X_get_offset_calibration_data_micro_meter>
 80037ce:	4603      	mov	r3, r0
 80037d0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80037e0:	b5b0      	push	{r4, r5, r7, lr}
 80037e2:	b094      	sub	sp, #80	@ 0x50
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80037ee:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d107      	bne.n	8003806 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2188      	movs	r1, #136	@ 0x88
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f004 fbf4 	bl	8007fe8 <VL53L0X_WrByte>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003814:	f8a3 214e 	strh.w	r2, [r3, #334]	@ 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800381e:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a71      	ldr	r2, [pc, #452]	@ (80039ec <VL53L0X_DataInit+0x20c>)
 8003826:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a70      	ldr	r2, [pc, #448]	@ (80039f0 <VL53L0X_DataInit+0x210>)
 800382e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003838:	f107 0308 	add.w	r3, r7, #8
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa66 	bl	8003d10 <VL53L0X_GetDeviceParameters>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 800384a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800384e:	2b00      	cmp	r3, #0
 8003850:	d112      	bne.n	8003878 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003852:	2300      	movs	r3, #0
 8003854:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003856:	2300      	movs	r3, #0
 8003858:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f103 0410 	add.w	r4, r3, #16
 8003860:	f107 0508 	add.w	r5, r7, #8
 8003864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800386a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800386c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800386e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003870:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2264      	movs	r2, #100	@ 0x64
 800387c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8003886:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003890:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800389a:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038a6:	2300      	movs	r3, #0
 80038a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038aa:	e014      	b.n	80038d6 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 80038ac:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d114      	bne.n	80038de <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80038b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2201      	movs	r2, #1
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fd59 	bl	8004374 <VL53L0X_SetLimitCheckEnable>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d2:	3301      	adds	r3, #1
 80038d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d8:	2b05      	cmp	r3, #5
 80038da:	dde7      	ble.n	80038ac <VL53L0X_DataInit+0xcc>
 80038dc:	e000      	b.n	80038e0 <VL53L0X_DataInit+0x100>
		else
			break;
 80038de:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80038e0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80038e8:	2200      	movs	r2, #0
 80038ea:	2102      	movs	r1, #2
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fd41 	bl	8004374 <VL53L0X_SetLimitCheckEnable>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80038f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003900:	2200      	movs	r2, #0
 8003902:	2103      	movs	r1, #3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fd35 	bl	8004374 <VL53L0X_SetLimitCheckEnable>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003910:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003918:	2200      	movs	r2, #0
 800391a:	2104      	movs	r1, #4
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fd29 	bl	8004374 <VL53L0X_SetLimitCheckEnable>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003928:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003930:	2200      	movs	r2, #0
 8003932:	2105      	movs	r1, #5
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fd1d 	bl	8004374 <VL53L0X_SetLimitCheckEnable>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003940:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003944:	2b00      	cmp	r3, #0
 8003946:	d108      	bne.n	800395a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003948:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800394c:	2100      	movs	r1, #0
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fdc0 	bl	80044d4 <VL53L0X_SetLimitCheckValue>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800395a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800395e:	2b00      	cmp	r3, #0
 8003960:	d108      	bne.n	8003974 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003962:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003966:	2101      	movs	r1, #1
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fdb3 	bl	80044d4 <VL53L0X_SetLimitCheckValue>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003974:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800397c:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8003980:	2102      	movs	r1, #2
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fda6 	bl	80044d4 <VL53L0X_SetLimitCheckValue>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800398e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003996:	2200      	movs	r2, #0
 8003998:	2103      	movs	r1, #3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fd9a 	bl	80044d4 <VL53L0X_SetLimitCheckValue>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039a6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	22ff      	movs	r2, #255	@ 0xff
 80039b2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80039b6:	22ff      	movs	r2, #255	@ 0xff
 80039b8:	2101      	movs	r1, #1
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f004 fb14 	bl	8007fe8 <VL53L0X_WrByte>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80039ce:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80039de:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3750      	adds	r7, #80	@ 0x50
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ea:	bf00      	nop
 80039ec:	00016b85 	.word	0x00016b85
 80039f0:	000970a4 	.word	0x000970a4

080039f4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b09e      	sub	sp, #120	@ 0x78
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	2240      	movs	r2, #64	@ 0x40
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fba0 	bl	8008150 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003a30:	2101      	movs	r1, #1
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f002 fa45 	bl	8005ec2 <VL53L0X_get_info_from_device>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8003a44:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8003a4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003a50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d80d      	bhi.n	8003a74 <VL53L0X_StaticInit+0x80>
 8003a58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d806      	bhi.n	8003a74 <VL53L0X_StaticInit+0x80>
 8003a66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10e      	bne.n	8003a8c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d90b      	bls.n	8003a8c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003a74:	f107 0218 	add.w	r2, r7, #24
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f001 fcda 	bl	8005438 <VL53L0X_perform_ref_spad_management>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003a8a:	e009      	b.n	8003aa0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a90:	461a      	mov	r2, r3
 8003a92:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f001 fedb 	bl	8005850 <VL53L0X_set_reference_spads>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003aa0:	4b93      	ldr	r3, [pc, #588]	@ (8003cf0 <VL53L0X_StaticInit+0x2fc>)
 8003aa2:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003aa4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003ab2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ac6:	e001      	b.n	8003acc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003ac8:	4b89      	ldr	r3, [pc, #548]	@ (8003cf0 <VL53L0X_StaticInit+0x2fc>)
 8003aca:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003acc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003ad4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f003 fb10 	bl	80070fc <VL53L0X_load_tuning_settings>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003ae2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2304      	movs	r3, #4
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f001 f8d7 	bl	8004ca8 <VL53L0X_SetGpioConfig>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b00:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d121      	bne.n	8003b4c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b08:	2201      	movs	r2, #1
 8003b0a:	21ff      	movs	r1, #255	@ 0xff
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f004 fa6b 	bl	8007fe8 <VL53L0X_WrByte>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003b18:	f107 031a 	add.w	r3, r7, #26
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2184      	movs	r1, #132	@ 0x84
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f004 f9ef 	bl	8007f04 <VL53L0X_RdWord>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b34:	2200      	movs	r2, #0
 8003b36:	21ff      	movs	r1, #255	@ 0xff
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f004 fa55 	bl	8007fe8 <VL53L0X_WrByte>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d104      	bne.n	8003b5e <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003b54:	8b7b      	ldrh	r3, [r7, #26]
 8003b56:	011a      	lsls	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003b5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d108      	bne.n	8003b78 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8cf 	bl	8003d10 <VL53L0X_GetDeviceParameters>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003b78:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d110      	bne.n	8003ba2 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003b80:	f107 0319 	add.w	r3, r7, #25
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f991 	bl	8003eae <VL53L0X_GetFractionEnable>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003b92:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003b9a:	7e7a      	ldrb	r2, [r7, #25]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003ba2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 0410 	add.w	r4, r3, #16
 8003bb0:	f107 051c 	add.w	r5, r7, #28
 8003bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003bc8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 8003bd0:	f107 0319 	add.w	r3, r7, #25
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f004 f90d 	bl	8007df8 <VL53L0X_RdByte>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003be4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d103      	bne.n	8003bf4 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003bec:	7e7a      	ldrb	r2, [r7, #25]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003bf4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2100      	movs	r1, #0
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f9b1 	bl	8003f68 <VL53L0X_SetSequenceStepEnable>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003c0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c14:	2200      	movs	r2, #0
 8003c16:	2102      	movs	r1, #2
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f9a5 	bl	8003f68 <VL53L0X_SetSequenceStepEnable>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003c24:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c34:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003c3c:	f107 0313 	add.w	r3, r7, #19
 8003c40:	461a      	mov	r2, r3
 8003c42:	2100      	movs	r1, #0
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f977 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c50:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003c58:	7cfa      	ldrb	r2, [r7, #19]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c60:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003c68:	f107 0313 	add.w	r3, r7, #19
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2101      	movs	r1, #1
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f961 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003c84:	7cfa      	ldrb	r2, [r7, #19]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <VL53L0X_StaticInit+0x2b4>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003c94:	f107 030c 	add.w	r3, r7, #12
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2103      	movs	r1, #3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 faad 	bl	80041fc <VL53L0X_GetSequenceStepTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ca8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cb8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <VL53L0X_StaticInit+0x2e0>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa97 	bl	80041fc <VL53L0X_GetSequenceStepTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cd4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ce4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3770      	adds	r7, #112	@ 0x70
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf0:	20000010 	.word	0x20000010

08003cf4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003cfc:	239d      	movs	r3, #157	@ 0x9d
 8003cfe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8b0 	bl	8003e88 <VL53L0X_GetDeviceMode>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa9e 	bl	800427c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003d40:	4603      	mov	r3, r0
 8003d42:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fad4 	bl	800430e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fd1d 	bl	80037b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d134      	bne.n	8003df4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	e02a      	b.n	8003de6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d12a      	bne.n	8003dee <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	b299      	uxth	r1, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	3304      	adds	r3, #4
 8003da8:	461a      	mov	r2, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fbf4 	bl	8004598 <VL53L0X_GetLimitCheckValue>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d117      	bne.n	8003df2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	b299      	uxth	r1, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3318      	adds	r3, #24
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb5b 	bl	800448c <VL53L0X_GetLimitCheckEnable>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	ddd1      	ble.n	8003d90 <VL53L0X_GetDeviceParameters+0x80>
 8003dec:	e002      	b.n	8003df4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003df2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	333c      	adds	r3, #60	@ 0x3c
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fc56 	bl	80046b4 <VL53L0X_GetWrapAroundCheckEnable>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f879 	bl	8003f12 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003e20:	4603      	mov	r3, r0
 8003e22:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	2b15      	cmp	r3, #21
 8003e44:	bf8c      	ite	hi
 8003e46:	2201      	movhi	r2, #1
 8003e48:	2200      	movls	r2, #0
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	2a00      	cmp	r2, #0
 8003e4e:	d10f      	bne.n	8003e70 <VL53L0X_SetDeviceMode+0x40>
 8003e50:	4a0c      	ldr	r2, [pc, #48]	@ (8003e84 <VL53L0X_SetDeviceMode+0x54>)
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	741a      	strb	r2, [r3, #16]
		break;
 8003e6e:	e001      	b.n	8003e74 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003e70:	23f8      	movs	r3, #248	@ 0xf8
 8003e72:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	0030000b 	.word	0x0030000b

08003e88 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7c1a      	ldrb	r2, [r3, #16]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	2109      	movs	r1, #9
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f003 ff99 	bl	8007df8 <VL53L0X_RdByte>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f002 ff6c 	bl	8006dda <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003f02:	4603      	mov	r3, r0
 8003f04:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f003 f839 	bl	8006f9a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	460b      	mov	r3, r1
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003f4a:	7afb      	ldrb	r3, [r7, #11]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f002 ff0b 	bl	8006d6c <VL53L0X_get_vcsel_pulse_period>
 8003f56:	4603      	mov	r3, r0
 8003f58:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
 8003f74:	4613      	mov	r3, r2
 8003f76:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003f84:	f107 030f 	add.w	r3, r7, #15
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f003 ff33 	bl	8007df8 <VL53L0X_RdByte>
 8003f92:	4603      	mov	r3, r0
 8003f94:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d159      	bne.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8003fa2:	78bb      	ldrb	r3, [r7, #2]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d12b      	bne.n	8004000 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d825      	bhi.n	8003ffa <VL53L0X_SetSequenceStepEnable+0x92>
 8003fae:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fc9 	.word	0x08003fc9
 8003fb8:	08003fd3 	.word	0x08003fd3
 8003fbc:	08003fdd 	.word	0x08003fdd
 8003fc0:	08003fe7 	.word	0x08003fe7
 8003fc4:	08003ff1 	.word	0x08003ff1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003fc8:	7dbb      	ldrb	r3, [r7, #22]
 8003fca:	f043 0310 	orr.w	r3, r3, #16
 8003fce:	75bb      	strb	r3, [r7, #22]
				break;
 8003fd0:	e041      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003fd2:	7dbb      	ldrb	r3, [r7, #22]
 8003fd4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8003fd8:	75bb      	strb	r3, [r7, #22]
				break;
 8003fda:	e03c      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003fdc:	7dbb      	ldrb	r3, [r7, #22]
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	75bb      	strb	r3, [r7, #22]
				break;
 8003fe4:	e037      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003fe6:	7dbb      	ldrb	r3, [r7, #22]
 8003fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fec:	75bb      	strb	r3, [r7, #22]
				break;
 8003fee:	e032      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003ff0:	7dbb      	ldrb	r3, [r7, #22]
 8003ff2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ff6:	75bb      	strb	r3, [r7, #22]
				break;
 8003ff8:	e02d      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003ffa:	23fc      	movs	r3, #252	@ 0xfc
 8003ffc:	75fb      	strb	r3, [r7, #23]
 8003ffe:	e02a      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d825      	bhi.n	8004052 <VL53L0X_SetSequenceStepEnable+0xea>
 8004006:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004021 	.word	0x08004021
 8004010:	0800402b 	.word	0x0800402b
 8004014:	08004035 	.word	0x08004035
 8004018:	0800403f 	.word	0x0800403f
 800401c:	08004049 	.word	0x08004049
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004020:	7dbb      	ldrb	r3, [r7, #22]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	75bb      	strb	r3, [r7, #22]
				break;
 8004028:	e015      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800402a:	7dbb      	ldrb	r3, [r7, #22]
 800402c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8004030:	75bb      	strb	r3, [r7, #22]
				break;
 8004032:	e010      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004034:	7dbb      	ldrb	r3, [r7, #22]
 8004036:	f023 0304 	bic.w	r3, r3, #4
 800403a:	75bb      	strb	r3, [r7, #22]
				break;
 800403c:	e00b      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800403e:	7dbb      	ldrb	r3, [r7, #22]
 8004040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004044:	75bb      	strb	r3, [r7, #22]
				break;
 8004046:	e006      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004048:	7dbb      	ldrb	r3, [r7, #22]
 800404a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800404e:	75bb      	strb	r3, [r7, #22]
				break;
 8004050:	e001      	b.n	8004056 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004052:	23fc      	movs	r3, #252	@ 0xfc
 8004054:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	7dba      	ldrb	r2, [r7, #22]
 800405a:	429a      	cmp	r2, r3
 800405c:	d01e      	beq.n	800409c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800405e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d107      	bne.n	8004076 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8004066:	7dbb      	ldrb	r3, [r7, #22]
 8004068:	461a      	mov	r2, r3
 800406a:	2101      	movs	r1, #1
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f003 ffbb 	bl	8007fe8 <VL53L0X_WrByte>
 8004072:	4603      	mov	r3, r0
 8004074:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004076:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	7dba      	ldrb	r2, [r7, #22]
 8004082:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004086:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff28 	bl	8003eec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800409c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	72fb      	strb	r3, [r7, #11]
 80040b6:	4613      	mov	r3, r2
 80040b8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80040c4:	7afb      	ldrb	r3, [r7, #11]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d836      	bhi.n	8004138 <sequence_step_enabled+0x90>
 80040ca:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <sequence_step_enabled+0x28>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080040e5 	.word	0x080040e5
 80040d4:	080040f7 	.word	0x080040f7
 80040d8:	08004109 	.word	0x08004109
 80040dc:	0800411b 	.word	0x0800411b
 80040e0:	0800412d 	.word	0x0800412d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80040e4:	7abb      	ldrb	r3, [r7, #10]
 80040e6:	111b      	asrs	r3, r3, #4
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	701a      	strb	r2, [r3, #0]
		break;
 80040f4:	e022      	b.n	800413c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80040f6:	7abb      	ldrb	r3, [r7, #10]
 80040f8:	10db      	asrs	r3, r3, #3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	701a      	strb	r2, [r3, #0]
		break;
 8004106:	e019      	b.n	800413c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004108:	7abb      	ldrb	r3, [r7, #10]
 800410a:	109b      	asrs	r3, r3, #2
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	701a      	strb	r2, [r3, #0]
		break;
 8004118:	e010      	b.n	800413c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800411a:	7abb      	ldrb	r3, [r7, #10]
 800411c:	119b      	asrs	r3, r3, #6
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	701a      	strb	r2, [r3, #0]
		break;
 800412a:	e007      	b.n	800413c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800412c:	7abb      	ldrb	r3, [r7, #10]
 800412e:	09db      	lsrs	r3, r3, #7
 8004130:	b2da      	uxtb	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	701a      	strb	r2, [r3, #0]
		break;
 8004136:	e001      	b.n	800413c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004138:	23fc      	movs	r3, #252	@ 0xfc
 800413a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800413c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800415e:	f107 030e 	add.w	r3, r7, #14
 8004162:	461a      	mov	r2, r3
 8004164:	2101      	movs	r1, #1
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f003 fe46 	bl	8007df8 <VL53L0X_RdByte>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d107      	bne.n	8004188 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004178:	7bba      	ldrb	r2, [r7, #14]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2100      	movs	r1, #0
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ff92 	bl	80040a8 <sequence_step_enabled>
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d108      	bne.n	80041a2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004190:	7bba      	ldrb	r2, [r7, #14]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	3302      	adds	r3, #2
 8004196:	2101      	movs	r1, #1
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff85 	bl	80040a8 <sequence_step_enabled>
 800419e:	4603      	mov	r3, r0
 80041a0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d108      	bne.n	80041bc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80041aa:	7bba      	ldrb	r2, [r7, #14]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	2102      	movs	r1, #2
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ff78 	bl	80040a8 <sequence_step_enabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80041c4:	7bba      	ldrb	r2, [r7, #14]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	3303      	adds	r3, #3
 80041ca:	2103      	movs	r1, #3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff6b 	bl	80040a8 <sequence_step_enabled>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d108      	bne.n	80041f0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80041de:	7bba      	ldrb	r2, [r7, #14]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2104      	movs	r1, #4
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ff5e 	bl	80040a8 <sequence_step_enabled>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	460b      	mov	r3, r1
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800420a:	2300      	movs	r3, #0
 800420c:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8004216:	f107 0210 	add.w	r2, r7, #16
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	4619      	mov	r1, r3
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f002 fbd0 	bl	80069c4 <get_sequence_step_timeout>
 8004224:	4603      	mov	r3, r0
 8004226:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8004228:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11c      	bne.n	800426a <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4a11      	ldr	r2, [pc, #68]	@ (8004278 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	099b      	lsrs	r3, r3, #6
 800423a:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4613      	mov	r3, r2
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800425c:	4a06      	ldr	r2, [pc, #24]	@ (8004278 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800426a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	10624dd3 	.word	0x10624dd3

0800427c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	461a      	mov	r2, r3
 8004290:	21f8      	movs	r1, #248	@ 0xf8
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f003 fe36 	bl	8007f04 <VL53L0X_RdWord>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800429c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d108      	bne.n	80042b6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80042a4:	f107 0308 	add.w	r3, r7, #8
 80042a8:	461a      	mov	r2, r3
 80042aa:	2104      	movs	r1, #4
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f003 fe5f 	bl	8007f70 <VL53L0X_RdDWord>
 80042b2:	4603      	mov	r3, r0
 80042b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80042be:	89bb      	ldrh	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	89ba      	ldrh	r2, [r7, #12]
 80042c8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80042d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7f1b      	ldrb	r3, [r3, #28]
 80042f6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	7bba      	ldrb	r2, [r7, #14]
 80042fc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80042fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b086      	sub	sp, #24
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004318:	2300      	movs	r3, #0
 800431a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800431c:	f107 030e 	add.w	r3, r7, #14
 8004320:	461a      	mov	r2, r3
 8004322:	2120      	movs	r1, #32
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f003 fded 	bl	8007f04 <VL53L0X_RdWord>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800432e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d118      	bne.n	8004368 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	771a      	strb	r2, [r3, #28]
 800434e:	e00b      	b.n	8004368 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
 8004380:	4613      	mov	r3, r2
 8004382:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004384:	2300      	movs	r3, #0
 8004386:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004394:	887b      	ldrh	r3, [r7, #2]
 8004396:	2b05      	cmp	r3, #5
 8004398:	d902      	bls.n	80043a0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800439a:	23fc      	movs	r3, #252	@ 0xfc
 800439c:	75fb      	strb	r3, [r7, #23]
 800439e:	e05b      	b.n	8004458 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80043a0:	787b      	ldrb	r3, [r7, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73bb      	strb	r3, [r7, #14]
 80043b2:	e00a      	b.n	80043ca <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80043b4:	887b      	ldrh	r3, [r7, #2]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	330c      	adds	r3, #12
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80043ca:	887b      	ldrh	r3, [r7, #2]
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d841      	bhi.n	8004454 <VL53L0X_SetLimitCheckEnable+0xe0>
 80043d0:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043f1 	.word	0x080043f1
 80043dc:	080043fb 	.word	0x080043fb
 80043e0:	08004411 	.word	0x08004411
 80043e4:	0800441b 	.word	0x0800441b
 80043e8:	08004425 	.word	0x08004425
 80043ec:	0800443d 	.word	0x0800443d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80043f8:	e02e      	b.n	8004458 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	2144      	movs	r1, #68	@ 0x44
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f003 fe13 	bl	8008030 <VL53L0X_WrWord>
 800440a:	4603      	mov	r3, r0
 800440c:	75fb      	strb	r3, [r7, #23]

			break;
 800440e:	e023      	b.n	8004458 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7bfa      	ldrb	r2, [r7, #15]
 8004414:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004418:	e01e      	b.n	8004458 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004422:	e019      	b.n	8004458 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800442a:	7b7b      	ldrb	r3, [r7, #13]
 800442c:	22fe      	movs	r2, #254	@ 0xfe
 800442e:	2160      	movs	r1, #96	@ 0x60
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f003 fe27 	bl	8008084 <VL53L0X_UpdateByte>
 8004436:	4603      	mov	r3, r0
 8004438:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800443a:	e00d      	b.n	8004458 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800443c:	7bbb      	ldrb	r3, [r7, #14]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004442:	7b7b      	ldrb	r3, [r7, #13]
 8004444:	22ef      	movs	r2, #239	@ 0xef
 8004446:	2160      	movs	r1, #96	@ 0x60
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f003 fe1b 	bl	8008084 <VL53L0X_UpdateByte>
 800444e:	4603      	mov	r3, r0
 8004450:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004452:	e001      	b.n	8004458 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004454:	23fc      	movs	r3, #252	@ 0xfc
 8004456:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004460:	787b      	ldrb	r3, [r7, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004472:	e005      	b.n	8004480 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004480:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	460b      	mov	r3, r1
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d905      	bls.n	80044b0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80044a4:	23fc      	movs	r3, #252	@ 0xfc
 80044a6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e008      	b.n	80044c2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80044b0:	897b      	ldrh	r3, [r7, #10]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7dba      	ldrb	r2, [r7, #22]
 80044c0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80044c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	460b      	mov	r3, r1
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044f0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80044f2:	7dbb      	ldrb	r3, [r7, #22]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80044f8:	897b      	ldrh	r3, [r7, #10]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	330c      	adds	r3, #12
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	e040      	b.n	800458a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004508:	897b      	ldrh	r3, [r7, #10]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d830      	bhi.n	8004570 <VL53L0X_SetLimitCheckValue+0x9c>
 800450e:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <VL53L0X_SetLimitCheckValue+0x40>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	0800452d 	.word	0x0800452d
 8004518:	08004535 	.word	0x08004535
 800451c:	0800454b 	.word	0x0800454b
 8004520:	08004553 	.word	0x08004553
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800455b 	.word	0x0800455b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004532:	e01f      	b.n	8004574 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004538:	b29b      	uxth	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	2144      	movs	r1, #68	@ 0x44
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f003 fd76 	bl	8008030 <VL53L0X_WrWord>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004548:	e014      	b.n	8004574 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004550:	e010      	b.n	8004574 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004558:	e00c      	b.n	8004574 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	2164      	movs	r1, #100	@ 0x64
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f003 fd63 	bl	8008030 <VL53L0X_WrWord>
 800456a:	4603      	mov	r3, r0
 800456c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800456e:	e001      	b.n	8004574 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004570:	23fc      	movs	r3, #252	@ 0xfc
 8004572:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800457c:	897b      	ldrh	r3, [r7, #10]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	330c      	adds	r3, #12
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800458a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop

08004598 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	460b      	mov	r3, r1
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	d847      	bhi.n	8004644 <VL53L0X_GetLimitCheckValue+0xac>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <VL53L0X_GetLimitCheckValue+0x24>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	08004607 	.word	0x08004607
 80045c8:	08004613 	.word	0x08004613
 80045cc:	0800461f 	.word	0x0800461f
 80045d0:	0800461f 	.word	0x0800461f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	77bb      	strb	r3, [r7, #30]
		break;
 80045de:	e033      	b.n	8004648 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80045e0:	f107 0316 	add.w	r3, r7, #22
 80045e4:	461a      	mov	r2, r3
 80045e6:	2144      	movs	r1, #68	@ 0x44
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f003 fc8b 	bl	8007f04 <VL53L0X_RdWord>
 80045ee:	4603      	mov	r3, r0
 80045f0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80045f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80045fa:	8afb      	ldrh	r3, [r7, #22]
 80045fc:	025b      	lsls	r3, r3, #9
 80045fe:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	77bb      	strb	r3, [r7, #30]
		break;
 8004604:	e020      	b.n	8004648 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	77bb      	strb	r3, [r7, #30]
		break;
 8004610:	e01a      	b.n	8004648 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	77bb      	strb	r3, [r7, #30]
		break;
 800461c:	e014      	b.n	8004648 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800461e:	f107 0316 	add.w	r3, r7, #22
 8004622:	461a      	mov	r2, r3
 8004624:	2164      	movs	r1, #100	@ 0x64
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f003 fc6c 	bl	8007f04 <VL53L0X_RdWord>
 800462c:	4603      	mov	r3, r0
 800462e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004630:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004638:	8afb      	ldrh	r3, [r7, #22]
 800463a:	025b      	lsls	r3, r3, #9
 800463c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	77bb      	strb	r3, [r7, #30]
		break;
 8004642:	e001      	b.n	8004648 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004644:	23fc      	movs	r3, #252	@ 0xfc
 8004646:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004648:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d12a      	bne.n	80046a6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004650:	7fbb      	ldrb	r3, [r7, #30]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d124      	bne.n	80046a0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d110      	bne.n	800467e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800465c:	897b      	ldrh	r3, [r7, #10]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	330c      	adds	r3, #12
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800467c:	e013      	b.n	80046a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004684:	897b      	ldrh	r3, [r7, #10]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	330c      	adds	r3, #12
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800469e:	e002      	b.n	80046a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80046a6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop

080046b4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80046c2:	f107 030e 	add.w	r3, r7, #14
 80046c6:	461a      	mov	r2, r3
 80046c8:	2101      	movs	r1, #1
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f003 fb94 	bl	8007df8 <VL53L0X_RdByte>
 80046d0:	4603      	mov	r3, r0
 80046d2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80046d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10e      	bne.n	80046fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80046dc:	7bba      	ldrb	r2, [r7, #14]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 80046e4:	7bbb      	ldrb	r3, [r7, #14]
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da03      	bge.n	80046f4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e002      	b.n	80046fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800470c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004724:	f107 030e 	add.w	r3, r7, #14
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fbac 	bl	8003e88 <VL53L0X_GetDeviceMode>
 8004730:	4603      	mov	r3, r0
 8004732:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f898 	bl	8004878 <VL53L0X_StartMeasurement>
 8004748:	4603      	mov	r3, r0
 800474a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800474c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fafd 	bl	8005d54 <VL53L0X_measurement_poll_for_completion>
 800475a:	4603      	mov	r3, r0
 800475c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800475e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004766:	7bbb      	ldrb	r3, [r7, #14]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2203      	movs	r2, #3
 8004770:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800478c:	2300      	movs	r3, #0
 800478e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004790:	2301      	movs	r3, #1
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f001 fa9f 	bl	8005cda <VL53L0X_perform_ref_calibration>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80047a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80047c2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80047c4:	7dbb      	ldrb	r3, [r7, #22]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d005      	beq.n	80047d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80047ca:	7dbb      	ldrb	r3, [r7, #22]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d002      	beq.n	80047d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80047d0:	7dbb      	ldrb	r3, [r7, #22]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d147      	bne.n	8004866 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	f107 0210 	add.w	r2, r7, #16
 80047de:	2101      	movs	r1, #1
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fb83 	bl	8004eec <VL53L0X_GetInterruptThresholds>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80047f0:	d803      	bhi.n	80047fa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80047f2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80047f4:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80047f8:	d935      	bls.n	8004866 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80047fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d131      	bne.n	8004866 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d006      	beq.n	8004816 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004808:	491a      	ldr	r1, [pc, #104]	@ (8004874 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f002 fc76 	bl	80070fc <VL53L0X_load_tuning_settings>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]
 8004814:	e027      	b.n	8004866 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004816:	2204      	movs	r2, #4
 8004818:	21ff      	movs	r1, #255	@ 0xff
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f003 fbe4 	bl	8007fe8 <VL53L0X_WrByte>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	4313      	orrs	r3, r2
 8004828:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800482a:	2200      	movs	r2, #0
 800482c:	2170      	movs	r1, #112	@ 0x70
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f003 fbda 	bl	8007fe8 <VL53L0X_WrByte>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	4313      	orrs	r3, r2
 800483c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800483e:	2200      	movs	r2, #0
 8004840:	21ff      	movs	r1, #255	@ 0xff
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f003 fbd0 	bl	8007fe8 <VL53L0X_WrByte>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	4313      	orrs	r3, r2
 8004850:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004852:	2200      	movs	r2, #0
 8004854:	2180      	movs	r1, #128	@ 0x80
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f003 fbc6 	bl	8007fe8 <VL53L0X_WrByte>
 800485c:	4603      	mov	r3, r0
 800485e:	461a      	mov	r2, r3
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	4313      	orrs	r3, r2
 8004864:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004866:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000104 	.word	0x20000104

08004878 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004888:	f107 030e 	add.w	r3, r7, #14
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff fafa 	bl	8003e88 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8004894:	7bbb      	ldrb	r3, [r7, #14]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d052      	beq.n	8004940 <VL53L0X_StartMeasurement+0xc8>
 800489a:	2b03      	cmp	r3, #3
 800489c:	dc6a      	bgt.n	8004974 <VL53L0X_StartMeasurement+0xfc>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <VL53L0X_StartMeasurement+0x30>
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d032      	beq.n	800490c <VL53L0X_StartMeasurement+0x94>
 80048a6:	e065      	b.n	8004974 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80048a8:	2201      	movs	r2, #1
 80048aa:	2100      	movs	r1, #0
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f003 fb9b 	bl	8007fe8 <VL53L0X_WrByte>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80048ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d15b      	bne.n	800497a <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 80048cc:	f107 030d 	add.w	r3, r7, #13
 80048d0:	461a      	mov	r2, r3
 80048d2:	2100      	movs	r1, #0
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f003 fa8f 	bl	8007df8 <VL53L0X_RdByte>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	3301      	adds	r3, #1
 80048e2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80048e4:	7b7a      	ldrb	r2, [r7, #13]
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	4013      	ands	r3, r2
 80048ea:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80048ec:	7bfa      	ldrb	r2, [r7, #15]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d106      	bne.n	8004900 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 80048f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80048fe:	d9e2      	bls.n	80048c6 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2bc7      	cmp	r3, #199	@ 0xc7
 8004904:	d939      	bls.n	800497a <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004906:	23f9      	movs	r3, #249	@ 0xf9
 8004908:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800490a:	e036      	b.n	800497a <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800490c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004914:	2101      	movs	r1, #1
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff48 	bl	80047ac <VL53L0X_CheckAndLoadInterruptSettings>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004920:	2202      	movs	r2, #2
 8004922:	2100      	movs	r1, #0
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f003 fb5f 	bl	8007fe8 <VL53L0X_WrByte>
 800492a:	4603      	mov	r3, r0
 800492c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800492e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d123      	bne.n	800497e <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800493e:	e01e      	b.n	800497e <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004948:	2101      	movs	r1, #1
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff ff2e 	bl	80047ac <VL53L0X_CheckAndLoadInterruptSettings>
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004954:	2204      	movs	r2, #4
 8004956:	2100      	movs	r1, #0
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f003 fb45 	bl	8007fe8 <VL53L0X_WrByte>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004962:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2204      	movs	r2, #4
 800496e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8004972:	e006      	b.n	8004982 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004974:	23f8      	movs	r3, #248	@ 0xf8
 8004976:	75fb      	strb	r3, [r7, #23]
 8004978:	e004      	b.n	8004984 <VL53L0X_StartMeasurement+0x10c>
		break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <VL53L0X_StartMeasurement+0x10c>
		break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <VL53L0X_StartMeasurement+0x10c>
		break;
 8004982:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80049a4:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80049a6:	7bbb      	ldrb	r3, [r7, #14]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d112      	bne.n	80049d2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fb0e 	bl	8004fd4 <VL53L0X_GetInterruptMaskStatus>
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d103      	bne.n	80049ca <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e01c      	b.n	8004a04 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e018      	b.n	8004a04 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80049d2:	f107 030d 	add.w	r3, r7, #13
 80049d6:	461a      	mov	r2, r3
 80049d8:	2114      	movs	r1, #20
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f003 fa0c 	bl	8007df8 <VL53L0X_RdByte>
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80049e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80049ec:	7b7b      	ldrb	r3, [r7, #13]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2201      	movs	r2, #1
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e002      	b.n	8004a04 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	b096      	sub	sp, #88	@ 0x58
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004a20:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004a24:	230c      	movs	r3, #12
 8004a26:	2114      	movs	r1, #20
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f003 fa3f 	bl	8007eac <VL53L0X_ReadMulti>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004a34:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 80c8 	bne.w	8004bce <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2200      	movs	r2, #0
 8004a42:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004a4a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004a56:	4413      	add	r3, r2
 8004a58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004a62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004a6e:	4413      	add	r3, r2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	025b      	lsls	r3, r3, #9
 8004a74:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a7a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004a7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8004a88:	4413      	add	r3, r2
 8004a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a92:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004a98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004ab0:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ab6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 314e 	ldrh.w	r3, [r3, #334]	@ 0x14e
 8004ac0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004ac8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004acc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ad2:	d046      	beq.n	8004b62 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004ad4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004ad6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004ae2:	4a58      	ldr	r2, [pc, #352]	@ (8004c44 <VL53L0X_GetRangingMeasurementData+0x234>)
 8004ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8004ae8:	1192      	asrs	r2, r2, #6
 8004aea:	17db      	asrs	r3, r3, #31
 8004aec:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004aee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7f1b      	ldrb	r3, [r3, #28]
 8004afc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004b00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02c      	beq.n	8004b62 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004b08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10d      	bne.n	8004b36 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 8004b1a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8004b22:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004b26:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004b2a:	e016      	b.n	8004b5a <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8004b2c:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8004b30:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004b34:	e011      	b.n	8004b5a <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004b36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004b40:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b42:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004b4a:	121b      	asrs	r3, r3, #8
 8004b4c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b50:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004b56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004b5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b5e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004b62:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004b6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004b76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	75da      	strb	r2, [r3, #23]
 8004b84:	e006      	b.n	8004b94 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004b8c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2200      	movs	r2, #0
 8004b92:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004b94:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004b98:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004b9c:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f002 ff08 	bl	80079c0 <VL53L0X_get_pal_range_status>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004bbe:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004bc6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004bce:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d12f      	bne.n	8004c36 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f107 040c 	add.w	r4, r7, #12
 8004bdc:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8004be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004be8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004bf0:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004bfe:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004c04:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004c0a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004c10:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004c16:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004c1c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8004c26:	f107 050c 	add.w	r5, r7, #12
 8004c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c36:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3750      	adds	r7, #80	@ 0x50
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bdb0      	pop	{r4, r5, r7, pc}
 8004c42:	bf00      	nop
 8004c44:	10624dd3 	.word	0x10624dd3

08004c48 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004c56:	2100      	movs	r1, #0
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff f8e9 	bl	8003e30 <VL53L0X_SetDeviceMode>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fd54 	bl	8004718 <VL53L0X_PerformSingleMeasurement>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fec6 	bl	8004a10 <VL53L0X_GetRangingMeasurementData>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004c90:	2100      	movs	r1, #0
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f95e 	bl	8004f54 <VL53L0X_ClearInterruptMask>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	70fb      	strb	r3, [r7, #3]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	70bb      	strb	r3, [r7, #2]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004ccc:	23f6      	movs	r3, #246	@ 0xf6
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e105      	b.n	8004ede <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004cd2:	78bb      	ldrb	r3, [r7, #2]
 8004cd4:	2b14      	cmp	r3, #20
 8004cd6:	d110      	bne.n	8004cfa <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004cd8:	7e3b      	ldrb	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004cde:	2310      	movs	r3, #16
 8004ce0:	73bb      	strb	r3, [r7, #14]
 8004ce2:	e001      	b.n	8004ce8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004ce8:	7bbb      	ldrb	r3, [r7, #14]
 8004cea:	461a      	mov	r2, r3
 8004cec:	2184      	movs	r1, #132	@ 0x84
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f003 f97a 	bl	8007fe8 <VL53L0X_WrByte>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e0f1      	b.n	8004ede <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004cfa:	78bb      	ldrb	r3, [r7, #2]
 8004cfc:	2b15      	cmp	r3, #21
 8004cfe:	f040 8097 	bne.w	8004e30 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004d02:	2201      	movs	r2, #1
 8004d04:	21ff      	movs	r1, #255	@ 0xff
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f003 f96e 	bl	8007fe8 <VL53L0X_WrByte>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f003 f964 	bl	8007fe8 <VL53L0X_WrByte>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	21ff      	movs	r1, #255	@ 0xff
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f003 f95a 	bl	8007fe8 <VL53L0X_WrByte>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2180      	movs	r1, #128	@ 0x80
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f003 f950 	bl	8007fe8 <VL53L0X_WrByte>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004d52:	2202      	movs	r2, #2
 8004d54:	2185      	movs	r1, #133	@ 0x85
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f003 f946 	bl	8007fe8 <VL53L0X_WrByte>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004d66:	2204      	movs	r2, #4
 8004d68:	21ff      	movs	r1, #255	@ 0xff
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f003 f93c 	bl	8007fe8 <VL53L0X_WrByte>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	21cd      	movs	r1, #205	@ 0xcd
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f003 f932 	bl	8007fe8 <VL53L0X_WrByte>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004d8e:	2211      	movs	r2, #17
 8004d90:	21cc      	movs	r1, #204	@ 0xcc
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f003 f928 	bl	8007fe8 <VL53L0X_WrByte>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004da2:	2207      	movs	r2, #7
 8004da4:	21ff      	movs	r1, #255	@ 0xff
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f003 f91e 	bl	8007fe8 <VL53L0X_WrByte>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004db6:	2200      	movs	r2, #0
 8004db8:	21be      	movs	r1, #190	@ 0xbe
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f003 f914 	bl	8007fe8 <VL53L0X_WrByte>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004dca:	2206      	movs	r2, #6
 8004dcc:	21ff      	movs	r1, #255	@ 0xff
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f003 f90a 	bl	8007fe8 <VL53L0X_WrByte>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004dde:	2209      	movs	r2, #9
 8004de0:	21cc      	movs	r1, #204	@ 0xcc
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f003 f900 	bl	8007fe8 <VL53L0X_WrByte>
 8004de8:	4603      	mov	r3, r0
 8004dea:	461a      	mov	r2, r3
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004df2:	2200      	movs	r2, #0
 8004df4:	21ff      	movs	r1, #255	@ 0xff
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f003 f8f6 	bl	8007fe8 <VL53L0X_WrByte>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004e06:	2201      	movs	r2, #1
 8004e08:	21ff      	movs	r1, #255	@ 0xff
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f003 f8ec 	bl	8007fe8 <VL53L0X_WrByte>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f003 f8e2 	bl	8007fe8 <VL53L0X_WrByte>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461a      	mov	r2, r3
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	73fb      	strb	r3, [r7, #15]
 8004e2e:	e056      	b.n	8004ede <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d120      	bne.n	8004e7a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004e38:	787b      	ldrb	r3, [r7, #1]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d81b      	bhi.n	8004e76 <VL53L0X_SetGpioConfig+0x1ce>
 8004e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <VL53L0X_SetGpioConfig+0x19c>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e59 	.word	0x08004e59
 8004e48:	08004e5f 	.word	0x08004e5f
 8004e4c:	08004e65 	.word	0x08004e65
 8004e50:	08004e6b 	.word	0x08004e6b
 8004e54:	08004e71 	.word	0x08004e71
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73bb      	strb	r3, [r7, #14]
				break;
 8004e5c:	e00d      	b.n	8004e7a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73bb      	strb	r3, [r7, #14]
				break;
 8004e62:	e00a      	b.n	8004e7a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004e64:	2302      	movs	r3, #2
 8004e66:	73bb      	strb	r3, [r7, #14]
				break;
 8004e68:	e007      	b.n	8004e7a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	73bb      	strb	r3, [r7, #14]
				break;
 8004e6e:	e004      	b.n	8004e7a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004e70:	2304      	movs	r3, #4
 8004e72:	73bb      	strb	r3, [r7, #14]
				break;
 8004e74:	e001      	b.n	8004e7a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8004e76:	23f5      	movs	r3, #245	@ 0xf5
 8004e78:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d107      	bne.n	8004e92 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004e82:	7bbb      	ldrb	r3, [r7, #14]
 8004e84:	461a      	mov	r2, r3
 8004e86:	210a      	movs	r1, #10
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f003 f8ad 	bl	8007fe8 <VL53L0X_WrByte>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004e9a:	7e3b      	ldrb	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73bb      	strb	r3, [r7, #14]
 8004ea4:	e001      	b.n	8004eaa <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	22ef      	movs	r2, #239	@ 0xef
 8004eae:	2184      	movs	r1, #132	@ 0x84
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f003 f8e7 	bl	8008084 <VL53L0X_UpdateByte>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	787a      	ldrb	r2, [r7, #1]
 8004ec6:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f83d 	bl	8004f54 <VL53L0X_ClearInterruptMask>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	461a      	mov	r2, r3
 8004f06:	210e      	movs	r1, #14
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f002 fffb 	bl	8007f04 <VL53L0X_RdWord>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004f12:	8abb      	ldrh	r3, [r7, #20]
 8004f14:	045a      	lsls	r2, r3, #17
 8004f16:	4b0e      	ldr	r3, [pc, #56]	@ (8004f50 <VL53L0X_GetInterruptThresholds+0x64>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10e      	bne.n	8004f44 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	210c      	movs	r1, #12
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f002 ffe8 	bl	8007f04 <VL53L0X_RdWord>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004f38:	8abb      	ldrh	r3, [r7, #20]
 8004f3a:	045a      	lsls	r2, r3, #17
 8004f3c:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <VL53L0X_GetInterruptThresholds+0x64>)
 8004f3e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	1ffe0000 	.word	0x1ffe0000

08004f54 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004f66:	2201      	movs	r2, #1
 8004f68:	210b      	movs	r1, #11
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f003 f83c 	bl	8007fe8 <VL53L0X_WrByte>
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004f74:	2200      	movs	r2, #0
 8004f76:	210b      	movs	r1, #11
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f003 f835 	bl	8007fe8 <VL53L0X_WrByte>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	461a      	mov	r2, r3
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004f88:	f107 030d 	add.w	r3, r7, #13
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2113      	movs	r1, #19
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f002 ff31 	bl	8007df8 <VL53L0X_RdByte>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004fa0:	7bbb      	ldrb	r3, [r7, #14]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004fa6:	7b7b      	ldrb	r3, [r7, #13]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d006      	beq.n	8004fbe <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d803      	bhi.n	8004fbe <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0d3      	beq.n	8004f66 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004fc4:	23f4      	movs	r3, #244	@ 0xf4
 8004fc6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004fe2:	f107 030e 	add.w	r3, r7, #14
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2113      	movs	r1, #19
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f002 ff04 	bl	8007df8 <VL53L0X_RdByte>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
 8004ff6:	f003 0207 	and.w	r2, r3, #7
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	f003 0318 	and.w	r3, r3, #24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005008:	23fa      	movs	r3, #250	@ 0xfa
 800500a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800500c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005024:	2300      	movs	r3, #0
 8005026:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fa03 	bl	8005438 <VL53L0X_perform_ref_spad_management>
 8005032:	4603      	mov	r3, r0
 8005034:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005050:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005054:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800505a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	461a      	mov	r2, r3
 8005062:	2128      	movs	r1, #40	@ 0x28
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f002 ff4d 	bl	8007f04 <VL53L0X_RdWord>
 800506a:	4603      	mov	r3, r0
 800506c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800506e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11e      	bne.n	80050b4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005076:	893b      	ldrh	r3, [r7, #8]
 8005078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507c:	b29b      	uxth	r3, r3
 800507e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005080:	893b      	ldrh	r3, [r7, #8]
 8005082:	461a      	mov	r2, r3
 8005084:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005088:	429a      	cmp	r2, r3
 800508a:	dd0b      	ble.n	80050a4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800508c:	893a      	ldrh	r2, [r7, #8]
 800508e:	897b      	ldrh	r3, [r7, #10]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	b29b      	uxth	r3, r3
 8005094:	b21b      	sxth	r3, r3
 8005096:	461a      	mov	r2, r3
					* 250;
 8005098:	23fa      	movs	r3, #250	@ 0xfa
 800509a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e007      	b.n	80050b4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80050a4:	893b      	ldrh	r3, [r7, #8]
 80050a6:	b21b      	sxth	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	23fa      	movs	r3, #250	@ 0xfa
 80050ac:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80050b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b08b      	sub	sp, #44	@ 0x2c
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80050ce:	2308      	movs	r3, #8
 80050d0:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295
 80050dc:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	fb01 f202 	mul.w	r2, r1, r2
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050fe:	e030      	b.n	8005162 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	4413      	add	r3, r2
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	429a      	cmp	r2, r3
 8005114:	d11e      	bne.n	8005154 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005116:	7ffa      	ldrb	r2, [r7, #31]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	fa42 f303 	asr.w	r3, r2, r3
 800511e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005124:	e016      	b.n	8005154 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <get_next_good_spad+0x88>
				success = 1;
 8005130:	2301      	movs	r3, #1
 8005132:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	fb03 f202 	mul.w	r2, r3, r2
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	4413      	add	r3, r2
 8005140:	461a      	mov	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	601a      	str	r2, [r3, #0]
				break;
 8005146:	e009      	b.n	800515c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005148:	7ffb      	ldrb	r3, [r7, #31]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	3301      	adds	r3, #1
 8005152:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	429a      	cmp	r2, r3
 800515a:	d3e4      	bcc.n	8005126 <get_next_good_spad+0x66>
				coarseIndex++) {
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	3301      	adds	r3, #1
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	d202      	bcs.n	8005170 <get_next_good_spad+0xb0>
 800516a:	7fbb      	ldrb	r3, [r7, #30]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0c7      	beq.n	8005100 <get_next_good_spad+0x40>
		}
	}
}
 8005170:	bf00      	nop
 8005172:	372c      	adds	r7, #44	@ 0x2c
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800518e:	4a07      	ldr	r2, [pc, #28]	@ (80051ac <is_aperture+0x30>)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <is_aperture+0x22>
		isAperture = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	200002bc 	.word	0x200002bc

080051b0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	@ 0x24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80051bc:	2300      	movs	r3, #0
 80051be:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80051c0:	2308      	movs	r3, #8
 80051c2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80051d6:	69b9      	ldr	r1, [r7, #24]
 80051d8:	fb01 f202 	mul.w	r2, r1, r2
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d302      	bcc.n	80051ee <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80051e8:	23ce      	movs	r3, #206	@ 0xce
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e010      	b.n	8005210 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	4413      	add	r3, r2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b25a      	sxtb	r2, r3
 80051f8:	2101      	movs	r1, #1
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	b25b      	sxtb	r3, r3
 8005202:	4313      	orrs	r3, r2
 8005204:	b259      	sxtb	r1, r3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4413      	add	r3, r2
 800520c:	b2ca      	uxtb	r2, r1
 800520e:	701a      	strb	r2, [r3, #0]

	return status;
 8005210:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3724      	adds	r7, #36	@ 0x24
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800522a:	2306      	movs	r3, #6
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	21b0      	movs	r1, #176	@ 0xb0
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f002 fe0b 	bl	8007e4c <VL53L0X_WriteMulti>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005250:	2306      	movs	r3, #6
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	21b0      	movs	r1, #176	@ 0xb0
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f002 fe28 	bl	8007eac <VL53L0X_ReadMulti>
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08c      	sub	sp, #48	@ 0x30
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	460b      	mov	r3, r1
 800527a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005284:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005288:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800528a:	2300      	movs	r3, #0
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800528e:	e02b      	b.n	80052e8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005290:	f107 031c 	add.w	r3, r7, #28
 8005294:	6a3a      	ldr	r2, [r7, #32]
 8005296:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff11 	bl	80050c0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d103      	bne.n	80052ae <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80052a6:	23ce      	movs	r3, #206	@ 0xce
 80052a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80052ac:	e020      	b.n	80052f0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b4:	4413      	add	r3, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ff60 	bl	800517c <is_aperture>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	7afb      	ldrb	r3, [r7, #11]
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80052c6:	23ce      	movs	r3, #206	@ 0xce
 80052c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80052cc:	e010      	b.n	80052f0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f7ff ff6a 	bl	80051b0 <enable_spad_bit>
		currentSpad++;
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	3301      	adds	r3, #1
 80052e0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	3301      	adds	r3, #1
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d3cf      	bcc.n	8005290 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80052f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f2:	6a3a      	ldr	r2, [r7, #32]
 80052f4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80052f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff ff8d 	bl	8005220 <set_ref_spad_map>
 8005306:	4603      	mov	r3, r0
 8005308:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800530c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005310:	2b00      	cmp	r3, #0
 8005312:	d121      	bne.n	8005358 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005314:	f107 0314 	add.w	r3, r7, #20
 8005318:	4619      	mov	r1, r3
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ff93 	bl	8005246 <get_ref_spad_map>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800532a:	e011      	b.n	8005350 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	4413      	add	r3, r2
 8005332:	781a      	ldrb	r2, [r3, #0]
 8005334:	f107 0114 	add.w	r1, r7, #20
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	440b      	add	r3, r1
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d003      	beq.n	800534a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005342:	23ce      	movs	r3, #206	@ 0xce
 8005344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8005348:	e006      	b.n	8005358 <enable_ref_spads+0xec>
			}
			i++;
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	3301      	adds	r3, #1
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8005350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005354:	429a      	cmp	r2, r3
 8005356:	d3e9      	bcc.n	800532c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005358:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800535c:	4618      	mov	r0, r3
 800535e:	3730      	adds	r7, #48	@ 0x30
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005380:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005384:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800538c:	22c0      	movs	r2, #192	@ 0xc0
 800538e:	2101      	movs	r1, #1
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f002 fe29 	bl	8007fe8 <VL53L0X_WrByte>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800539c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d108      	bne.n	80053b6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80053a4:	f107 0308 	add.w	r3, r7, #8
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fc4c 	bl	8004c48 <VL53L0X_PerformSingleRangingMeasurement>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80053b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80053be:	2201      	movs	r2, #1
 80053c0:	21ff      	movs	r1, #255	@ 0xff
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f002 fe10 	bl	8007fe8 <VL53L0X_WrByte>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 80053ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	21b6      	movs	r1, #182	@ 0xb6
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f002 fd92 	bl	8007f04 <VL53L0X_RdWord>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80053e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d107      	bne.n	80053fe <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80053ee:	2200      	movs	r2, #0
 80053f0:	21ff      	movs	r1, #255	@ 0xff
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 fdf8 	bl	8007fe8 <VL53L0X_WrByte>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80053fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005402:	2b00      	cmp	r3, #0
 8005404:	d112      	bne.n	800542c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005406:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800540a:	461a      	mov	r2, r3
 800540c:	2101      	movs	r1, #1
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f002 fdea 	bl	8007fe8 <VL53L0X_WrByte>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800541a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005428:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800542c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	@ 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b09d      	sub	sp, #116	@ 0x74
 800543c:	af06      	add	r7, sp, #24
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005444:	2300      	movs	r3, #0
 8005446:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800544a:	23b4      	movs	r3, #180	@ 0xb4
 800544c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8005450:	2303      	movs	r3, #3
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8005454:	232c      	movs	r3, #44	@ 0x2c
 8005456:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005464:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005468:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8005472:	2306      	movs	r3, #6
 8005474:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 800549c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800549e:	2300      	movs	r3, #0
 80054a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a2:	e009      	b.n	80054b8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80054b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054b4:	3301      	adds	r3, #1
 80054b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054bc:	429a      	cmp	r2, r3
 80054be:	d3f1      	bcc.n	80054a4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80054c0:	2201      	movs	r2, #1
 80054c2:	21ff      	movs	r1, #255	@ 0xff
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f002 fd8f 	bl	8007fe8 <VL53L0X_WrByte>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80054d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80054d8:	2200      	movs	r2, #0
 80054da:	214f      	movs	r1, #79	@ 0x4f
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f002 fd83 	bl	8007fe8 <VL53L0X_WrByte>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80054e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d107      	bne.n	8005500 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80054f0:	222c      	movs	r2, #44	@ 0x2c
 80054f2:	214e      	movs	r1, #78	@ 0x4e
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f002 fd77 	bl	8007fe8 <VL53L0X_WrByte>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005500:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005504:	2b00      	cmp	r3, #0
 8005506:	d107      	bne.n	8005518 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005508:	2200      	movs	r2, #0
 800550a:	21ff      	movs	r1, #255	@ 0xff
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f002 fd6b 	bl	8007fe8 <VL53L0X_WrByte>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005518:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005520:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005524:	461a      	mov	r2, r3
 8005526:	21b6      	movs	r1, #182	@ 0xb6
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f002 fd5d 	bl	8007fe8 <VL53L0X_WrByte>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005534:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800553c:	2200      	movs	r2, #0
 800553e:	2180      	movs	r1, #128	@ 0x80
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f002 fd51 	bl	8007fe8 <VL53L0X_WrByte>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800554c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005554:	f107 0210 	add.w	r2, r7, #16
 8005558:	f107 0111 	add.w	r1, r7, #17
 800555c:	2300      	movs	r3, #0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fbbb 	bl	8005cda <VL53L0X_perform_ref_calibration>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800556a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800556e:	2b00      	cmp	r3, #0
 8005570:	d121      	bne.n	80055b6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8005576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005578:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800557e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005580:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800558e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005592:	f107 0218 	add.w	r2, r7, #24
 8005596:	9204      	str	r2, [sp, #16]
 8005598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800559a:	9203      	str	r2, [sp, #12]
 800559c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800559e:	9202      	str	r2, [sp, #8]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4623      	mov	r3, r4
 80055a8:	4602      	mov	r2, r0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fe5e 	bl	800526c <enable_ref_spads>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d174      	bne.n	80056a8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 80055c2:	f107 0312 	add.w	r3, r7, #18
 80055c6:	4619      	mov	r1, r3
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff fecb 	bl	8005364 <perform_ref_signal_measurement>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80055d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d161      	bne.n	80056a0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80055dc:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80055de:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d25d      	bcs.n	80056a0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e8:	e009      	b.n	80055fe <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80055f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055fa:	3301      	adds	r3, #1
 80055fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	429a      	cmp	r2, r3
 8005604:	d3f1      	bcc.n	80055ea <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005606:	e002      	b.n	800560e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560a:	3301      	adds	r3, #1
 800560c:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800560e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8005612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005614:	4413      	add	r3, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fdb0 	bl	800517c <is_aperture>
 800561c:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800561e:	2b00      	cmp	r3, #0
 8005620:	d103      	bne.n	800562a <VL53L0X_perform_ref_spad_management+0x1f2>
 8005622:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	429a      	cmp	r2, r3
 8005628:	d3ee      	bcc.n	8005608 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800562e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005630:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800563e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005642:	f107 0218 	add.w	r2, r7, #24
 8005646:	9204      	str	r2, [sp, #16]
 8005648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800564a:	9203      	str	r2, [sp, #12]
 800564c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800564e:	9202      	str	r2, [sp, #8]
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	4623      	mov	r3, r4
 8005658:	4602      	mov	r2, r0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fe06 	bl	800526c <enable_ref_spads>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005666:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800566a:	2b00      	cmp	r3, #0
 800566c:	d11b      	bne.n	80056a6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005672:	f107 0312 	add.w	r3, r7, #18
 8005676:	4619      	mov	r1, r3
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff fe73 	bl	8005364 <perform_ref_signal_measurement>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005684:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10c      	bne.n	80056a6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800568c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800568e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005690:	429a      	cmp	r2, r3
 8005692:	d208      	bcs.n	80056a6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 800569a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800569e:	e002      	b.n	80056a6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a4:	e000      	b.n	80056a8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80056a6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80056a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f040 80af 	bne.w	8005810 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80056b2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80056b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80056b6:	429a      	cmp	r2, r3
 80056b8:	f240 80aa 	bls.w	8005810 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80056bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 80056c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 80056cc:	f107 031c 	add.w	r3, r7, #28
 80056d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056d2:	4618      	mov	r0, r3
 80056d4:	f002 fd78 	bl	80081c8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80056d8:	8a7b      	ldrh	r3, [r7, #18]
 80056da:	461a      	mov	r2, r3
 80056dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bfb8      	it	lt
 80056e4:	425b      	neglt	r3, r3
 80056e6:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 80056ee:	e086      	b.n	80057fe <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 80056f6:	f107 0314 	add.w	r3, r7, #20
 80056fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056fe:	f7ff fcdf 	bl	80050c0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d103      	bne.n	8005712 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800570a:	23ce      	movs	r3, #206	@ 0xce
 800570c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8005710:	e07e      	b.n	8005810 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005714:	3301      	adds	r3, #1
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005718:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fd2b 	bl	800517c <is_aperture>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005730:	23ce      	movs	r3, #206	@ 0xce
 8005732:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8005736:	e06b      	b.n	8005810 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 8005742:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fd32 	bl	80051b0 <enable_spad_bit>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005752:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10c      	bne.n	8005774 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800575a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800575c:	3301      	adds	r3, #1
 800575e:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 8005766:	4619      	mov	r1, r3
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff fd59 	bl	8005220 <set_ref_spad_map>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005774:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005778:	2b00      	cmp	r3, #0
 800577a:	d146      	bne.n	800580a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800577c:	f107 0312 	add.w	r3, r7, #18
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fdee 	bl	8005364 <perform_ref_signal_measurement>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800578e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005792:	2b00      	cmp	r3, #0
 8005794:	d13b      	bne.n	800580e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005796:	8a7b      	ldrh	r3, [r7, #18]
 8005798:	461a      	mov	r2, r3
 800579a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfb8      	it	lt
 80057a2:	425b      	neglt	r3, r3
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 80057a6:	8a7b      	ldrh	r3, [r7, #18]
 80057a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d21c      	bcs.n	80057e8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80057ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d914      	bls.n	80057e0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80057b6:	f107 031c 	add.w	r3, r7, #28
 80057ba:	4619      	mov	r1, r3
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff fd2f 	bl	8005220 <set_ref_spad_map>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 80057ce:	f107 011c 	add.w	r1, r7, #28
 80057d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d4:	4618      	mov	r0, r3
 80057d6:	f002 fcf7 	bl	80081c8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80057da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057dc:	3b01      	subs	r3, #1
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e00a      	b.n	80057fe <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 80057f2:	f107 031c 	add.w	r3, r7, #28
 80057f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f8:	4618      	mov	r0, r3
 80057fa:	f002 fce5 	bl	80081c8 <memcpy>
		while (!complete) {
 80057fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005802:	2b00      	cmp	r3, #0
 8005804:	f43f af74 	beq.w	80056f0 <VL53L0X_perform_ref_spad_management+0x2b8>
 8005808:	e002      	b.n	8005810 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800580e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005810:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005814:	2b00      	cmp	r3, #0
 8005816:	d115      	bne.n	8005844 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800581c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8005824:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	781a      	ldrb	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005844:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8005848:	4618      	mov	r0, r3
 800584a:	375c      	adds	r7, #92	@ 0x5c
 800584c:	46bd      	mov	sp, r7
 800584e:	bd90      	pop	{r4, r7, pc}

08005850 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b093      	sub	sp, #76	@ 0x4c
 8005854:	af06      	add	r7, sp, #24
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800585e:	2300      	movs	r3, #0
 8005860:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8005868:	23b4      	movs	r3, #180	@ 0xb4
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800586e:	2306      	movs	r3, #6
 8005870:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005872:	232c      	movs	r3, #44	@ 0x2c
 8005874:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005876:	2201      	movs	r2, #1
 8005878:	21ff      	movs	r1, #255	@ 0xff
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f002 fbb4 	bl	8007fe8 <VL53L0X_WrByte>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005886:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800588e:	2200      	movs	r2, #0
 8005890:	214f      	movs	r1, #79	@ 0x4f
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f002 fba8 	bl	8007fe8 <VL53L0X_WrByte>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800589e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80058a6:	222c      	movs	r2, #44	@ 0x2c
 80058a8:	214e      	movs	r1, #78	@ 0x4e
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f002 fb9c 	bl	8007fe8 <VL53L0X_WrByte>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80058b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058be:	2200      	movs	r2, #0
 80058c0:	21ff      	movs	r1, #255	@ 0xff
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f002 fb90 	bl	8007fe8 <VL53L0X_WrByte>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80058ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80058d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058da:	461a      	mov	r2, r3
 80058dc:	21b6      	movs	r1, #182	@ 0xb6
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f002 fb82 	bl	8007fe8 <VL53L0X_WrByte>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80058ea:	2300      	movs	r3, #0
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ee:	e009      	b.n	8005904 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	3301      	adds	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
 8005904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	d3f1      	bcc.n	80058f0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d011      	beq.n	8005936 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005912:	e002      	b.n	800591a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	3301      	adds	r3, #1
 8005918:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800591a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	4413      	add	r3, r2
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fc2a 	bl	800517c <is_aperture>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <VL53L0X_set_reference_spads+0xe6>
 800592e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	429a      	cmp	r2, r3
 8005934:	d3ee      	bcc.n	8005914 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 8005942:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005946:	79f9      	ldrb	r1, [r7, #7]
 8005948:	f107 0214 	add.w	r2, r7, #20
 800594c:	9204      	str	r2, [sp, #16]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	9203      	str	r2, [sp, #12]
 8005952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005954:	9202      	str	r2, [sp, #8]
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4623      	mov	r3, r4
 800595e:	4602      	mov	r2, r0
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff fc83 	bl	800526c <enable_ref_spads>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800596c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	79fa      	ldrb	r2, [r7, #7]
 800598a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800598e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005992:	4618      	mov	r0, r3
 8005994:	3734      	adds	r7, #52	@ 0x34
 8005996:	46bd      	mov	sp, r7
 8005998:	bd90      	pop	{r4, r7, pc}

0800599a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80059aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	2100      	movs	r1, #0
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f002 fb12 	bl	8007fe8 <VL53L0X_WrByte>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80059c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f9bf 	bl	8005d54 <VL53L0X_measurement_poll_for_completion>
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80059da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d105      	bne.n	80059ee <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80059e2:	2100      	movs	r1, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff fab5 	bl	8004f54 <VL53L0X_ClearInterruptMask>
 80059ea:	4603      	mov	r3, r0
 80059ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80059ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80059f6:	2200      	movs	r2, #0
 80059f8:	2100      	movs	r1, #0
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f002 faf4 	bl	8007fe8 <VL53L0X_WrByte>
 8005a00:	4603      	mov	r3, r0
 8005a02:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	70fb      	strb	r3, [r7, #3]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70bb      	strb	r3, [r7, #2]
 8005a26:	4613      	mov	r3, r2
 8005a28:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a32:	2201      	movs	r2, #1
 8005a34:	21ff      	movs	r1, #255	@ 0xff
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f002 fad6 	bl	8007fe8 <VL53L0X_WrByte>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	461a      	mov	r2, r3
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 facc 	bl	8007fe8 <VL53L0X_WrByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	21ff      	movs	r1, #255	@ 0xff
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f002 fac2 	bl	8007fe8 <VL53L0X_WrByte>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01e      	beq.n	8005ab2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005a74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	21cb      	movs	r1, #203	@ 0xcb
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f002 f9b9 	bl	8007df8 <VL53L0X_RdByte>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005a90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d02a      	beq.n	8005aee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005a98:	f107 030e 	add.w	r3, r7, #14
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	21ee      	movs	r1, #238	@ 0xee
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f002 f9a9 	bl	8007df8 <VL53L0X_RdByte>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	73fb      	strb	r3, [r7, #15]
 8005ab0:	e01d      	b.n	8005aee <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005aba:	78bb      	ldrb	r3, [r7, #2]
 8005abc:	461a      	mov	r2, r3
 8005abe:	21cb      	movs	r1, #203	@ 0xcb
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f002 fa91 	bl	8007fe8 <VL53L0X_WrByte>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	461a      	mov	r2, r3
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005ad8:	787b      	ldrb	r3, [r7, #1]
 8005ada:	2280      	movs	r2, #128	@ 0x80
 8005adc:	21ee      	movs	r1, #238	@ 0xee
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f002 fad0 	bl	8008084 <VL53L0X_UpdateByte>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005aee:	2201      	movs	r2, #1
 8005af0:	21ff      	movs	r1, #255	@ 0xff
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f002 fa78 	bl	8007fe8 <VL53L0X_WrByte>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461a      	mov	r2, r3
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005b02:	2201      	movs	r2, #1
 8005b04:	2100      	movs	r1, #0
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f002 fa6e 	bl	8007fe8 <VL53L0X_WrByte>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b16:	2200      	movs	r2, #0
 8005b18:	21ff      	movs	r1, #255	@ 0xff
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f002 fa64 	bl	8007fe8 <VL53L0X_WrByte>
 8005b20:	4603      	mov	r3, r0
 8005b22:	461a      	mov	r2, r3
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	f023 0310 	bic.w	r3, r3, #16
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	701a      	strb	r2, [r3, #0]

	return Status;
 8005b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	@ 0x28
 8005b46:	af04      	add	r7, sp, #16
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	461a      	mov	r2, r3
 8005b50:	460b      	mov	r3, r1
 8005b52:	71fb      	strb	r3, [r7, #7]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005b6c:	79bb      	ldrb	r3, [r7, #6]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005b78:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f002 fa32 	bl	8007fe8 <VL53L0X_WrByte>
 8005b84:	4603      	mov	r3, r0
 8005b86:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005b90:	2140      	movs	r1, #64	@ 0x40
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff ff01 	bl	800599a <VL53L0X_perform_single_ref_calibration>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d115      	bne.n	8005bd0 <VL53L0X_perform_vhv_calibration+0x8e>
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d112      	bne.n	8005bd0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005baa:	7d39      	ldrb	r1, [r7, #20]
 8005bac:	7d7a      	ldrb	r2, [r7, #21]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9303      	str	r3, [sp, #12]
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	9302      	str	r3, [sp, #8]
 8005bb6:	f107 0313 	add.w	r3, r7, #19
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff ff23 	bl	8005a10 <VL53L0X_ref_calibration_io>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	75fb      	strb	r3, [r7, #23]
 8005bce:	e002      	b.n	8005bd6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d112      	bne.n	8005c04 <VL53L0X_perform_vhv_calibration+0xc2>
 8005bde:	79bb      	ldrb	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00f      	beq.n	8005c04 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005be4:	7dbb      	ldrb	r3, [r7, #22]
 8005be6:	461a      	mov	r2, r3
 8005be8:	2101      	movs	r1, #1
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f002 f9fc 	bl	8007fe8 <VL53L0X_WrByte>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	7dba      	ldrb	r2, [r7, #22]
 8005c00:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	@ 0x28
 8005c14:	af04      	add	r7, sp, #16
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	460b      	mov	r3, r1
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	4613      	mov	r3, r2
 8005c24:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005c36:	79bb      	ldrb	r3, [r7, #6]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005c42:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005c44:	2202      	movs	r2, #2
 8005c46:	2101      	movs	r1, #1
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f002 f9cd 	bl	8007fe8 <VL53L0X_WrByte>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fe9c 	bl	800599a <VL53L0X_perform_single_ref_calibration>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d115      	bne.n	8005c9a <VL53L0X_perform_phase_calibration+0x8a>
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d112      	bne.n	8005c9a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005c74:	7d39      	ldrb	r1, [r7, #20]
 8005c76:	7d7a      	ldrb	r2, [r7, #21]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	9303      	str	r3, [sp, #12]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	f107 0313 	add.w	r3, r7, #19
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff febe 	bl	8005a10 <VL53L0X_ref_calibration_io>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]
 8005c98:	e002      	b.n	8005ca0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d112      	bne.n	8005cce <VL53L0X_perform_phase_calibration+0xbe>
 8005ca8:	79bb      	ldrb	r3, [r7, #6]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00f      	beq.n	8005cce <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005cae:	7dbb      	ldrb	r3, [r7, #22]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f002 f997 	bl	8007fe8 <VL53L0X_WrByte>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d103      	bne.n	8005cce <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	7dba      	ldrb	r2, [r7, #22]
 8005cca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005cf6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff ff1f 	bl	8005b42 <VL53L0X_perform_vhv_calibration>
 8005d04:	4603      	mov	r3, r0
 8005d06:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	2300      	movs	r3, #0
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff ff7a 	bl	8005c10 <VL53L0X_perform_phase_calibration>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10f      	bne.n	8005d48 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d28:	7dbb      	ldrb	r3, [r7, #22]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f002 f95a 	bl	8007fe8 <VL53L0X_WrByte>
 8005d34:	4603      	mov	r3, r0
 8005d36:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	7dba      	ldrb	r2, [r7, #22]
 8005d44:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005d68:	f107 030f 	add.w	r3, r7, #15
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fe fe0e 	bl	8004990 <VL53L0X_GetMeasurementDataReady>
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10f      	bne.n	8005da0 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d00e      	beq.n	8005da4 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d90:	d902      	bls.n	8005d98 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005d92:	23f9      	movs	r3, #249	@ 0xf9
 8005d94:	75fb      	strb	r3, [r7, #23]
			break;
 8005d96:	e006      	b.n	8005da6 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f002 f9a7 	bl	80080ec <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005d9e:	e7e3      	b.n	8005d68 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005da0:	bf00      	nop
 8005da2:	e000      	b.n	8005da6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8005da4:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	4603      	mov	r3, r0
 8005dba:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005de4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005de8:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005dea:	e002      	b.n	8005df2 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d8f8      	bhi.n	8005dec <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005dfa:	e017      	b.n	8005e2c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4413      	add	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d30b      	bcc.n	8005e20 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e002      	b.n	8005e26 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	089b      	lsrs	r3, r3, #2
 8005e2a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e4      	bne.n	8005dfc <VL53L0X_isqrt+0x24>
	}

	return res;
 8005e32:	68fb      	ldr	r3, [r7, #12]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2183      	movs	r1, #131	@ 0x83
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f002 f8c9 	bl	8007fe8 <VL53L0X_WrByte>
 8005e56:	4603      	mov	r3, r0
 8005e58:	461a      	mov	r2, r3
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d11c      	bne.n	8005ea2 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005e6c:	f107 030f 	add.w	r3, r7, #15
 8005e70:	461a      	mov	r2, r3
 8005e72:	2183      	movs	r1, #131	@ 0x83
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 ffbf 	bl	8007df8 <VL53L0X_RdByte>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <VL53L0X_device_read_strobe+0x58>
 8005e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e96:	d9e9      	bls.n	8005e6c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e9c:	d901      	bls.n	8005ea2 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005e9e:	23f9      	movs	r3, #249	@ 0xf9
 8005ea0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	2183      	movs	r1, #131	@ 0x83
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f002 f89e 	bl	8007fe8 <VL53L0X_WrByte>
 8005eac:	4603      	mov	r3, r0
 8005eae:	461a      	mov	r2, r3
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b098      	sub	sp, #96	@ 0x60
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005ef2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8005ef6:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8005f0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005f0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f12:	2b07      	cmp	r3, #7
 8005f14:	f000 8408 	beq.w	8006728 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2180      	movs	r1, #128	@ 0x80
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f002 f863 	bl	8007fe8 <VL53L0X_WrByte>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f30:	2201      	movs	r2, #1
 8005f32:	21ff      	movs	r1, #255	@ 0xff
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f002 f857 	bl	8007fe8 <VL53L0X_WrByte>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f002 f84b 	bl	8007fe8 <VL53L0X_WrByte>
 8005f52:	4603      	mov	r3, r0
 8005f54:	461a      	mov	r2, r3
 8005f56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005f60:	2206      	movs	r2, #6
 8005f62:	21ff      	movs	r1, #255	@ 0xff
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f002 f83f 	bl	8007fe8 <VL53L0X_WrByte>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005f78:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2183      	movs	r1, #131	@ 0x83
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 ff39 	bl	8007df8 <VL53L0X_RdByte>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005f94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f98:	f043 0304 	orr.w	r3, r3, #4
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2183      	movs	r1, #131	@ 0x83
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f002 f820 	bl	8007fe8 <VL53L0X_WrByte>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	461a      	mov	r2, r3
 8005fac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005fb6:	2207      	movs	r2, #7
 8005fb8:	21ff      	movs	r1, #255	@ 0xff
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f002 f814 	bl	8007fe8 <VL53L0X_WrByte>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005fce:	2201      	movs	r2, #1
 8005fd0:	2181      	movs	r1, #129	@ 0x81
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f002 f808 	bl	8007fe8 <VL53L0X_WrByte>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f002 f880 	bl	80080ec <VL53L0X_PollingDelay>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	2180      	movs	r1, #128	@ 0x80
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 fff2 	bl	8007fe8 <VL53L0X_WrByte>
 8006004:	4603      	mov	r3, r0
 8006006:	461a      	mov	r2, r3
 8006008:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800600c:	4313      	orrs	r3, r2
 800600e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8098 	beq.w	800614e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800601e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006022:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006026:	2b00      	cmp	r3, #0
 8006028:	f040 8091 	bne.w	800614e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800602c:	226b      	movs	r2, #107	@ 0x6b
 800602e:	2194      	movs	r1, #148	@ 0x94
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 ffd9 	bl	8007fe8 <VL53L0X_WrByte>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800603e:	4313      	orrs	r3, r2
 8006040:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fefb 	bl	8005e40 <VL53L0X_device_read_strobe>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006052:	4313      	orrs	r3, r2
 8006054:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006058:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800605c:	461a      	mov	r2, r3
 800605e:	2190      	movs	r1, #144	@ 0x90
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 ff85 	bl	8007f70 <VL53L0X_RdDWord>
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800606e:	4313      	orrs	r3, r2
 8006070:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800607e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	0bdb      	lsrs	r3, r3, #15
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006090:	2224      	movs	r2, #36	@ 0x24
 8006092:	2194      	movs	r1, #148	@ 0x94
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 ffa7 	bl	8007fe8 <VL53L0X_WrByte>
 800609a:	4603      	mov	r3, r0
 800609c:	461a      	mov	r2, r3
 800609e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff fec9 	bl	8005e40 <VL53L0X_device_read_strobe>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80060c0:	461a      	mov	r2, r3
 80060c2:	2190      	movs	r1, #144	@ 0x90
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 ff53 	bl	8007f70 <VL53L0X_RdDWord>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	0e1b      	lsrs	r3, r3, #24
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80060f6:	2225      	movs	r2, #37	@ 0x25
 80060f8:	2194      	movs	r1, #148	@ 0x94
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 ff74 	bl	8007fe8 <VL53L0X_WrByte>
 8006100:	4603      	mov	r3, r0
 8006102:	461a      	mov	r2, r3
 8006104:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006108:	4313      	orrs	r3, r2
 800610a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fe96 	bl	8005e40 <VL53L0X_device_read_strobe>
 8006114:	4603      	mov	r3, r0
 8006116:	461a      	mov	r2, r3
 8006118:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800611c:	4313      	orrs	r3, r2
 800611e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006122:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006126:	461a      	mov	r2, r3
 8006128:	2190      	movs	r1, #144	@ 0x90
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 ff20 	bl	8007f70 <VL53L0X_RdDWord>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006138:	4313      	orrs	r3, r2
 800613a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	0e1b      	lsrs	r3, r3, #24
 8006142:	b2db      	uxtb	r3, r3
 8006144:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	b2db      	uxtb	r3, r3
 800614c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8189 	beq.w	800646c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800615a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800615e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 8182 	bne.w	800646c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006168:	2202      	movs	r2, #2
 800616a:	2194      	movs	r1, #148	@ 0x94
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 ff3b 	bl	8007fe8 <VL53L0X_WrByte>
 8006172:	4603      	mov	r3, r0
 8006174:	461a      	mov	r2, r3
 8006176:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800617a:	4313      	orrs	r3, r2
 800617c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fe5d 	bl	8005e40 <VL53L0X_device_read_strobe>
 8006186:	4603      	mov	r3, r0
 8006188:	461a      	mov	r2, r3
 800618a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800618e:	4313      	orrs	r3, r2
 8006190:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006194:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8006198:	461a      	mov	r2, r3
 800619a:	2190      	movs	r1, #144	@ 0x90
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 fe2b 	bl	8007df8 <VL53L0X_RdByte>
 80061a2:	4603      	mov	r3, r0
 80061a4:	461a      	mov	r2, r3
 80061a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80061b0:	227b      	movs	r2, #123	@ 0x7b
 80061b2:	2194      	movs	r1, #148	@ 0x94
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 ff17 	bl	8007fe8 <VL53L0X_WrByte>
 80061ba:	4603      	mov	r3, r0
 80061bc:	461a      	mov	r2, r3
 80061be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fe39 	bl	8005e40 <VL53L0X_device_read_strobe>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80061dc:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80061e0:	461a      	mov	r2, r3
 80061e2:	2190      	movs	r1, #144	@ 0x90
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fe07 	bl	8007df8 <VL53L0X_RdByte>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80061f8:	2277      	movs	r2, #119	@ 0x77
 80061fa:	2194      	movs	r1, #148	@ 0x94
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fef3 	bl	8007fe8 <VL53L0X_WrByte>
 8006202:	4603      	mov	r3, r0
 8006204:	461a      	mov	r2, r3
 8006206:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800620a:	4313      	orrs	r3, r2
 800620c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fe15 	bl	8005e40 <VL53L0X_device_read_strobe>
 8006216:	4603      	mov	r3, r0
 8006218:	461a      	mov	r2, r3
 800621a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800621e:	4313      	orrs	r3, r2
 8006220:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006224:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006228:	461a      	mov	r2, r3
 800622a:	2190      	movs	r1, #144	@ 0x90
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fe9f 	bl	8007f70 <VL53L0X_RdDWord>
 8006232:	4603      	mov	r3, r0
 8006234:	461a      	mov	r2, r3
 8006236:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800623a:	4313      	orrs	r3, r2
 800623c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	0e5b      	lsrs	r3, r3, #25
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800624a:	b2db      	uxtb	r3, r3
 800624c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	0c9b      	lsrs	r3, r3, #18
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006258:	b2db      	uxtb	r3, r3
 800625a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	0adb      	lsrs	r3, r3, #11
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006266:	b2db      	uxtb	r3, r3
 8006268:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	091b      	lsrs	r3, r3, #4
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006274:	b2db      	uxtb	r3, r3
 8006276:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	b2db      	uxtb	r3, r3
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800628a:	2278      	movs	r2, #120	@ 0x78
 800628c:	2194      	movs	r1, #148	@ 0x94
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 feaa 	bl	8007fe8 <VL53L0X_WrByte>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800629c:	4313      	orrs	r3, r2
 800629e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff fdcc 	bl	8005e40 <VL53L0X_device_read_strobe>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461a      	mov	r2, r3
 80062ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80062b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80062ba:	461a      	mov	r2, r3
 80062bc:	2190      	movs	r1, #144	@ 0x90
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 fe56 	bl	8007f70 <VL53L0X_RdDWord>
 80062c4:	4603      	mov	r3, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	0f5b      	lsrs	r3, r3, #29
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062dc:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80062de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062e2:	4413      	add	r3, r2
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ea:	0d9b      	lsrs	r3, r3, #22
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	0bdb      	lsrs	r3, r3, #15
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006300:	b2db      	uxtb	r3, r3
 8006302:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630e:	b2db      	uxtb	r3, r3
 8006310:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	085b      	lsrs	r3, r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631c:	b2db      	uxtb	r3, r3
 800631e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006322:	b2db      	uxtb	r3, r3
 8006324:	019b      	lsls	r3, r3, #6
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006332:	2279      	movs	r2, #121	@ 0x79
 8006334:	2194      	movs	r1, #148	@ 0x94
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 fe56 	bl	8007fe8 <VL53L0X_WrByte>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006344:	4313      	orrs	r3, r2
 8006346:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fd78 	bl	8005e40 <VL53L0X_device_read_strobe>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006358:	4313      	orrs	r3, r2
 800635a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800635e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006362:	461a      	mov	r2, r3
 8006364:	2190      	movs	r1, #144	@ 0x90
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fe02 	bl	8007f70 <VL53L0X_RdDWord>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006374:	4313      	orrs	r3, r2
 8006376:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	0e9b      	lsrs	r3, r3, #26
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006384:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006386:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800638a:	4413      	add	r3, r2
 800638c:	b2db      	uxtb	r3, r3
 800638e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	0cdb      	lsrs	r3, r3, #19
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800639a:	b2db      	uxtb	r3, r3
 800639c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	0b1b      	lsrs	r3, r3, #12
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80063cc:	227a      	movs	r2, #122	@ 0x7a
 80063ce:	2194      	movs	r1, #148	@ 0x94
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 fe09 	bl	8007fe8 <VL53L0X_WrByte>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063de:	4313      	orrs	r3, r2
 80063e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff fd2b 	bl	8005e40 <VL53L0X_device_read_strobe>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063fc:	461a      	mov	r2, r3
 80063fe:	2190      	movs	r1, #144	@ 0x90
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fdb5 	bl	8007f70 <VL53L0X_RdDWord>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800640e:	4313      	orrs	r3, r2
 8006410:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	0f9b      	lsrs	r3, r3, #30
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800641e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006420:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006424:	4413      	add	r3, r2
 8006426:	b2db      	uxtb	r3, r3
 8006428:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	0ddb      	lsrs	r3, r3, #23
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006434:	b2db      	uxtb	r3, r3
 8006436:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006442:	b2db      	uxtb	r3, r3
 8006444:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	0a5b      	lsrs	r3, r3, #9
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8006466:	2300      	movs	r3, #0
 8006468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80f1 	beq.w	800665a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006478:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800647c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 80ea 	bne.w	800665a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006486:	227b      	movs	r2, #123	@ 0x7b
 8006488:	2194      	movs	r1, #148	@ 0x94
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fdac 	bl	8007fe8 <VL53L0X_WrByte>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006498:	4313      	orrs	r3, r2
 800649a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fcce 	bl	8005e40 <VL53L0X_device_read_strobe>
 80064a4:	4603      	mov	r3, r0
 80064a6:	461a      	mov	r2, r3
 80064a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80064b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80064b6:	461a      	mov	r2, r3
 80064b8:	2190      	movs	r1, #144	@ 0x90
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fd58 	bl	8007f70 <VL53L0X_RdDWord>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80064ce:	227c      	movs	r2, #124	@ 0x7c
 80064d0:	2194      	movs	r1, #148	@ 0x94
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 fd88 	bl	8007fe8 <VL53L0X_WrByte>
 80064d8:	4603      	mov	r3, r0
 80064da:	461a      	mov	r2, r3
 80064dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fcaa 	bl	8005e40 <VL53L0X_device_read_strobe>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80064fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064fe:	461a      	mov	r2, r3
 8006500:	2190      	movs	r1, #144	@ 0x90
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fd34 	bl	8007f70 <VL53L0X_RdDWord>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006510:	4313      	orrs	r3, r2
 8006512:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006516:	2273      	movs	r2, #115	@ 0x73
 8006518:	2194      	movs	r1, #148	@ 0x94
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 fd64 	bl	8007fe8 <VL53L0X_WrByte>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006528:	4313      	orrs	r3, r2
 800652a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fc86 	bl	8005e40 <VL53L0X_device_read_strobe>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800653c:	4313      	orrs	r3, r2
 800653e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006542:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006546:	461a      	mov	r2, r3
 8006548:	2190      	movs	r1, #144	@ 0x90
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fd10 	bl	8007f70 <VL53L0X_RdDWord>
 8006550:	4603      	mov	r3, r0
 8006552:	461a      	mov	r2, r3
 8006554:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006558:	4313      	orrs	r3, r2
 800655a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006562:	b29b      	uxth	r3, r3
 8006564:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006566:	2274      	movs	r2, #116	@ 0x74
 8006568:	2194      	movs	r1, #148	@ 0x94
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fd3c 	bl	8007fe8 <VL53L0X_WrByte>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006578:	4313      	orrs	r3, r2
 800657a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff fc5e 	bl	8005e40 <VL53L0X_device_read_strobe>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800658c:	4313      	orrs	r3, r2
 800658e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006592:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006596:	461a      	mov	r2, r3
 8006598:	2190      	movs	r1, #144	@ 0x90
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 fce8 	bl	8007f70 <VL53L0X_RdDWord>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80065b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065b4:	4313      	orrs	r3, r2
 80065b6:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80065b8:	2275      	movs	r2, #117	@ 0x75
 80065ba:	2194      	movs	r1, #148	@ 0x94
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fd13 	bl	8007fe8 <VL53L0X_WrByte>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fc35 	bl	8005e40 <VL53L0X_device_read_strobe>
 80065d6:	4603      	mov	r3, r0
 80065d8:	461a      	mov	r2, r3
 80065da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065de:	4313      	orrs	r3, r2
 80065e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80065e8:	461a      	mov	r2, r3
 80065ea:	2190      	movs	r1, #144	@ 0x90
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 fcbf 	bl	8007f70 <VL53L0X_RdDWord>
 80065f2:	4603      	mov	r3, r0
 80065f4:	461a      	mov	r2, r3
 80065f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8006604:	b29b      	uxth	r3, r3
 8006606:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006608:	2276      	movs	r2, #118	@ 0x76
 800660a:	2194      	movs	r1, #148	@ 0x94
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 fceb 	bl	8007fe8 <VL53L0X_WrByte>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800661a:	4313      	orrs	r3, r2
 800661c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fc0d 	bl	8005e40 <VL53L0X_device_read_strobe>
 8006626:	4603      	mov	r3, r0
 8006628:	461a      	mov	r2, r3
 800662a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800662e:	4313      	orrs	r3, r2
 8006630:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006634:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006638:	461a      	mov	r2, r3
 800663a:	2190      	movs	r1, #144	@ 0x90
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 fc97 	bl	8007f70 <VL53L0X_RdDWord>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800664a:	4313      	orrs	r3, r2
 800664c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006656:	4313      	orrs	r3, r2
 8006658:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800665a:	2200      	movs	r2, #0
 800665c:	2181      	movs	r1, #129	@ 0x81
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fcc2 	bl	8007fe8 <VL53L0X_WrByte>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800666c:	4313      	orrs	r3, r2
 800666e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006672:	2206      	movs	r2, #6
 8006674:	21ff      	movs	r1, #255	@ 0xff
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fcb6 	bl	8007fe8 <VL53L0X_WrByte>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006684:	4313      	orrs	r3, r2
 8006686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800668a:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800668e:	461a      	mov	r2, r3
 8006690:	2183      	movs	r1, #131	@ 0x83
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fbb0 	bl	8007df8 <VL53L0X_RdByte>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80066a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066aa:	f023 0304 	bic.w	r3, r3, #4
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	2183      	movs	r1, #131	@ 0x83
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 fc97 	bl	8007fe8 <VL53L0X_WrByte>
 80066ba:	4603      	mov	r3, r0
 80066bc:	461a      	mov	r2, r3
 80066be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066c8:	2201      	movs	r2, #1
 80066ca:	21ff      	movs	r1, #255	@ 0xff
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fc8b 	bl	8007fe8 <VL53L0X_WrByte>
 80066d2:	4603      	mov	r3, r0
 80066d4:	461a      	mov	r2, r3
 80066d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066da:	4313      	orrs	r3, r2
 80066dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80066e0:	2201      	movs	r2, #1
 80066e2:	2100      	movs	r1, #0
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fc7f 	bl	8007fe8 <VL53L0X_WrByte>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80066f8:	2200      	movs	r2, #0
 80066fa:	21ff      	movs	r1, #255	@ 0xff
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fc73 	bl	8007fe8 <VL53L0X_WrByte>
 8006702:	4603      	mov	r3, r0
 8006704:	461a      	mov	r2, r3
 8006706:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800670a:	4313      	orrs	r3, r2
 800670c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006710:	2200      	movs	r2, #0
 8006712:	2180      	movs	r1, #128	@ 0x80
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 fc67 	bl	8007fe8 <VL53L0X_WrByte>
 800671a:	4603      	mov	r3, r0
 800671c:	461a      	mov	r2, r3
 800671e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006722:	4313      	orrs	r3, r2
 8006724:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006728:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 808f 	bne.w	8006850 <VL53L0X_get_info_from_device+0x98e>
 8006732:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006736:	2b07      	cmp	r3, #7
 8006738:	f000 808a 	beq.w	8006850 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d024      	beq.n	8006790 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006746:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800674a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800674e:	2b00      	cmp	r3, #0
 8006750:	d11e      	bne.n	8006790 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8006758:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8006762:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006766:	2300      	movs	r3, #0
 8006768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800676a:	e00e      	b.n	800678a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800676c:	f107 0208 	add.w	r2, r7, #8
 8006770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006772:	4413      	add	r3, r2
 8006774:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800677a:	4413      	add	r3, r2
 800677c:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8006780:	460a      	mov	r2, r1
 8006782:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006786:	3301      	adds	r3, #1
 8006788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800678a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678c:	2b05      	cmp	r3, #5
 800678e:	dded      	ble.n	800676c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d018      	beq.n	80067cc <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800679a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800679e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d112      	bne.n	80067cc <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067a6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067b0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	33f3      	adds	r3, #243	@ 0xf3
 80067be:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80067c0:	f107 0310 	add.w	r3, r7, #16
 80067c4:	4619      	mov	r1, r3
 80067c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067c8:	f001 fcf6 	bl	80081b8 <strcpy>

		}

		if (((option & 4) == 4) &&
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d030      	beq.n	8006838 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80067d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80067da:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d12a      	bne.n	8006838 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80067f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f4:	025b      	lsls	r3, r3, #9
 80067f6:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067fc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006808:	2b00      	cmp	r3, #0
 800680a:	d011      	beq.n	8006830 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800680c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800680e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006820:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 8006824:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006828:	425b      	negs	r3, r3
 800682a:	b29b      	uxth	r3, r3
 800682c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8006830:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006838:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	4313      	orrs	r3, r2
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006846:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006850:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8006854:	4618      	mov	r0, r3
 8006856:	3760      	adds	r7, #96	@ 0x60
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006868:	f240 6277 	movw	r2, #1655	@ 0x677
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006874:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006878:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800688a:	68bb      	ldr	r3, [r7, #8]
}
 800688c:	4618      	mov	r0, r3
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d015      	beq.n	80068de <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80068b8:	e005      	b.n	80068c6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	3301      	adds	r3, #1
 80068c4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2bff      	cmp	r3, #255	@ 0xff
 80068ca:	d8f6      	bhi.n	80068ba <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80068cc:	89fb      	ldrh	r3, [r7, #14]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80068da:	4413      	add	r3, r2
 80068dc:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80068de:	8afb      	ldrh	r3, [r7, #22]

}
 80068e0:	4618      	mov	r0, r3
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	0a12      	lsrs	r2, r2, #8
 8006902:	b292      	uxth	r2, r2
 8006904:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006906:	3301      	adds	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	4619      	mov	r1, r3
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff ff94 	bl	800685c <VL53L0X_calc_macro_period_ps>
 8006934:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800693c:	4a0a      	ldr	r2, [pc, #40]	@ (8006968 <VL53L0X_calc_timeout_mclks+0x50>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	099b      	lsrs	r3, r3, #6
 8006944:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800694c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	085b      	lsrs	r3, r3, #1
 8006954:	441a      	add	r2, r3
	timeout_period_mclks =
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800695e:	69fb      	ldr	r3, [r7, #28]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	10624dd3 	.word	0x10624dd3

0800696c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	807b      	strh	r3, [r7, #2]
 8006978:	4613      	mov	r3, r2
 800697a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006980:	787b      	ldrb	r3, [r7, #1]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff69 	bl	800685c <VL53L0X_calc_macro_period_ps>
 800698a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006992:	4a0b      	ldr	r2, [pc, #44]	@ (80069c0 <VL53L0X_calc_timeout_us+0x54>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	099b      	lsrs	r3, r3, #6
 800699a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 800699c:	887b      	ldrh	r3, [r7, #2]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	4413      	add	r3, r2
	actual_timeout_period_us =
 80069aa:	4a05      	ldr	r2, [pc, #20]	@ (80069c0 <VL53L0X_calc_timeout_us+0x54>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	099b      	lsrs	r3, r3, #6
 80069b2:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80069b4:	697b      	ldr	r3, [r7, #20]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	10624dd3 	.word	0x10624dd3

080069c4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08c      	sub	sp, #48	@ 0x30
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	460b      	mov	r3, r1
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80069ea:	7afb      	ldrb	r3, [r7, #11]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <get_sequence_step_timeout+0x38>
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d002      	beq.n	80069fc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d127      	bne.n	8006a4c <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069fc:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006a00:	461a      	mov	r2, r3
 8006a02:	2100      	movs	r1, #0
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f7fd fa97 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006a10:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d109      	bne.n	8006a2c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006a18:	f107 0320 	add.w	r3, r7, #32
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2146      	movs	r1, #70	@ 0x46
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f001 f9e9 	bl	8007df8 <VL53L0X_RdByte>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006a2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ff5b 	bl	80068ec <VL53L0X_decode_timeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006a3a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006a3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a40:	4619      	mov	r1, r3
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff ff92 	bl	800696c <VL53L0X_calc_timeout_us>
 8006a48:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006a4a:	e092      	b.n	8006b72 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006a4c:	7afb      	ldrb	r3, [r7, #11]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d135      	bne.n	8006abe <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a52:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006a56:	461a      	mov	r2, r3
 8006a58:	2100      	movs	r1, #0
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7fd fa6c 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 8081 	bne.w	8006b72 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a70:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006a74:	461a      	mov	r2, r3
 8006a76:	2100      	movs	r1, #0
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7fd fa5d 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006a84:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8006a8c:	f107 031e 	add.w	r3, r7, #30
 8006a90:	461a      	mov	r2, r3
 8006a92:	2151      	movs	r1, #81	@ 0x51
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f001 fa35 	bl	8007f04 <VL53L0X_RdWord>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006aa0:	8bfb      	ldrh	r3, [r7, #30]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff ff22 	bl	80068ec <VL53L0X_decode_timeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006aac:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006ab0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff ff59 	bl	800696c <VL53L0X_calc_timeout_us>
 8006aba:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006abc:	e059      	b.n	8006b72 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d156      	bne.n	8006b72 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006ac4:	f107 0314 	add.w	r3, r7, #20
 8006ac8:	4619      	mov	r1, r3
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7fd fb3e 	bl	800414c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01d      	beq.n	8006b16 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ada:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006ade:	461a      	mov	r2, r3
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7fd fa28 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006aee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10f      	bne.n	8006b16 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8006af6:	f107 031e 	add.w	r3, r7, #30
 8006afa:	461a      	mov	r2, r3
 8006afc:	2151      	movs	r1, #81	@ 0x51
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f001 fa00 	bl	8007f04 <VL53L0X_RdWord>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b0a:	8bfb      	ldrh	r3, [r7, #30]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff feed 	bl	80068ec <VL53L0X_decode_timeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006b16:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b1e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006b22:	461a      	mov	r2, r3
 8006b24:	2101      	movs	r1, #1
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7fd fa06 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b32:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10f      	bne.n	8006b5a <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 8006b3a:	f107 031c 	add.w	r3, r7, #28
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2171      	movs	r1, #113	@ 0x71
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 f9de 	bl	8007f04 <VL53L0X_RdWord>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b4e:	8bbb      	ldrh	r3, [r7, #28]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fecb 	bl	80068ec <VL53L0X_decode_timeout>
 8006b56:	4603      	mov	r3, r0
 8006b58:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006b5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006b62:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b68:	4619      	mov	r1, r3
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f7ff fefe 	bl	800696c <VL53L0X_calc_timeout_us>
 8006b70:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b76:	601a      	str	r2, [r3, #0]

	return Status;
 8006b78:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3730      	adds	r7, #48	@ 0x30
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	@ 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <set_sequence_step_timeout+0x26>
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d002      	beq.n	8006baa <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d138      	bne.n	8006c1c <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006baa:	f107 031d 	add.w	r3, r7, #29
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7fd f9c0 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006bbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d11a      	bne.n	8006bfc <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006bc6:	7f7b      	ldrb	r3, [r7, #29]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fea3 	bl	8006918 <VL53L0X_calc_timeout_mclks>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006bd6:	8bfb      	ldrh	r3, [r7, #30]
 8006bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bdc:	d903      	bls.n	8006be6 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006bde:	23ff      	movs	r3, #255	@ 0xff
 8006be0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006be4:	e004      	b.n	8006bf0 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006be6:	8bfb      	ldrh	r3, [r7, #30]
 8006be8:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006bea:	3b01      	subs	r3, #1
 8006bec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 80ad 	bne.w	8006d60 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8006c06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2146      	movs	r1, #70	@ 0x46
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f001 f9ea 	bl	8007fe8 <VL53L0X_WrByte>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006c1a:	e0a1      	b.n	8006d60 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d135      	bne.n	8006c8e <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d11b      	bne.n	8006c62 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c2a:	f107 031d 	add.w	r3, r7, #29
 8006c2e:	461a      	mov	r2, r3
 8006c30:	2100      	movs	r1, #0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7fd f980 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006c3e:	7f7b      	ldrb	r3, [r7, #29]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7ff fe67 	bl	8006918 <VL53L0X_calc_timeout_mclks>
 8006c4a:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006c4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fe21 	bl	8006898 <VL53L0X_encode_timeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c5a:	8b7a      	ldrh	r2, [r7, #26]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006c62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d108      	bne.n	8006c7c <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006c6a:	8b7b      	ldrh	r3, [r7, #26]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2151      	movs	r1, #81	@ 0x51
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f001 f9dd 	bl	8008030 <VL53L0X_WrWord>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006c7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d16d      	bne.n	8006d60 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8006c8c:	e068      	b.n	8006d60 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006c8e:	7afb      	ldrb	r3, [r7, #11]
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d162      	bne.n	8006d5a <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7fd fa56 	bl	800414c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01d      	beq.n	8006ce6 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006caa:	f107 031d 	add.w	r3, r7, #29
 8006cae:	461a      	mov	r2, r3
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7fd f940 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006cbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10f      	bne.n	8006ce6 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006cc6:	f107 031a 	add.w	r3, r7, #26
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2151      	movs	r1, #81	@ 0x51
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f001 f918 	bl	8007f04 <VL53L0X_RdWord>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006cda:	8b7b      	ldrh	r3, [r7, #26]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fe05 	bl	80068ec <VL53L0X_decode_timeout>
 8006ce2:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006ce4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006cee:	f107 031d 	add.w	r3, r7, #29
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7fd f91e 	bl	8003f38 <VL53L0X_GetVcselPulsePeriod>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006d02:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d12a      	bne.n	8006d60 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006d0a:	7f7b      	ldrb	r3, [r7, #29]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff fe01 	bl	8006918 <VL53L0X_calc_timeout_mclks>
 8006d16:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8006d18:	847b      	strh	r3, [r7, #34]	@ 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006d1a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d1e:	4413      	add	r3, r2
 8006d20:	847b      	strh	r3, [r7, #34]	@ 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006d22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fdb7 	bl	8006898 <VL53L0X_encode_timeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8006d2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d108      	bne.n	8006d48 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006d36:	8c3b      	ldrh	r3, [r7, #32]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2171      	movs	r1, #113	@ 0x71
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f001 f977 	bl	8008030 <VL53L0X_WrWord>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d107      	bne.n	8006d60 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8006d58:	e002      	b.n	8006d60 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d5a:	23fc      	movs	r3, #252	@ 0xfc
 8006d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 8006d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	@ 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	460b      	mov	r3, r1
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d00a      	beq.n	8006d9e <VL53L0X_get_vcsel_pulse_period+0x32>
 8006d88:	e013      	b.n	8006db2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006d8a:	f107 0316 	add.w	r3, r7, #22
 8006d8e:	461a      	mov	r2, r3
 8006d90:	2150      	movs	r1, #80	@ 0x50
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f001 f830 	bl	8007df8 <VL53L0X_RdByte>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006d9c:	e00b      	b.n	8006db6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006d9e:	f107 0316 	add.w	r3, r7, #22
 8006da2:	461a      	mov	r2, r3
 8006da4:	2170      	movs	r1, #112	@ 0x70
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f001 f826 	bl	8007df8 <VL53L0X_RdByte>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006db0:	e001      	b.n	8006db6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006db2:	23fc      	movs	r3, #252	@ 0xfc
 8006db4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d107      	bne.n	8006dce <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006dbe:	7dbb      	ldrb	r3, [r7, #22]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fe fff6 	bl	8005db2 <VL53L0X_decode_vcsel_period>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	701a      	strb	r2, [r3, #0]

	return Status;
 8006dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b092      	sub	sp, #72	@ 0x48
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006dea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006dee:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8006df0:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8006df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006df6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006dfc:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006e02:	f240 234e 	movw	r3, #590	@ 0x24e
 8006e06:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006e08:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006e0e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006e12:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006e14:	f240 2326 	movw	r3, #550	@ 0x226
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006e1e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006e22:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d205      	bcs.n	8006e3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e30:	23fc      	movs	r3, #252	@ 0xfc
 8006e32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 8006e36:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006e3a:	e0aa      	b.n	8006f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006e3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fd f97c 	bl	800414c <VL53L0X_GetSequenceStepEnables>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006e5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d15b      	bne.n	8006f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8006e62:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d105      	bne.n	8006e74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8006e68:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8006e6e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d052      	beq.n	8006f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8006e74:	f107 0310 	add.w	r3, r7, #16
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2102      	movs	r1, #2
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fda1 	bl	80069c4 <get_sequence_step_timeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006e88:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006e90:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006e94:	e07d      	b.n	8006f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006e96:	7d3b      	ldrb	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00f      	beq.n	8006ebc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006e9c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea0:	4413      	add	r3, r2
 8006ea2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d204      	bcs.n	8006eb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb4:	e002      	b.n	8006ebc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006eb6:	23fc      	movs	r3, #252	@ 0xfc
 8006eb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006ebc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8006ec4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006ec8:	e063      	b.n	8006f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006eca:	7dbb      	ldrb	r3, [r7, #22]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d011      	beq.n	8006ef4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed4:	4413      	add	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d204      	bcs.n	8006eec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006ee2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eea:	e016      	b.n	8006f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006eec:	23fc      	movs	r3, #252	@ 0xfc
 8006eee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006ef2:	e012      	b.n	8006f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006ef4:	7d7b      	ldrb	r3, [r7, #21]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00f      	beq.n	8006f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006efe:	4413      	add	r3, r2
 8006f00:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d204      	bcs.n	8006f14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006f0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f12:	e002      	b.n	8006f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f14:	23fc      	movs	r3, #252	@ 0xfc
 8006f16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006f1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006f22:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006f26:	e034      	b.n	8006f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d019      	beq.n	8006f62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006f2e:	f107 030c 	add.w	r3, r7, #12
 8006f32:	461a      	mov	r2, r3
 8006f34:	2103      	movs	r1, #3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fd44 	bl	80069c4 <get_sequence_step_timeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f46:	4413      	add	r3, r2
 8006f48:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d204      	bcs.n	8006f5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006f52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f5a:	e002      	b.n	8006f62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f5c:	23fc      	movs	r3, #252	@ 0xfc
 8006f5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006f62:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d111      	bne.n	8006f8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006f6a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8006f70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	643b      	str	r3, [r7, #64]	@ 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8006f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff fe01 	bl	8006b84 <set_sequence_step_timeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006f8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3748      	adds	r7, #72	@ 0x48
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b090      	sub	sp, #64	@ 0x40
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006faa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006fae:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006fb0:	f240 7376 	movw	r3, #1910	@ 0x776
 8006fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006fb6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006fbc:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006fc0:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006fc2:	f240 234e 	movw	r3, #590	@ 0x24e
 8006fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006fc8:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006fce:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006fd2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006fd4:	f240 2326 	movw	r3, #550	@ 0x226
 8006fd8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006fde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe2:	441a      	add	r2, r3
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006fe8:	f107 0318 	add.w	r3, r7, #24
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fd f8ac 	bl	800414c <VL53L0X_GetSequenceStepEnables>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006ffa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007002:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007006:	e075      	b.n	80070f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007008:	7e3b      	ldrb	r3, [r7, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d105      	bne.n	800701a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800700e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007014:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007016:	2b00      	cmp	r3, #0
 8007018:	d030      	beq.n	800707c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800701a:	f107 0310 	add.w	r3, r7, #16
 800701e:	461a      	mov	r2, r3
 8007020:	2102      	movs	r1, #2
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff fcce 	bl	80069c4 <get_sequence_step_timeout>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800702e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007032:	2b00      	cmp	r3, #0
 8007034:	d122      	bne.n	800707c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007036:	7e3b      	ldrb	r3, [r7, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007040:	6939      	ldr	r1, [r7, #16]
 8007042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007044:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007046:	441a      	add	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800704c:	7ebb      	ldrb	r3, [r7, #26]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007056:	6939      	ldr	r1, [r7, #16]
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	440b      	add	r3, r1
 800705c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800705e:	441a      	add	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	e00a      	b.n	800707c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007066:	7e7b      	ldrb	r3, [r7, #25]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007070:	6939      	ldr	r1, [r7, #16]
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007076:	441a      	add	r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800707c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007080:	2b00      	cmp	r3, #0
 8007082:	d114      	bne.n	80070ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007084:	7efb      	ldrb	r3, [r7, #27]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d011      	beq.n	80070ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	461a      	mov	r2, r3
 8007090:	2103      	movs	r1, #3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fc96 	bl	80069c4 <get_sequence_step_timeout>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80070a8:	441a      	add	r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d114      	bne.n	80070e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80070b6:	7f3b      	ldrb	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d011      	beq.n	80070e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80070bc:	f107 0314 	add.w	r3, r7, #20
 80070c0:	461a      	mov	r2, r3
 80070c2:	2104      	movs	r1, #4
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fc7d 	bl	80069c4 <get_sequence_step_timeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80070d4:	6979      	ldr	r1, [r7, #20]
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80070da:	441a      	add	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3740      	adds	r7, #64	@ 0x40
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007106:	2300      	movs	r3, #0
 8007108:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800710e:	e0c6      	b.n	800729e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4413      	add	r3, r2
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	74fb      	strb	r3, [r7, #19]
		Index++;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	3301      	adds	r3, #1
 800711e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007120:	7cfb      	ldrb	r3, [r7, #19]
 8007122:	2bff      	cmp	r3, #255	@ 0xff
 8007124:	f040 808d 	bne.w	8007242 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4413      	add	r3, r2
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	747b      	strb	r3, [r7, #17]
			Index++;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	3301      	adds	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007138:	7c7b      	ldrb	r3, [r7, #17]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d87e      	bhi.n	800723c <VL53L0X_load_tuning_settings+0x140>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <VL53L0X_load_tuning_settings+0x48>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007155 	.word	0x08007155
 8007148:	0800718f 	.word	0x0800718f
 800714c:	080071c9 	.word	0x080071c9
 8007150:	08007203 	.word	0x08007203
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	4413      	add	r3, r2
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	743b      	strb	r3, [r7, #16]
				Index++;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	3301      	adds	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4413      	add	r3, r2
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	3301      	adds	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007174:	7c3b      	ldrb	r3, [r7, #16]
 8007176:	b29b      	uxth	r3, r3
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	b29a      	uxth	r2, r3
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	b29b      	uxth	r3, r3
 8007180:	4413      	add	r3, r2
 8007182:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	89ba      	ldrh	r2, [r7, #12]
 8007188:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800718c:	e087      	b.n	800729e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	4413      	add	r3, r2
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	743b      	strb	r3, [r7, #16]
				Index++;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3301      	adds	r3, #1
 800719c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	4413      	add	r3, r2
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	3301      	adds	r3, #1
 80071ac:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80071ae:	7c3b      	ldrb	r3, [r7, #16]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	89ba      	ldrh	r2, [r7, #12]
 80071c2:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 80071c6:	e06a      	b.n	800729e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4413      	add	r3, r2
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	743b      	strb	r3, [r7, #16]
				Index++;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	3301      	adds	r3, #1
 80071d6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4413      	add	r3, r2
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3301      	adds	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80071e8:	7c3b      	ldrb	r3, [r7, #16]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	89ba      	ldrh	r2, [r7, #12]
 80071fc:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8007200:	e04d      	b.n	800729e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	4413      	add	r3, r2
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	743b      	strb	r3, [r7, #16]
				Index++;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	3301      	adds	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	4413      	add	r3, r2
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3301      	adds	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007222:	7c3b      	ldrb	r3, [r7, #16]
 8007224:	b29b      	uxth	r3, r3
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	b29a      	uxth	r2, r3
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	b29b      	uxth	r3, r3
 800722e:	4413      	add	r3, r2
 8007230:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	89ba      	ldrh	r2, [r7, #12]
 8007236:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a
				break;
 800723a:	e030      	b.n	800729e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800723c:	23fc      	movs	r3, #252	@ 0xfc
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	e02d      	b.n	800729e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007242:	7cfb      	ldrb	r3, [r7, #19]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d828      	bhi.n	800729a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4413      	add	r3, r2
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	3301      	adds	r3, #1
 8007256:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007258:	2300      	movs	r3, #0
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e00f      	b.n	800727e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	4413      	add	r3, r2
 8007264:	7819      	ldrb	r1, [r3, #0]
 8007266:	f107 0208 	add.w	r2, r7, #8
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	4413      	add	r3, r2
 800726e:	460a      	mov	r2, r1
 8007270:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	3301      	adds	r3, #1
 8007276:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	3301      	adds	r3, #1
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	7cfb      	ldrb	r3, [r7, #19]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	429a      	cmp	r2, r3
 8007284:	dbeb      	blt.n	800725e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007286:	7cfb      	ldrb	r3, [r7, #19]
 8007288:	f107 0208 	add.w	r2, r7, #8
 800728c:	7cb9      	ldrb	r1, [r7, #18]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fddc 	bl	8007e4c <VL53L0X_WriteMulti>
 8007294:	4603      	mov	r3, r0
 8007296:	77fb      	strb	r3, [r7, #31]
 8007298:	e001      	b.n	800729e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800729a:	23fc      	movs	r3, #252	@ 0xfc
 800729c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	4413      	add	r3, r2
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <VL53L0X_load_tuning_settings+0x1b8>
 80072aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f43f af2e 	beq.w	8007110 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80072d6:	f107 0313 	add.w	r3, r7, #19
 80072da:	4619      	mov	r1, r3
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7fd f801 	bl	80042e4 <VL53L0X_GetXTalkCompensationEnable>
 80072e2:	4603      	mov	r3, r0
 80072e4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80072e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d111      	bne.n	8007312 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80072ee:	7cfb      	ldrb	r3, [r7, #19]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00e      	beq.n	8007312 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	8a9b      	ldrh	r3, [r3, #20]
 80072fe:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3380      	adds	r3, #128	@ 0x80
 800730c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007312:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007336:	f107 0310 	add.w	r3, r7, #16
 800733a:	461a      	mov	r2, r3
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff ffbe 	bl	80072c0 <VL53L0X_get_total_xtalk_rate>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007348:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	441a      	add	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]

	return Status;
 800735c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b09a      	sub	sp, #104	@ 0x68
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007376:	2312      	movs	r3, #18
 8007378:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800737a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800737e:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007380:	2342      	movs	r3, #66	@ 0x42
 8007382:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007384:	2306      	movs	r3, #6
 8007386:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007388:	2307      	movs	r3, #7
 800738a:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800738c:	2300      	movs	r3, #0
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 3150 	ldrh.w	r3, [r3, #336]	@ 0x150
	dmaxCalRange_mm =
 8007398:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80073a0:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80073ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ae:	3380      	adds	r3, #128	@ 0x80
 80073b0:	0a1b      	lsrs	r3, r3, #8
 80073b2:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80073b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01a      	beq.n	80073fe <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	029b      	lsls	r3, r3, #10
 80073cc:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80073d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d4:	4413      	add	r3, r2
 80073d6:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80073d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80073e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073e4:	4613      	mov	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4413      	add	r3, r2
 80073ea:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80073ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ee:	fb03 f303 	mul.w	r3, r3, r3
 80073f2:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80073f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073f6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	fb03 f303 	mul.w	r3, r3, r3
 8007418:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800741a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800741c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007420:	0c1b      	lsrs	r3, r3, #16
 8007422:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007426:	085a      	lsrs	r2, r3, #1
 8007428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742a:	441a      	add	r2, r3
 800742c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800742e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007432:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007438:	fb02 f303 	mul.w	r3, r2, r3
 800743c:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007444:	d302      	bcc.n	800744c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8007446:	4b54      	ldr	r3, [pc, #336]	@ (8007598 <VL53L0X_calc_dmax+0x230>)
 8007448:	663b      	str	r3, [r7, #96]	@ 0x60
 800744a:	e015      	b.n	8007478 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800744c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800744e:	085a      	lsrs	r2, r3, #1
 8007450:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007452:	441a      	add	r2, r3
 8007454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007456:	fbb2 f3f3 	udiv	r3, r2, r3
 800745a:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800745c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800745e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007460:	fb02 f303 	mul.w	r3, r2, r3
 8007464:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007468:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007472:	fb03 f303 	mul.w	r3, r3, r3
 8007476:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800747a:	039b      	lsls	r3, r3, #14
 800747c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007480:	4a46      	ldr	r2, [pc, #280]	@ (800759c <VL53L0X_calc_dmax+0x234>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	099b      	lsrs	r3, r3, #6
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	fb03 f303 	mul.w	r3, r3, r3
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007494:	fb03 f303 	mul.w	r3, r3, r3
 8007498:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	3308      	adds	r3, #8
 800749e:	091b      	lsrs	r3, r3, #4
 80074a0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80074a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80074aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80074bc:	0b9b      	lsrs	r3, r3, #14
 80074be:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80074c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074c4:	4413      	add	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80074c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	4413      	add	r3, r2
 80074d0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	039b      	lsls	r3, r3, #14
 80074e0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	4413      	add	r3, r2
 80074ea:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007506:	4a25      	ldr	r2, [pc, #148]	@ (800759c <VL53L0X_calc_dmax+0x234>)
 8007508:	fba2 2303 	umull	r2, r3, r2, r3
 800750c:	099b      	lsrs	r3, r3, #6
 800750e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800751c:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <VL53L0X_calc_dmax+0x234>)
 800751e:	fba2 2303 	umull	r2, r3, r2, r3
 8007522:	099b      	lsrs	r3, r3, #6
 8007524:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007528:	3380      	adds	r3, #128	@ 0x80
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	085a      	lsrs	r2, r3, #1
 8007538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753a:	441a      	add	r2, r3
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007542:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007544:	e001      	b.n	800754a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800754a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800754c:	f7fe fc44 	bl	8005dd8 <VL53L0X_isqrt>
 8007550:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	085a      	lsrs	r2, r3, #1
 800755c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755e:	441a      	add	r2, r3
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	fbb2 f3f3 	udiv	r3, r2, r3
 8007566:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007568:	e001      	b.n	800756e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800756e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007570:	f7fe fc32 	bl	8005dd8 <VL53L0X_isqrt>
 8007574:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 8007576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007580:	429a      	cmp	r2, r3
 8007582:	d902      	bls.n	800758a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8007584:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007586:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007588:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800758a:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800758e:	4618      	mov	r0, r3
 8007590:	3768      	adds	r7, #104	@ 0x68
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	fff00000 	.word	0xfff00000
 800759c:	10624dd3 	.word	0x10624dd3

080075a0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b0b2      	sub	sp, #200	@ 0xc8
 80075a4:	af04      	add	r7, sp, #16
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80075ae:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80075b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80075b6:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80075ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80075be:	2342      	movs	r3, #66	@ 0x42
 80075c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80075c4:	f241 235c 	movw	r3, #4700	@ 0x125c
 80075c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80075cc:	4b6b      	ldr	r3, [pc, #428]	@ (800777c <VL53L0X_calc_sigma_estimate+0x1dc>)
 80075ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80075d2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80075d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80075da:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 80075de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80075e8:	4b65      	ldr	r3, [pc, #404]	@ (8007780 <VL53L0X_calc_sigma_estimate+0x1e0>)
 80075ea:	67bb      	str	r3, [r7, #120]	@ 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80075ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075f0:	677b      	str	r3, [r7, #116]	@ 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80075f2:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 80075f6:	673b      	str	r3, [r7, #112]	@ 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 80075f8:	f240 6377 	movw	r3, #1655	@ 0x677
 80075fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075fe:	2300      	movs	r3, #0
 8007600:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007612:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007616:	0c1b      	lsrs	r3, r3, #16
 8007618:	66bb      	str	r3, [r7, #104]	@ 0x68

	correctedSignalRate_mcps =
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	667b      	str	r3, [r7, #100]	@ 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007620:	f107 0310 	add.w	r3, r7, #16
 8007624:	461a      	mov	r2, r3
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7ff fe78 	bl	800731e <VL53L0X_get_total_signal_rate>
 800762e:	4603      	mov	r3, r0
 8007630:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	461a      	mov	r2, r3
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff fe3f 	bl	80072c0 <VL53L0X_get_total_xtalk_rate>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	663b      	str	r3, [r7, #96]	@ 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007654:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007656:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	663b      	str	r3, [r7, #96]	@ 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007664:	fb02 f303 	mul.w	r3, r2, r3
 8007668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800766c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007672:	429a      	cmp	r2, r3
 8007674:	d902      	bls.n	800767c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800767c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d164      	bne.n	800774e <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800768a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8007692:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007696:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800769a:	461a      	mov	r2, r3
 800769c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff f93a 	bl	8006918 <VL53L0X_calc_timeout_mclks>
 80076a4:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076ac:	653b      	str	r3, [r7, #80]	@ 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80076b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80076b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076bc:	461a      	mov	r2, r3
 80076be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff f929 	bl	8006918 <VL53L0X_calc_timeout_mclks>
 80076c6:	64b8      	str	r0, [r7, #72]	@ 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80076c8:	2303      	movs	r3, #3
 80076ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (finalRangeVcselPCLKS == 8)
 80076ce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d102      	bne.n	80076dc <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 80076d6:	2302      	movs	r3, #2
 80076d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80076dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80076e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80076e6:	fb02 f303 	mul.w	r3, r2, r3
 80076ea:	02db      	lsls	r3, r3, #11
 80076ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80076f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80076f8:	4a22      	ldr	r2, [pc, #136]	@ (8007784 <VL53L0X_calc_sigma_estimate+0x1e4>)
 80076fa:	fba2 2303 	umull	r2, r3, r2, r3
 80076fe:	099b      	lsrs	r3, r3, #6
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800770a:	fb02 f303 	mul.w	r3, r2, r3
 800770e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007712:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007716:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800771a:	4a1a      	ldr	r2, [pc, #104]	@ (8007784 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	099b      	lsrs	r3, r3, #6
 8007722:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	3380      	adds	r3, #128	@ 0x80
 800772a:	0a1b      	lsrs	r3, r3, #8
 800772c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800773c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007740:	3380      	adds	r3, #128	@ 0x80
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800774e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 8007756:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 800775a:	e127      	b.n	80079ac <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800775c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800775e:	2b00      	cmp	r3, #0
 8007760:	d112      	bne.n	8007788 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007768:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007770:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		*pDmax_mm = 0;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e115      	b.n	80079a8 <VL53L0X_calc_sigma_estimate+0x408>
 800777c:	028f87ae 	.word	0x028f87ae
 8007780:	0006999a 	.word	0x0006999a
 8007784:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8007788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8007790:	2301      	movs	r3, #1
 8007792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800779a:	647b      	str	r3, [r7, #68]	@ 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800779c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800779e:	041a      	lsls	r2, r3, #16
 80077a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80077aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d902      	bls.n	80077ba <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80077b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80077ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80077be:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
 80077c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80077ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077ce:	4613      	mov	r3, r2
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fafe 	bl	8005dd8 <VL53L0X_isqrt>
 80077dc:	4603      	mov	r3, r0
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	643b      	str	r3, [r7, #64]	@ 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	891b      	ldrh	r3, [r3, #8]
 80077e6:	461a      	mov	r2, r3
 80077e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80077f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077f2:	041a      	lsls	r2, r3, #16
 80077f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80077f8:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 80077fa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80077fe:	4a6d      	ldr	r2, [pc, #436]	@ (80079b4 <VL53L0X_calc_sigma_estimate+0x414>)
 8007800:	fba2 2303 	umull	r2, r3, r2, r3
 8007804:	099b      	lsrs	r3, r3, #6
 8007806:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800780a:	041a      	lsls	r2, r3, #16
 800780c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007810:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8007812:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007816:	4a67      	ldr	r2, [pc, #412]	@ (80079b4 <VL53L0X_calc_sigma_estimate+0x414>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	099b      	lsrs	r3, r3, #6
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007826:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782a:	fbb2 f3f3 	udiv	r3, r2, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfb8      	it	lt
 8007832:	425b      	neglt	r3, r3
 8007834:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800783c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800783e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007842:	fbb2 f3f3 	udiv	r3, r2, r3
 8007846:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800784e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007850:	fb02 f303 	mul.w	r3, r2, r3
 8007854:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800785a:	4413      	add	r3, r2
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 8007860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007862:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8007866:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8007868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800786e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007870:	fb03 f303 	mul.w	r3, r3, r3
 8007874:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8007876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007878:	0b9b      	lsrs	r3, r3, #14
 800787a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007888:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800788c:	0c1b      	lsrs	r3, r3, #16
 800788e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	fb03 f303 	mul.w	r3, r3, r3
 8007896:	62bb      	str	r3, [r7, #40]	@ 0x28

		sqr2 = sigmaEstimateP2;
 8007898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	627b      	str	r3, [r7, #36]	@ 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	fb03 f303 	mul.w	r3, r3, r3
 80078ae:	627b      	str	r3, [r7, #36]	@ 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80078b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	4413      	add	r3, r2
 80078b6:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80078b8:	6a38      	ldr	r0, [r7, #32]
 80078ba:	f7fe fa8d 	bl	8005dd8 <VL53L0X_isqrt>
 80078be:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	3332      	adds	r3, #50	@ 0x32
 80078ca:	4a3b      	ldr	r2, [pc, #236]	@ (80079b8 <VL53L0X_calc_sigma_estimate+0x418>)
 80078cc:	fba2 2303 	umull	r2, r3, r2, r3
 80078d0:	095a      	lsrs	r2, r3, #5
 80078d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80078dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e0:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 80078e4:	fb02 f303 	mul.w	r3, r2, r3
 80078e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80078ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078f0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80078f4:	3308      	adds	r3, #8
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		sigmaEstRtn		 /= 10000;
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078fe:	4a2f      	ldr	r2, [pc, #188]	@ (80079bc <VL53L0X_calc_sigma_estimate+0x41c>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	0b5b      	lsrs	r3, r3, #13
 8007906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800790a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800790e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007912:	429a      	cmp	r2, r3
 8007914:	d903      	bls.n	800791e <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007916:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800791a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800791e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007922:	fb03 f303 	mul.w	r3, r3, r3
 8007926:	62bb      	str	r3, [r7, #40]	@ 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8007928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800792c:	fb03 f303 	mul.w	r3, r3, r3
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	4413      	add	r3, r2
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fa4d 	bl	8005dd8 <VL53L0X_isqrt>
 800793e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007946:	fb02 f303 	mul.w	r3, r2, r3
 800794a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800794e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <VL53L0X_calc_sigma_estimate+0x3c8>
 8007954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <VL53L0X_calc_sigma_estimate+0x3c8>
 800795c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007960:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007964:	429a      	cmp	r2, r3
 8007966:	d903      	bls.n	8007970 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007968:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800796c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007976:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		Status = VL53L0X_calc_dmax(
 8007982:	6939      	ldr	r1, [r7, #16]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800798c:	9302      	str	r3, [sp, #8]
 800798e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff fce3 	bl	8007368 <VL53L0X_calc_dmax>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079a8:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	37b8      	adds	r7, #184	@ 0xb8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	10624dd3 	.word	0x10624dd3
 80079b8:	51eb851f 	.word	0x51eb851f
 80079bc:	d1b71759 	.word	0xd1b71759

080079c0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b090      	sub	sp, #64	@ 0x40
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	461a      	mov	r2, r3
 80079cc:	460b      	mov	r3, r1
 80079ce:	72fb      	strb	r3, [r7, #11]
 80079d0:	4613      	mov	r3, r2
 80079d2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	10db      	asrs	r3, r3, #3
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007a20:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d017      	beq.n	8007a58 <VL53L0X_get_pal_range_status+0x98>
 8007a28:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a2c:	2b05      	cmp	r3, #5
 8007a2e:	d013      	beq.n	8007a58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007a30:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a34:	2b07      	cmp	r3, #7
 8007a36:	d00f      	beq.n	8007a58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007a38:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a3c:	2b0c      	cmp	r3, #12
 8007a3e:	d00b      	beq.n	8007a58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007a40:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a44:	2b0d      	cmp	r3, #13
 8007a46:	d007      	beq.n	8007a58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007a48:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a4c:	2b0e      	cmp	r3, #14
 8007a4e:	d003      	beq.n	8007a58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007a50:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a54:	2b0f      	cmp	r3, #15
 8007a56:	d103      	bne.n	8007a60 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8007a5e:	e002      	b.n	8007a66 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 8007a66:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d107      	bne.n	8007a7e <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a6e:	2201      	movs	r2, #1
 8007a70:	21ff      	movs	r1, #255	@ 0xff
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fab8 	bl	8007fe8 <VL53L0X_WrByte>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8007a7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d109      	bne.n	8007a9a <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 8007a86:	f107 0316 	add.w	r3, r7, #22
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	21b6      	movs	r1, #182	@ 0xb6
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fa38 	bl	8007f04 <VL53L0X_RdWord>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007a9a:	8afb      	ldrh	r3, [r7, #22]
 8007a9c:	025b      	lsls	r3, r3, #9
 8007a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8007aa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d107      	bne.n	8007ab8 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	21ff      	movs	r1, #255	@ 0xff
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fa9b 	bl	8007fe8 <VL53L0X_WrByte>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007abc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007ac0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007ac8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007acc:	461a      	mov	r2, r3
 8007ace:	2100      	movs	r1, #0
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7fc fcdb 	bl	800448c <VL53L0X_GetLimitCheckEnable>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007adc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d02e      	beq.n	8007b42 <VL53L0X_get_pal_range_status+0x182>
 8007ae4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d12a      	bne.n	8007b42 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007aec:	f107 0310 	add.w	r3, r7, #16
 8007af0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007af4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7ff fd52 	bl	80075a0 <VL53L0X_calc_sigma_estimate>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007b02:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b10:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007b12:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d113      	bne.n	8007b42 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007b1a:	f107 0320 	add.w	r3, r7, #32
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2100      	movs	r1, #0
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7fc fd38 	bl	8004598 <VL53L0X_GetLimitCheckValue>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d006      	beq.n	8007b42 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8007b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b36:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d902      	bls.n	8007b42 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007b42:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d109      	bne.n	8007b5e <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007b4a:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2102      	movs	r1, #2
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7fc fc9a 	bl	800448c <VL53L0X_GetLimitCheckEnable>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007b5e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d017      	beq.n	8007b96 <VL53L0X_get_pal_range_status+0x1d6>
 8007b66:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d113      	bne.n	8007b96 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007b6e:	f107 031c 	add.w	r3, r7, #28
 8007b72:	461a      	mov	r2, r3
 8007b74:	2102      	movs	r1, #2
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7fc fd0e 	bl	8004598 <VL53L0X_GetLimitCheckValue>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d006      	beq.n	8007b96 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007b88:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d902      	bls.n	8007b96 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007b96:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	2103      	movs	r1, #3
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7fc fc70 	bl	800448c <VL53L0X_GetLimitCheckEnable>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d023      	beq.n	8007c02 <VL53L0X_get_pal_range_status+0x242>
 8007bba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11f      	bne.n	8007c02 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007bc2:	893b      	ldrh	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bcc:	e005      	b.n	8007bda <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	021a      	lsls	r2, r3, #8
 8007bd2:	893b      	ldrh	r3, [r7, #8]
 8007bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007bda:	f107 0318 	add.w	r3, r7, #24
 8007bde:	461a      	mov	r2, r3
 8007be0:	2103      	movs	r1, #3
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7fc fcd8 	bl	8004598 <VL53L0X_GetLimitCheckValue>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007bf4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007bf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d202      	bcs.n	8007c02 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c02:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d14a      	bne.n	8007ca0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007c0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d103      	bne.n	8007c1a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c14:	22ff      	movs	r2, #255	@ 0xff
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e042      	b.n	8007ca0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007c1a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d007      	beq.n	8007c32 <VL53L0X_get_pal_range_status+0x272>
 8007c22:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d003      	beq.n	8007c32 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007c2a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d103      	bne.n	8007c3a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c34:	2205      	movs	r2, #5
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e032      	b.n	8007ca0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007c3a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c3e:	2b06      	cmp	r3, #6
 8007c40:	d003      	beq.n	8007c4a <VL53L0X_get_pal_range_status+0x28a>
 8007c42:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c46:	2b09      	cmp	r3, #9
 8007c48:	d103      	bne.n	8007c52 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e026      	b.n	8007ca0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007c52:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c56:	2b08      	cmp	r3, #8
 8007c58:	d007      	beq.n	8007c6a <VL53L0X_get_pal_range_status+0x2aa>
 8007c5a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c5e:	2b0a      	cmp	r3, #10
 8007c60:	d003      	beq.n	8007c6a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007c62:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d103      	bne.n	8007c72 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	e016      	b.n	8007ca0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007c72:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d003      	beq.n	8007c82 <VL53L0X_get_pal_range_status+0x2c2>
 8007c7a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d103      	bne.n	8007c8a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c84:	2202      	movs	r2, #2
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e00a      	b.n	8007ca0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007c8a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d103      	bne.n	8007c9a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c94:	2201      	movs	r2, #1
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	e002      	b.n	8007ca0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007caa:	2200      	movs	r2, #0
 8007cac:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007cae:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7fc fbe8 	bl	800448c <VL53L0X_GetLimitCheckEnable>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007cc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d14f      	bne.n	8007d6a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007cca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <VL53L0X_get_pal_range_status+0x31a>
 8007cd2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d103      	bne.n	8007ce2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007ce0:	e002      	b.n	8007ce8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007cee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8007cf2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d003      	beq.n	8007d02 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007cfa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007d08:	e002      	b.n	8007d10 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007d16:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007d1a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <VL53L0X_get_pal_range_status+0x36a>
 8007d22:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d103      	bne.n	8007d32 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007d30:	e002      	b.n	8007d38 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007d3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007d42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <VL53L0X_get_pal_range_status+0x392>
 8007d4a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d103      	bne.n	8007d5a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007d58:	e002      	b.n	8007d60 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007d66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3740      	adds	r7, #64	@ 0x40
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b088      	sub	sp, #32
 8007d7a:	af02      	add	r7, sp, #8
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	330a      	adds	r3, #10
 8007d86:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8007d94:	4619      	mov	r1, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	f7f9 fc5f 	bl	8001664 <HAL_I2C_Master_Transmit>
 8007da6:	4603      	mov	r3, r0
 8007da8:	613b      	str	r3, [r7, #16]
    
    return status;
 8007daa:	693b      	ldr	r3, [r7, #16]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	330a      	adds	r3, #10
 8007dc4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8007dd2:	f043 0301 	orr.w	r3, r3, #1
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	4613      	mov	r3, r2
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	f7f9 fd3b 	bl	8001860 <HAL_I2C_Master_Receive>
 8007dea:	4603      	mov	r3, r0
 8007dec:	613b      	str	r3, [r7, #16]
    
    return status;
 8007dee:	693b      	ldr	r3, [r7, #16]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	460b      	mov	r3, r1
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007e0a:	f107 030b 	add.w	r3, r7, #11
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4619      	mov	r1, r3
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff ffaf 	bl	8007d76 <_I2CWrite>
 8007e18:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e20:	23ec      	movs	r3, #236	@ 0xec
 8007e22:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007e24:	e00c      	b.n	8007e40 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8007e26:	2201      	movs	r2, #1
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff ffc2 	bl	8007db4 <_I2CRead>
 8007e30:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e38:	23ec      	movs	r3, #236	@ 0xec
 8007e3a:	75fb      	strb	r3, [r7, #23]
 8007e3c:	e000      	b.n	8007e40 <VL53L0X_RdByte+0x48>
    }
done:
 8007e3e:	bf00      	nop
    return Status;
 8007e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e64:	d902      	bls.n	8007e6c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8007e66:	f06f 0303 	mvn.w	r3, #3
 8007e6a:	e016      	b.n	8007e9a <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 8007e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007ea4 <VL53L0X_WriteMulti+0x58>)
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	480c      	ldr	r0, [pc, #48]	@ (8007ea8 <VL53L0X_WriteMulti+0x5c>)
 8007e78:	f000 f9a6 	bl	80081c8 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	461a      	mov	r2, r3
 8007e82:	4908      	ldr	r1, [pc, #32]	@ (8007ea4 <VL53L0X_WriteMulti+0x58>)
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7ff ff76 	bl	8007d76 <_I2CWrite>
 8007e8a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e92:	23ec      	movs	r3, #236	@ 0xec
 8007e94:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 8007e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	200005c8 	.word	0x200005c8
 8007ea8:	200005c9 	.word	0x200005c9

08007eac <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8007ec0:	f107 030b 	add.w	r3, r7, #11
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff ff54 	bl	8007d76 <_I2CWrite>
 8007ece:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ed6:	23ec      	movs	r3, #236	@ 0xec
 8007ed8:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007eda:	e00c      	b.n	8007ef6 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff ff67 	bl	8007db4 <_I2CRead>
 8007ee6:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007eee:	23ec      	movs	r3, #236	@ 0xec
 8007ef0:	75fb      	strb	r3, [r7, #23]
 8007ef2:	e000      	b.n	8007ef6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007ef4:	bf00      	nop
    return Status;
 8007ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007f16:	f107 030b 	add.w	r3, r7, #11
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff ff29 	bl	8007d76 <_I2CWrite>
 8007f24:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f2c:	23ec      	movs	r3, #236	@ 0xec
 8007f2e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007f30:	e015      	b.n	8007f5e <VL53L0X_RdWord+0x5a>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8007f32:	2202      	movs	r2, #2
 8007f34:	490d      	ldr	r1, [pc, #52]	@ (8007f6c <VL53L0X_RdWord+0x68>)
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff ff3c 	bl	8007db4 <_I2CRead>
 8007f3c:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f44:	23ec      	movs	r3, #236	@ 0xec
 8007f46:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007f48:	e009      	b.n	8007f5e <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007f4a:	4b08      	ldr	r3, [pc, #32]	@ (8007f6c <VL53L0X_RdWord+0x68>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	4a06      	ldr	r2, [pc, #24]	@ (8007f6c <VL53L0X_RdWord+0x68>)
 8007f54:	7852      	ldrb	r2, [r2, #1]
 8007f56:	4413      	add	r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8007f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	200005c8 	.word	0x200005c8

08007f70 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007f82:	f107 030b 	add.w	r3, r7, #11
 8007f86:	2201      	movs	r2, #1
 8007f88:	4619      	mov	r1, r3
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff fef3 	bl	8007d76 <_I2CWrite>
 8007f90:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f98:	23ec      	movs	r3, #236	@ 0xec
 8007f9a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007f9c:	e01b      	b.n	8007fd6 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	4910      	ldr	r1, [pc, #64]	@ (8007fe4 <VL53L0X_RdDWord+0x74>)
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff ff06 	bl	8007db4 <_I2CRead>
 8007fa8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007fb0:	23ec      	movs	r3, #236	@ 0xec
 8007fb2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007fb4:	e00f      	b.n	8007fd6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe4 <VL53L0X_RdDWord+0x74>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	061a      	lsls	r2, r3, #24
 8007fbc:	4b09      	ldr	r3, [pc, #36]	@ (8007fe4 <VL53L0X_RdDWord+0x74>)
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	441a      	add	r2, r3
 8007fc4:	4b07      	ldr	r3, [pc, #28]	@ (8007fe4 <VL53L0X_RdDWord+0x74>)
 8007fc6:	789b      	ldrb	r3, [r3, #2]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	4413      	add	r3, r2
 8007fcc:	4a05      	ldr	r2, [pc, #20]	@ (8007fe4 <VL53L0X_RdDWord+0x74>)
 8007fce:	78d2      	ldrb	r2, [r2, #3]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]

done:
    return Status;
 8007fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200005c8 	.word	0x200005c8

08007fe8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800802c <VL53L0X_WrByte+0x44>)
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008002:	4a0a      	ldr	r2, [pc, #40]	@ (800802c <VL53L0X_WrByte+0x44>)
 8008004:	78bb      	ldrb	r3, [r7, #2]
 8008006:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008008:	2202      	movs	r2, #2
 800800a:	4908      	ldr	r1, [pc, #32]	@ (800802c <VL53L0X_WrByte+0x44>)
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff feb2 	bl	8007d76 <_I2CWrite>
 8008012:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800801a:	23ec      	movs	r3, #236	@ 0xec
 800801c:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800801e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	200005c8 	.word	0x200005c8

08008030 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
 800803c:	4613      	mov	r3, r2
 800803e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008044:	4a0e      	ldr	r2, [pc, #56]	@ (8008080 <VL53L0X_WrWord+0x50>)
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800804a:	883b      	ldrh	r3, [r7, #0]
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	b29b      	uxth	r3, r3
 8008050:	b2da      	uxtb	r2, r3
 8008052:	4b0b      	ldr	r3, [pc, #44]	@ (8008080 <VL53L0X_WrWord+0x50>)
 8008054:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008056:	883b      	ldrh	r3, [r7, #0]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <VL53L0X_WrWord+0x50>)
 800805c:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800805e:	2203      	movs	r2, #3
 8008060:	4907      	ldr	r1, [pc, #28]	@ (8008080 <VL53L0X_WrWord+0x50>)
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fe87 	bl	8007d76 <_I2CWrite>
 8008068:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008070:	23ec      	movs	r3, #236	@ 0xec
 8008072:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8008074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	200005c8 	.word	0x200005c8

08008084 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	461a      	mov	r2, r3
 8008092:	4603      	mov	r3, r0
 8008094:	70fb      	strb	r3, [r7, #3]
 8008096:	460b      	mov	r3, r1
 8008098:	70bb      	strb	r3, [r7, #2]
 800809a:	4613      	mov	r3, r2
 800809c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80080a2:	f107 020e 	add.w	r2, r7, #14
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fea4 	bl	8007df8 <VL53L0X_RdByte>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 80080b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d110      	bne.n	80080de <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 80080bc:	7bba      	ldrb	r2, [r7, #14]
 80080be:	78bb      	ldrb	r3, [r7, #2]
 80080c0:	4013      	ands	r3, r2
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	787b      	ldrb	r3, [r7, #1]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80080cc:	7bba      	ldrb	r2, [r7, #14]
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff ff88 	bl	8007fe8 <VL53L0X_WrByte>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
 80080dc:	e000      	b.n	80080e0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80080de:	bf00      	nop
done:
    return Status;
 80080e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80080f8:	2002      	movs	r0, #2
 80080fa:	f7f8 fe41 	bl	8000d80 <HAL_Delay>
    return status;
 80080fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <siprintf>:
 800810c:	b40e      	push	{r1, r2, r3}
 800810e:	b510      	push	{r4, lr}
 8008110:	b09d      	sub	sp, #116	@ 0x74
 8008112:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008114:	9002      	str	r0, [sp, #8]
 8008116:	9006      	str	r0, [sp, #24]
 8008118:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800811c:	480a      	ldr	r0, [pc, #40]	@ (8008148 <siprintf+0x3c>)
 800811e:	9107      	str	r1, [sp, #28]
 8008120:	9104      	str	r1, [sp, #16]
 8008122:	490a      	ldr	r1, [pc, #40]	@ (800814c <siprintf+0x40>)
 8008124:	f853 2b04 	ldr.w	r2, [r3], #4
 8008128:	9105      	str	r1, [sp, #20]
 800812a:	2400      	movs	r4, #0
 800812c:	a902      	add	r1, sp, #8
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008134:	f000 f9aa 	bl	800848c <_svfiprintf_r>
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	701c      	strb	r4, [r3, #0]
 800813c:	b01d      	add	sp, #116	@ 0x74
 800813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008142:	b003      	add	sp, #12
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	200002cc 	.word	0x200002cc
 800814c:	ffff0208 	.word	0xffff0208

08008150 <memset>:
 8008150:	4402      	add	r2, r0
 8008152:	4603      	mov	r3, r0
 8008154:	4293      	cmp	r3, r2
 8008156:	d100      	bne.n	800815a <memset+0xa>
 8008158:	4770      	bx	lr
 800815a:	f803 1b01 	strb.w	r1, [r3], #1
 800815e:	e7f9      	b.n	8008154 <memset+0x4>

08008160 <__errno>:
 8008160:	4b01      	ldr	r3, [pc, #4]	@ (8008168 <__errno+0x8>)
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	200002cc 	.word	0x200002cc

0800816c <__libc_init_array>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4d0d      	ldr	r5, [pc, #52]	@ (80081a4 <__libc_init_array+0x38>)
 8008170:	4c0d      	ldr	r4, [pc, #52]	@ (80081a8 <__libc_init_array+0x3c>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	2600      	movs	r6, #0
 8008178:	42a6      	cmp	r6, r4
 800817a:	d109      	bne.n	8008190 <__libc_init_array+0x24>
 800817c:	4d0b      	ldr	r5, [pc, #44]	@ (80081ac <__libc_init_array+0x40>)
 800817e:	4c0c      	ldr	r4, [pc, #48]	@ (80081b0 <__libc_init_array+0x44>)
 8008180:	f000 fc6c 	bl	8008a5c <_init>
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	10a4      	asrs	r4, r4, #2
 8008188:	2600      	movs	r6, #0
 800818a:	42a6      	cmp	r6, r4
 800818c:	d105      	bne.n	800819a <__libc_init_array+0x2e>
 800818e:	bd70      	pop	{r4, r5, r6, pc}
 8008190:	f855 3b04 	ldr.w	r3, [r5], #4
 8008194:	4798      	blx	r3
 8008196:	3601      	adds	r6, #1
 8008198:	e7ee      	b.n	8008178 <__libc_init_array+0xc>
 800819a:	f855 3b04 	ldr.w	r3, [r5], #4
 800819e:	4798      	blx	r3
 80081a0:	3601      	adds	r6, #1
 80081a2:	e7f2      	b.n	800818a <__libc_init_array+0x1e>
 80081a4:	08008afc 	.word	0x08008afc
 80081a8:	08008afc 	.word	0x08008afc
 80081ac:	08008afc 	.word	0x08008afc
 80081b0:	08008b00 	.word	0x08008b00

080081b4 <__retarget_lock_acquire_recursive>:
 80081b4:	4770      	bx	lr

080081b6 <__retarget_lock_release_recursive>:
 80081b6:	4770      	bx	lr

080081b8 <strcpy>:
 80081b8:	4603      	mov	r3, r0
 80081ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081be:	f803 2b01 	strb.w	r2, [r3], #1
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d1f9      	bne.n	80081ba <strcpy+0x2>
 80081c6:	4770      	bx	lr

080081c8 <memcpy>:
 80081c8:	440a      	add	r2, r1
 80081ca:	4291      	cmp	r1, r2
 80081cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d0:	d100      	bne.n	80081d4 <memcpy+0xc>
 80081d2:	4770      	bx	lr
 80081d4:	b510      	push	{r4, lr}
 80081d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081de:	4291      	cmp	r1, r2
 80081e0:	d1f9      	bne.n	80081d6 <memcpy+0xe>
 80081e2:	bd10      	pop	{r4, pc}

080081e4 <_free_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4605      	mov	r5, r0
 80081e8:	2900      	cmp	r1, #0
 80081ea:	d041      	beq.n	8008270 <_free_r+0x8c>
 80081ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f0:	1f0c      	subs	r4, r1, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bfb8      	it	lt
 80081f6:	18e4      	addlt	r4, r4, r3
 80081f8:	f000 f8e0 	bl	80083bc <__malloc_lock>
 80081fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008274 <_free_r+0x90>)
 80081fe:	6813      	ldr	r3, [r2, #0]
 8008200:	b933      	cbnz	r3, 8008210 <_free_r+0x2c>
 8008202:	6063      	str	r3, [r4, #4]
 8008204:	6014      	str	r4, [r2, #0]
 8008206:	4628      	mov	r0, r5
 8008208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800820c:	f000 b8dc 	b.w	80083c8 <__malloc_unlock>
 8008210:	42a3      	cmp	r3, r4
 8008212:	d908      	bls.n	8008226 <_free_r+0x42>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	1821      	adds	r1, r4, r0
 8008218:	428b      	cmp	r3, r1
 800821a:	bf01      	itttt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	1809      	addeq	r1, r1, r0
 8008222:	6021      	streq	r1, [r4, #0]
 8008224:	e7ed      	b.n	8008202 <_free_r+0x1e>
 8008226:	461a      	mov	r2, r3
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	b10b      	cbz	r3, 8008230 <_free_r+0x4c>
 800822c:	42a3      	cmp	r3, r4
 800822e:	d9fa      	bls.n	8008226 <_free_r+0x42>
 8008230:	6811      	ldr	r1, [r2, #0]
 8008232:	1850      	adds	r0, r2, r1
 8008234:	42a0      	cmp	r0, r4
 8008236:	d10b      	bne.n	8008250 <_free_r+0x6c>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	4401      	add	r1, r0
 800823c:	1850      	adds	r0, r2, r1
 800823e:	4283      	cmp	r3, r0
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	d1e0      	bne.n	8008206 <_free_r+0x22>
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	6053      	str	r3, [r2, #4]
 800824a:	4408      	add	r0, r1
 800824c:	6010      	str	r0, [r2, #0]
 800824e:	e7da      	b.n	8008206 <_free_r+0x22>
 8008250:	d902      	bls.n	8008258 <_free_r+0x74>
 8008252:	230c      	movs	r3, #12
 8008254:	602b      	str	r3, [r5, #0]
 8008256:	e7d6      	b.n	8008206 <_free_r+0x22>
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	1821      	adds	r1, r4, r0
 800825c:	428b      	cmp	r3, r1
 800825e:	bf04      	itt	eq
 8008260:	6819      	ldreq	r1, [r3, #0]
 8008262:	685b      	ldreq	r3, [r3, #4]
 8008264:	6063      	str	r3, [r4, #4]
 8008266:	bf04      	itt	eq
 8008268:	1809      	addeq	r1, r1, r0
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	6054      	str	r4, [r2, #4]
 800826e:	e7ca      	b.n	8008206 <_free_r+0x22>
 8008270:	bd38      	pop	{r3, r4, r5, pc}
 8008272:	bf00      	nop
 8008274:	2000074c 	.word	0x2000074c

08008278 <sbrk_aligned>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	4e0f      	ldr	r6, [pc, #60]	@ (80082b8 <sbrk_aligned+0x40>)
 800827c:	460c      	mov	r4, r1
 800827e:	6831      	ldr	r1, [r6, #0]
 8008280:	4605      	mov	r5, r0
 8008282:	b911      	cbnz	r1, 800828a <sbrk_aligned+0x12>
 8008284:	f000 fba4 	bl	80089d0 <_sbrk_r>
 8008288:	6030      	str	r0, [r6, #0]
 800828a:	4621      	mov	r1, r4
 800828c:	4628      	mov	r0, r5
 800828e:	f000 fb9f 	bl	80089d0 <_sbrk_r>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	d103      	bne.n	800829e <sbrk_aligned+0x26>
 8008296:	f04f 34ff 	mov.w	r4, #4294967295
 800829a:	4620      	mov	r0, r4
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	1cc4      	adds	r4, r0, #3
 80082a0:	f024 0403 	bic.w	r4, r4, #3
 80082a4:	42a0      	cmp	r0, r4
 80082a6:	d0f8      	beq.n	800829a <sbrk_aligned+0x22>
 80082a8:	1a21      	subs	r1, r4, r0
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 fb90 	bl	80089d0 <_sbrk_r>
 80082b0:	3001      	adds	r0, #1
 80082b2:	d1f2      	bne.n	800829a <sbrk_aligned+0x22>
 80082b4:	e7ef      	b.n	8008296 <sbrk_aligned+0x1e>
 80082b6:	bf00      	nop
 80082b8:	20000748 	.word	0x20000748

080082bc <_malloc_r>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	1ccd      	adds	r5, r1, #3
 80082c2:	f025 0503 	bic.w	r5, r5, #3
 80082c6:	3508      	adds	r5, #8
 80082c8:	2d0c      	cmp	r5, #12
 80082ca:	bf38      	it	cc
 80082cc:	250c      	movcc	r5, #12
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	4606      	mov	r6, r0
 80082d2:	db01      	blt.n	80082d8 <_malloc_r+0x1c>
 80082d4:	42a9      	cmp	r1, r5
 80082d6:	d904      	bls.n	80082e2 <_malloc_r+0x26>
 80082d8:	230c      	movs	r3, #12
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	2000      	movs	r0, #0
 80082de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083b8 <_malloc_r+0xfc>
 80082e6:	f000 f869 	bl	80083bc <__malloc_lock>
 80082ea:	f8d8 3000 	ldr.w	r3, [r8]
 80082ee:	461c      	mov	r4, r3
 80082f0:	bb44      	cbnz	r4, 8008344 <_malloc_r+0x88>
 80082f2:	4629      	mov	r1, r5
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff ffbf 	bl	8008278 <sbrk_aligned>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	4604      	mov	r4, r0
 80082fe:	d158      	bne.n	80083b2 <_malloc_r+0xf6>
 8008300:	f8d8 4000 	ldr.w	r4, [r8]
 8008304:	4627      	mov	r7, r4
 8008306:	2f00      	cmp	r7, #0
 8008308:	d143      	bne.n	8008392 <_malloc_r+0xd6>
 800830a:	2c00      	cmp	r4, #0
 800830c:	d04b      	beq.n	80083a6 <_malloc_r+0xea>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	4639      	mov	r1, r7
 8008312:	4630      	mov	r0, r6
 8008314:	eb04 0903 	add.w	r9, r4, r3
 8008318:	f000 fb5a 	bl	80089d0 <_sbrk_r>
 800831c:	4581      	cmp	r9, r0
 800831e:	d142      	bne.n	80083a6 <_malloc_r+0xea>
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	1a6d      	subs	r5, r5, r1
 8008324:	4629      	mov	r1, r5
 8008326:	4630      	mov	r0, r6
 8008328:	f7ff ffa6 	bl	8008278 <sbrk_aligned>
 800832c:	3001      	adds	r0, #1
 800832e:	d03a      	beq.n	80083a6 <_malloc_r+0xea>
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	442b      	add	r3, r5
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	f8d8 3000 	ldr.w	r3, [r8]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	bb62      	cbnz	r2, 8008398 <_malloc_r+0xdc>
 800833e:	f8c8 7000 	str.w	r7, [r8]
 8008342:	e00f      	b.n	8008364 <_malloc_r+0xa8>
 8008344:	6822      	ldr	r2, [r4, #0]
 8008346:	1b52      	subs	r2, r2, r5
 8008348:	d420      	bmi.n	800838c <_malloc_r+0xd0>
 800834a:	2a0b      	cmp	r2, #11
 800834c:	d917      	bls.n	800837e <_malloc_r+0xc2>
 800834e:	1961      	adds	r1, r4, r5
 8008350:	42a3      	cmp	r3, r4
 8008352:	6025      	str	r5, [r4, #0]
 8008354:	bf18      	it	ne
 8008356:	6059      	strne	r1, [r3, #4]
 8008358:	6863      	ldr	r3, [r4, #4]
 800835a:	bf08      	it	eq
 800835c:	f8c8 1000 	streq.w	r1, [r8]
 8008360:	5162      	str	r2, [r4, r5]
 8008362:	604b      	str	r3, [r1, #4]
 8008364:	4630      	mov	r0, r6
 8008366:	f000 f82f 	bl	80083c8 <__malloc_unlock>
 800836a:	f104 000b 	add.w	r0, r4, #11
 800836e:	1d23      	adds	r3, r4, #4
 8008370:	f020 0007 	bic.w	r0, r0, #7
 8008374:	1ac2      	subs	r2, r0, r3
 8008376:	bf1c      	itt	ne
 8008378:	1a1b      	subne	r3, r3, r0
 800837a:	50a3      	strne	r3, [r4, r2]
 800837c:	e7af      	b.n	80082de <_malloc_r+0x22>
 800837e:	6862      	ldr	r2, [r4, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	bf0c      	ite	eq
 8008384:	f8c8 2000 	streq.w	r2, [r8]
 8008388:	605a      	strne	r2, [r3, #4]
 800838a:	e7eb      	b.n	8008364 <_malloc_r+0xa8>
 800838c:	4623      	mov	r3, r4
 800838e:	6864      	ldr	r4, [r4, #4]
 8008390:	e7ae      	b.n	80082f0 <_malloc_r+0x34>
 8008392:	463c      	mov	r4, r7
 8008394:	687f      	ldr	r7, [r7, #4]
 8008396:	e7b6      	b.n	8008306 <_malloc_r+0x4a>
 8008398:	461a      	mov	r2, r3
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	42a3      	cmp	r3, r4
 800839e:	d1fb      	bne.n	8008398 <_malloc_r+0xdc>
 80083a0:	2300      	movs	r3, #0
 80083a2:	6053      	str	r3, [r2, #4]
 80083a4:	e7de      	b.n	8008364 <_malloc_r+0xa8>
 80083a6:	230c      	movs	r3, #12
 80083a8:	6033      	str	r3, [r6, #0]
 80083aa:	4630      	mov	r0, r6
 80083ac:	f000 f80c 	bl	80083c8 <__malloc_unlock>
 80083b0:	e794      	b.n	80082dc <_malloc_r+0x20>
 80083b2:	6005      	str	r5, [r0, #0]
 80083b4:	e7d6      	b.n	8008364 <_malloc_r+0xa8>
 80083b6:	bf00      	nop
 80083b8:	2000074c 	.word	0x2000074c

080083bc <__malloc_lock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	@ (80083c4 <__malloc_lock+0x8>)
 80083be:	f7ff bef9 	b.w	80081b4 <__retarget_lock_acquire_recursive>
 80083c2:	bf00      	nop
 80083c4:	20000744 	.word	0x20000744

080083c8 <__malloc_unlock>:
 80083c8:	4801      	ldr	r0, [pc, #4]	@ (80083d0 <__malloc_unlock+0x8>)
 80083ca:	f7ff bef4 	b.w	80081b6 <__retarget_lock_release_recursive>
 80083ce:	bf00      	nop
 80083d0:	20000744 	.word	0x20000744

080083d4 <__ssputs_r>:
 80083d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	688e      	ldr	r6, [r1, #8]
 80083da:	461f      	mov	r7, r3
 80083dc:	42be      	cmp	r6, r7
 80083de:	680b      	ldr	r3, [r1, #0]
 80083e0:	4682      	mov	sl, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	4690      	mov	r8, r2
 80083e6:	d82d      	bhi.n	8008444 <__ssputs_r+0x70>
 80083e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083f0:	d026      	beq.n	8008440 <__ssputs_r+0x6c>
 80083f2:	6965      	ldr	r5, [r4, #20]
 80083f4:	6909      	ldr	r1, [r1, #16]
 80083f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083fa:	eba3 0901 	sub.w	r9, r3, r1
 80083fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008402:	1c7b      	adds	r3, r7, #1
 8008404:	444b      	add	r3, r9
 8008406:	106d      	asrs	r5, r5, #1
 8008408:	429d      	cmp	r5, r3
 800840a:	bf38      	it	cc
 800840c:	461d      	movcc	r5, r3
 800840e:	0553      	lsls	r3, r2, #21
 8008410:	d527      	bpl.n	8008462 <__ssputs_r+0x8e>
 8008412:	4629      	mov	r1, r5
 8008414:	f7ff ff52 	bl	80082bc <_malloc_r>
 8008418:	4606      	mov	r6, r0
 800841a:	b360      	cbz	r0, 8008476 <__ssputs_r+0xa2>
 800841c:	6921      	ldr	r1, [r4, #16]
 800841e:	464a      	mov	r2, r9
 8008420:	f7ff fed2 	bl	80081c8 <memcpy>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800842a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	6126      	str	r6, [r4, #16]
 8008432:	6165      	str	r5, [r4, #20]
 8008434:	444e      	add	r6, r9
 8008436:	eba5 0509 	sub.w	r5, r5, r9
 800843a:	6026      	str	r6, [r4, #0]
 800843c:	60a5      	str	r5, [r4, #8]
 800843e:	463e      	mov	r6, r7
 8008440:	42be      	cmp	r6, r7
 8008442:	d900      	bls.n	8008446 <__ssputs_r+0x72>
 8008444:	463e      	mov	r6, r7
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	4632      	mov	r2, r6
 800844a:	4641      	mov	r1, r8
 800844c:	f000 faa6 	bl	800899c <memmove>
 8008450:	68a3      	ldr	r3, [r4, #8]
 8008452:	1b9b      	subs	r3, r3, r6
 8008454:	60a3      	str	r3, [r4, #8]
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	4433      	add	r3, r6
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	2000      	movs	r0, #0
 800845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008462:	462a      	mov	r2, r5
 8008464:	f000 fac4 	bl	80089f0 <_realloc_r>
 8008468:	4606      	mov	r6, r0
 800846a:	2800      	cmp	r0, #0
 800846c:	d1e0      	bne.n	8008430 <__ssputs_r+0x5c>
 800846e:	6921      	ldr	r1, [r4, #16]
 8008470:	4650      	mov	r0, sl
 8008472:	f7ff feb7 	bl	80081e4 <_free_r>
 8008476:	230c      	movs	r3, #12
 8008478:	f8ca 3000 	str.w	r3, [sl]
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	e7e9      	b.n	800845e <__ssputs_r+0x8a>
	...

0800848c <_svfiprintf_r>:
 800848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	4698      	mov	r8, r3
 8008492:	898b      	ldrh	r3, [r1, #12]
 8008494:	061b      	lsls	r3, r3, #24
 8008496:	b09d      	sub	sp, #116	@ 0x74
 8008498:	4607      	mov	r7, r0
 800849a:	460d      	mov	r5, r1
 800849c:	4614      	mov	r4, r2
 800849e:	d510      	bpl.n	80084c2 <_svfiprintf_r+0x36>
 80084a0:	690b      	ldr	r3, [r1, #16]
 80084a2:	b973      	cbnz	r3, 80084c2 <_svfiprintf_r+0x36>
 80084a4:	2140      	movs	r1, #64	@ 0x40
 80084a6:	f7ff ff09 	bl	80082bc <_malloc_r>
 80084aa:	6028      	str	r0, [r5, #0]
 80084ac:	6128      	str	r0, [r5, #16]
 80084ae:	b930      	cbnz	r0, 80084be <_svfiprintf_r+0x32>
 80084b0:	230c      	movs	r3, #12
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295
 80084b8:	b01d      	add	sp, #116	@ 0x74
 80084ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084be:	2340      	movs	r3, #64	@ 0x40
 80084c0:	616b      	str	r3, [r5, #20]
 80084c2:	2300      	movs	r3, #0
 80084c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c6:	2320      	movs	r3, #32
 80084c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80084d0:	2330      	movs	r3, #48	@ 0x30
 80084d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008670 <_svfiprintf_r+0x1e4>
 80084d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084da:	f04f 0901 	mov.w	r9, #1
 80084de:	4623      	mov	r3, r4
 80084e0:	469a      	mov	sl, r3
 80084e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084e6:	b10a      	cbz	r2, 80084ec <_svfiprintf_r+0x60>
 80084e8:	2a25      	cmp	r2, #37	@ 0x25
 80084ea:	d1f9      	bne.n	80084e0 <_svfiprintf_r+0x54>
 80084ec:	ebba 0b04 	subs.w	fp, sl, r4
 80084f0:	d00b      	beq.n	800850a <_svfiprintf_r+0x7e>
 80084f2:	465b      	mov	r3, fp
 80084f4:	4622      	mov	r2, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	4638      	mov	r0, r7
 80084fa:	f7ff ff6b 	bl	80083d4 <__ssputs_r>
 80084fe:	3001      	adds	r0, #1
 8008500:	f000 80a7 	beq.w	8008652 <_svfiprintf_r+0x1c6>
 8008504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008506:	445a      	add	r2, fp
 8008508:	9209      	str	r2, [sp, #36]	@ 0x24
 800850a:	f89a 3000 	ldrb.w	r3, [sl]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 809f 	beq.w	8008652 <_svfiprintf_r+0x1c6>
 8008514:	2300      	movs	r3, #0
 8008516:	f04f 32ff 	mov.w	r2, #4294967295
 800851a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800851e:	f10a 0a01 	add.w	sl, sl, #1
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	9307      	str	r3, [sp, #28]
 8008526:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800852a:	931a      	str	r3, [sp, #104]	@ 0x68
 800852c:	4654      	mov	r4, sl
 800852e:	2205      	movs	r2, #5
 8008530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008534:	484e      	ldr	r0, [pc, #312]	@ (8008670 <_svfiprintf_r+0x1e4>)
 8008536:	f7f7 fe6b 	bl	8000210 <memchr>
 800853a:	9a04      	ldr	r2, [sp, #16]
 800853c:	b9d8      	cbnz	r0, 8008576 <_svfiprintf_r+0xea>
 800853e:	06d0      	lsls	r0, r2, #27
 8008540:	bf44      	itt	mi
 8008542:	2320      	movmi	r3, #32
 8008544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008548:	0711      	lsls	r1, r2, #28
 800854a:	bf44      	itt	mi
 800854c:	232b      	movmi	r3, #43	@ 0x2b
 800854e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008552:	f89a 3000 	ldrb.w	r3, [sl]
 8008556:	2b2a      	cmp	r3, #42	@ 0x2a
 8008558:	d015      	beq.n	8008586 <_svfiprintf_r+0xfa>
 800855a:	9a07      	ldr	r2, [sp, #28]
 800855c:	4654      	mov	r4, sl
 800855e:	2000      	movs	r0, #0
 8008560:	f04f 0c0a 	mov.w	ip, #10
 8008564:	4621      	mov	r1, r4
 8008566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800856a:	3b30      	subs	r3, #48	@ 0x30
 800856c:	2b09      	cmp	r3, #9
 800856e:	d94b      	bls.n	8008608 <_svfiprintf_r+0x17c>
 8008570:	b1b0      	cbz	r0, 80085a0 <_svfiprintf_r+0x114>
 8008572:	9207      	str	r2, [sp, #28]
 8008574:	e014      	b.n	80085a0 <_svfiprintf_r+0x114>
 8008576:	eba0 0308 	sub.w	r3, r0, r8
 800857a:	fa09 f303 	lsl.w	r3, r9, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	46a2      	mov	sl, r4
 8008584:	e7d2      	b.n	800852c <_svfiprintf_r+0xa0>
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	1d19      	adds	r1, r3, #4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	9103      	str	r1, [sp, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	bfbb      	ittet	lt
 8008592:	425b      	neglt	r3, r3
 8008594:	f042 0202 	orrlt.w	r2, r2, #2
 8008598:	9307      	strge	r3, [sp, #28]
 800859a:	9307      	strlt	r3, [sp, #28]
 800859c:	bfb8      	it	lt
 800859e:	9204      	strlt	r2, [sp, #16]
 80085a0:	7823      	ldrb	r3, [r4, #0]
 80085a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085a4:	d10a      	bne.n	80085bc <_svfiprintf_r+0x130>
 80085a6:	7863      	ldrb	r3, [r4, #1]
 80085a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085aa:	d132      	bne.n	8008612 <_svfiprintf_r+0x186>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	1d1a      	adds	r2, r3, #4
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	9203      	str	r2, [sp, #12]
 80085b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085b8:	3402      	adds	r4, #2
 80085ba:	9305      	str	r3, [sp, #20]
 80085bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008680 <_svfiprintf_r+0x1f4>
 80085c0:	7821      	ldrb	r1, [r4, #0]
 80085c2:	2203      	movs	r2, #3
 80085c4:	4650      	mov	r0, sl
 80085c6:	f7f7 fe23 	bl	8000210 <memchr>
 80085ca:	b138      	cbz	r0, 80085dc <_svfiprintf_r+0x150>
 80085cc:	9b04      	ldr	r3, [sp, #16]
 80085ce:	eba0 000a 	sub.w	r0, r0, sl
 80085d2:	2240      	movs	r2, #64	@ 0x40
 80085d4:	4082      	lsls	r2, r0
 80085d6:	4313      	orrs	r3, r2
 80085d8:	3401      	adds	r4, #1
 80085da:	9304      	str	r3, [sp, #16]
 80085dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e0:	4824      	ldr	r0, [pc, #144]	@ (8008674 <_svfiprintf_r+0x1e8>)
 80085e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085e6:	2206      	movs	r2, #6
 80085e8:	f7f7 fe12 	bl	8000210 <memchr>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d036      	beq.n	800865e <_svfiprintf_r+0x1d2>
 80085f0:	4b21      	ldr	r3, [pc, #132]	@ (8008678 <_svfiprintf_r+0x1ec>)
 80085f2:	bb1b      	cbnz	r3, 800863c <_svfiprintf_r+0x1b0>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	3307      	adds	r3, #7
 80085f8:	f023 0307 	bic.w	r3, r3, #7
 80085fc:	3308      	adds	r3, #8
 80085fe:	9303      	str	r3, [sp, #12]
 8008600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008602:	4433      	add	r3, r6
 8008604:	9309      	str	r3, [sp, #36]	@ 0x24
 8008606:	e76a      	b.n	80084de <_svfiprintf_r+0x52>
 8008608:	fb0c 3202 	mla	r2, ip, r2, r3
 800860c:	460c      	mov	r4, r1
 800860e:	2001      	movs	r0, #1
 8008610:	e7a8      	b.n	8008564 <_svfiprintf_r+0xd8>
 8008612:	2300      	movs	r3, #0
 8008614:	3401      	adds	r4, #1
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	4619      	mov	r1, r3
 800861a:	f04f 0c0a 	mov.w	ip, #10
 800861e:	4620      	mov	r0, r4
 8008620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008624:	3a30      	subs	r2, #48	@ 0x30
 8008626:	2a09      	cmp	r2, #9
 8008628:	d903      	bls.n	8008632 <_svfiprintf_r+0x1a6>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0c6      	beq.n	80085bc <_svfiprintf_r+0x130>
 800862e:	9105      	str	r1, [sp, #20]
 8008630:	e7c4      	b.n	80085bc <_svfiprintf_r+0x130>
 8008632:	fb0c 2101 	mla	r1, ip, r1, r2
 8008636:	4604      	mov	r4, r0
 8008638:	2301      	movs	r3, #1
 800863a:	e7f0      	b.n	800861e <_svfiprintf_r+0x192>
 800863c:	ab03      	add	r3, sp, #12
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	462a      	mov	r2, r5
 8008642:	4b0e      	ldr	r3, [pc, #56]	@ (800867c <_svfiprintf_r+0x1f0>)
 8008644:	a904      	add	r1, sp, #16
 8008646:	4638      	mov	r0, r7
 8008648:	f3af 8000 	nop.w
 800864c:	1c42      	adds	r2, r0, #1
 800864e:	4606      	mov	r6, r0
 8008650:	d1d6      	bne.n	8008600 <_svfiprintf_r+0x174>
 8008652:	89ab      	ldrh	r3, [r5, #12]
 8008654:	065b      	lsls	r3, r3, #25
 8008656:	f53f af2d 	bmi.w	80084b4 <_svfiprintf_r+0x28>
 800865a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800865c:	e72c      	b.n	80084b8 <_svfiprintf_r+0x2c>
 800865e:	ab03      	add	r3, sp, #12
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	462a      	mov	r2, r5
 8008664:	4b05      	ldr	r3, [pc, #20]	@ (800867c <_svfiprintf_r+0x1f0>)
 8008666:	a904      	add	r1, sp, #16
 8008668:	4638      	mov	r0, r7
 800866a:	f000 f879 	bl	8008760 <_printf_i>
 800866e:	e7ed      	b.n	800864c <_svfiprintf_r+0x1c0>
 8008670:	08008ac0 	.word	0x08008ac0
 8008674:	08008aca 	.word	0x08008aca
 8008678:	00000000 	.word	0x00000000
 800867c:	080083d5 	.word	0x080083d5
 8008680:	08008ac6 	.word	0x08008ac6

08008684 <_printf_common>:
 8008684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	4616      	mov	r6, r2
 800868a:	4698      	mov	r8, r3
 800868c:	688a      	ldr	r2, [r1, #8]
 800868e:	690b      	ldr	r3, [r1, #16]
 8008690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008694:	4293      	cmp	r3, r2
 8008696:	bfb8      	it	lt
 8008698:	4613      	movlt	r3, r2
 800869a:	6033      	str	r3, [r6, #0]
 800869c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086a0:	4607      	mov	r7, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	b10a      	cbz	r2, 80086aa <_printf_common+0x26>
 80086a6:	3301      	adds	r3, #1
 80086a8:	6033      	str	r3, [r6, #0]
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	0699      	lsls	r1, r3, #26
 80086ae:	bf42      	ittt	mi
 80086b0:	6833      	ldrmi	r3, [r6, #0]
 80086b2:	3302      	addmi	r3, #2
 80086b4:	6033      	strmi	r3, [r6, #0]
 80086b6:	6825      	ldr	r5, [r4, #0]
 80086b8:	f015 0506 	ands.w	r5, r5, #6
 80086bc:	d106      	bne.n	80086cc <_printf_common+0x48>
 80086be:	f104 0a19 	add.w	sl, r4, #25
 80086c2:	68e3      	ldr	r3, [r4, #12]
 80086c4:	6832      	ldr	r2, [r6, #0]
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	42ab      	cmp	r3, r5
 80086ca:	dc26      	bgt.n	800871a <_printf_common+0x96>
 80086cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086d0:	6822      	ldr	r2, [r4, #0]
 80086d2:	3b00      	subs	r3, #0
 80086d4:	bf18      	it	ne
 80086d6:	2301      	movne	r3, #1
 80086d8:	0692      	lsls	r2, r2, #26
 80086da:	d42b      	bmi.n	8008734 <_printf_common+0xb0>
 80086dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086e0:	4641      	mov	r1, r8
 80086e2:	4638      	mov	r0, r7
 80086e4:	47c8      	blx	r9
 80086e6:	3001      	adds	r0, #1
 80086e8:	d01e      	beq.n	8008728 <_printf_common+0xa4>
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	6922      	ldr	r2, [r4, #16]
 80086ee:	f003 0306 	and.w	r3, r3, #6
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	bf02      	ittt	eq
 80086f6:	68e5      	ldreq	r5, [r4, #12]
 80086f8:	6833      	ldreq	r3, [r6, #0]
 80086fa:	1aed      	subeq	r5, r5, r3
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	bf0c      	ite	eq
 8008700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008704:	2500      	movne	r5, #0
 8008706:	4293      	cmp	r3, r2
 8008708:	bfc4      	itt	gt
 800870a:	1a9b      	subgt	r3, r3, r2
 800870c:	18ed      	addgt	r5, r5, r3
 800870e:	2600      	movs	r6, #0
 8008710:	341a      	adds	r4, #26
 8008712:	42b5      	cmp	r5, r6
 8008714:	d11a      	bne.n	800874c <_printf_common+0xc8>
 8008716:	2000      	movs	r0, #0
 8008718:	e008      	b.n	800872c <_printf_common+0xa8>
 800871a:	2301      	movs	r3, #1
 800871c:	4652      	mov	r2, sl
 800871e:	4641      	mov	r1, r8
 8008720:	4638      	mov	r0, r7
 8008722:	47c8      	blx	r9
 8008724:	3001      	adds	r0, #1
 8008726:	d103      	bne.n	8008730 <_printf_common+0xac>
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008730:	3501      	adds	r5, #1
 8008732:	e7c6      	b.n	80086c2 <_printf_common+0x3e>
 8008734:	18e1      	adds	r1, r4, r3
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	2030      	movs	r0, #48	@ 0x30
 800873a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800873e:	4422      	add	r2, r4
 8008740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008744:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008748:	3302      	adds	r3, #2
 800874a:	e7c7      	b.n	80086dc <_printf_common+0x58>
 800874c:	2301      	movs	r3, #1
 800874e:	4622      	mov	r2, r4
 8008750:	4641      	mov	r1, r8
 8008752:	4638      	mov	r0, r7
 8008754:	47c8      	blx	r9
 8008756:	3001      	adds	r0, #1
 8008758:	d0e6      	beq.n	8008728 <_printf_common+0xa4>
 800875a:	3601      	adds	r6, #1
 800875c:	e7d9      	b.n	8008712 <_printf_common+0x8e>
	...

08008760 <_printf_i>:
 8008760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008764:	7e0f      	ldrb	r7, [r1, #24]
 8008766:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008768:	2f78      	cmp	r7, #120	@ 0x78
 800876a:	4691      	mov	r9, r2
 800876c:	4680      	mov	r8, r0
 800876e:	460c      	mov	r4, r1
 8008770:	469a      	mov	sl, r3
 8008772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008776:	d807      	bhi.n	8008788 <_printf_i+0x28>
 8008778:	2f62      	cmp	r7, #98	@ 0x62
 800877a:	d80a      	bhi.n	8008792 <_printf_i+0x32>
 800877c:	2f00      	cmp	r7, #0
 800877e:	f000 80d1 	beq.w	8008924 <_printf_i+0x1c4>
 8008782:	2f58      	cmp	r7, #88	@ 0x58
 8008784:	f000 80b8 	beq.w	80088f8 <_printf_i+0x198>
 8008788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800878c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008790:	e03a      	b.n	8008808 <_printf_i+0xa8>
 8008792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008796:	2b15      	cmp	r3, #21
 8008798:	d8f6      	bhi.n	8008788 <_printf_i+0x28>
 800879a:	a101      	add	r1, pc, #4	@ (adr r1, 80087a0 <_printf_i+0x40>)
 800879c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087a0:	080087f9 	.word	0x080087f9
 80087a4:	0800880d 	.word	0x0800880d
 80087a8:	08008789 	.word	0x08008789
 80087ac:	08008789 	.word	0x08008789
 80087b0:	08008789 	.word	0x08008789
 80087b4:	08008789 	.word	0x08008789
 80087b8:	0800880d 	.word	0x0800880d
 80087bc:	08008789 	.word	0x08008789
 80087c0:	08008789 	.word	0x08008789
 80087c4:	08008789 	.word	0x08008789
 80087c8:	08008789 	.word	0x08008789
 80087cc:	0800890b 	.word	0x0800890b
 80087d0:	08008837 	.word	0x08008837
 80087d4:	080088c5 	.word	0x080088c5
 80087d8:	08008789 	.word	0x08008789
 80087dc:	08008789 	.word	0x08008789
 80087e0:	0800892d 	.word	0x0800892d
 80087e4:	08008789 	.word	0x08008789
 80087e8:	08008837 	.word	0x08008837
 80087ec:	08008789 	.word	0x08008789
 80087f0:	08008789 	.word	0x08008789
 80087f4:	080088cd 	.word	0x080088cd
 80087f8:	6833      	ldr	r3, [r6, #0]
 80087fa:	1d1a      	adds	r2, r3, #4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6032      	str	r2, [r6, #0]
 8008800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008808:	2301      	movs	r3, #1
 800880a:	e09c      	b.n	8008946 <_printf_i+0x1e6>
 800880c:	6833      	ldr	r3, [r6, #0]
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	1d19      	adds	r1, r3, #4
 8008812:	6031      	str	r1, [r6, #0]
 8008814:	0606      	lsls	r6, r0, #24
 8008816:	d501      	bpl.n	800881c <_printf_i+0xbc>
 8008818:	681d      	ldr	r5, [r3, #0]
 800881a:	e003      	b.n	8008824 <_printf_i+0xc4>
 800881c:	0645      	lsls	r5, r0, #25
 800881e:	d5fb      	bpl.n	8008818 <_printf_i+0xb8>
 8008820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008824:	2d00      	cmp	r5, #0
 8008826:	da03      	bge.n	8008830 <_printf_i+0xd0>
 8008828:	232d      	movs	r3, #45	@ 0x2d
 800882a:	426d      	negs	r5, r5
 800882c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008830:	4858      	ldr	r0, [pc, #352]	@ (8008994 <_printf_i+0x234>)
 8008832:	230a      	movs	r3, #10
 8008834:	e011      	b.n	800885a <_printf_i+0xfa>
 8008836:	6821      	ldr	r1, [r4, #0]
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	0608      	lsls	r0, r1, #24
 800883c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008840:	d402      	bmi.n	8008848 <_printf_i+0xe8>
 8008842:	0649      	lsls	r1, r1, #25
 8008844:	bf48      	it	mi
 8008846:	b2ad      	uxthmi	r5, r5
 8008848:	2f6f      	cmp	r7, #111	@ 0x6f
 800884a:	4852      	ldr	r0, [pc, #328]	@ (8008994 <_printf_i+0x234>)
 800884c:	6033      	str	r3, [r6, #0]
 800884e:	bf14      	ite	ne
 8008850:	230a      	movne	r3, #10
 8008852:	2308      	moveq	r3, #8
 8008854:	2100      	movs	r1, #0
 8008856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800885a:	6866      	ldr	r6, [r4, #4]
 800885c:	60a6      	str	r6, [r4, #8]
 800885e:	2e00      	cmp	r6, #0
 8008860:	db05      	blt.n	800886e <_printf_i+0x10e>
 8008862:	6821      	ldr	r1, [r4, #0]
 8008864:	432e      	orrs	r6, r5
 8008866:	f021 0104 	bic.w	r1, r1, #4
 800886a:	6021      	str	r1, [r4, #0]
 800886c:	d04b      	beq.n	8008906 <_printf_i+0x1a6>
 800886e:	4616      	mov	r6, r2
 8008870:	fbb5 f1f3 	udiv	r1, r5, r3
 8008874:	fb03 5711 	mls	r7, r3, r1, r5
 8008878:	5dc7      	ldrb	r7, [r0, r7]
 800887a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800887e:	462f      	mov	r7, r5
 8008880:	42bb      	cmp	r3, r7
 8008882:	460d      	mov	r5, r1
 8008884:	d9f4      	bls.n	8008870 <_printf_i+0x110>
 8008886:	2b08      	cmp	r3, #8
 8008888:	d10b      	bne.n	80088a2 <_printf_i+0x142>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	07df      	lsls	r7, r3, #31
 800888e:	d508      	bpl.n	80088a2 <_printf_i+0x142>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	6861      	ldr	r1, [r4, #4]
 8008894:	4299      	cmp	r1, r3
 8008896:	bfde      	ittt	le
 8008898:	2330      	movle	r3, #48	@ 0x30
 800889a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800889e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088a2:	1b92      	subs	r2, r2, r6
 80088a4:	6122      	str	r2, [r4, #16]
 80088a6:	f8cd a000 	str.w	sl, [sp]
 80088aa:	464b      	mov	r3, r9
 80088ac:	aa03      	add	r2, sp, #12
 80088ae:	4621      	mov	r1, r4
 80088b0:	4640      	mov	r0, r8
 80088b2:	f7ff fee7 	bl	8008684 <_printf_common>
 80088b6:	3001      	adds	r0, #1
 80088b8:	d14a      	bne.n	8008950 <_printf_i+0x1f0>
 80088ba:	f04f 30ff 	mov.w	r0, #4294967295
 80088be:	b004      	add	sp, #16
 80088c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	f043 0320 	orr.w	r3, r3, #32
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	4832      	ldr	r0, [pc, #200]	@ (8008998 <_printf_i+0x238>)
 80088ce:	2778      	movs	r7, #120	@ 0x78
 80088d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	6831      	ldr	r1, [r6, #0]
 80088d8:	061f      	lsls	r7, r3, #24
 80088da:	f851 5b04 	ldr.w	r5, [r1], #4
 80088de:	d402      	bmi.n	80088e6 <_printf_i+0x186>
 80088e0:	065f      	lsls	r7, r3, #25
 80088e2:	bf48      	it	mi
 80088e4:	b2ad      	uxthmi	r5, r5
 80088e6:	6031      	str	r1, [r6, #0]
 80088e8:	07d9      	lsls	r1, r3, #31
 80088ea:	bf44      	itt	mi
 80088ec:	f043 0320 	orrmi.w	r3, r3, #32
 80088f0:	6023      	strmi	r3, [r4, #0]
 80088f2:	b11d      	cbz	r5, 80088fc <_printf_i+0x19c>
 80088f4:	2310      	movs	r3, #16
 80088f6:	e7ad      	b.n	8008854 <_printf_i+0xf4>
 80088f8:	4826      	ldr	r0, [pc, #152]	@ (8008994 <_printf_i+0x234>)
 80088fa:	e7e9      	b.n	80088d0 <_printf_i+0x170>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	f023 0320 	bic.w	r3, r3, #32
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	e7f6      	b.n	80088f4 <_printf_i+0x194>
 8008906:	4616      	mov	r6, r2
 8008908:	e7bd      	b.n	8008886 <_printf_i+0x126>
 800890a:	6833      	ldr	r3, [r6, #0]
 800890c:	6825      	ldr	r5, [r4, #0]
 800890e:	6961      	ldr	r1, [r4, #20]
 8008910:	1d18      	adds	r0, r3, #4
 8008912:	6030      	str	r0, [r6, #0]
 8008914:	062e      	lsls	r6, r5, #24
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	d501      	bpl.n	800891e <_printf_i+0x1be>
 800891a:	6019      	str	r1, [r3, #0]
 800891c:	e002      	b.n	8008924 <_printf_i+0x1c4>
 800891e:	0668      	lsls	r0, r5, #25
 8008920:	d5fb      	bpl.n	800891a <_printf_i+0x1ba>
 8008922:	8019      	strh	r1, [r3, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	4616      	mov	r6, r2
 800892a:	e7bc      	b.n	80088a6 <_printf_i+0x146>
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	6032      	str	r2, [r6, #0]
 8008932:	681e      	ldr	r6, [r3, #0]
 8008934:	6862      	ldr	r2, [r4, #4]
 8008936:	2100      	movs	r1, #0
 8008938:	4630      	mov	r0, r6
 800893a:	f7f7 fc69 	bl	8000210 <memchr>
 800893e:	b108      	cbz	r0, 8008944 <_printf_i+0x1e4>
 8008940:	1b80      	subs	r0, r0, r6
 8008942:	6060      	str	r0, [r4, #4]
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	2300      	movs	r3, #0
 800894a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800894e:	e7aa      	b.n	80088a6 <_printf_i+0x146>
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	4632      	mov	r2, r6
 8008954:	4649      	mov	r1, r9
 8008956:	4640      	mov	r0, r8
 8008958:	47d0      	blx	sl
 800895a:	3001      	adds	r0, #1
 800895c:	d0ad      	beq.n	80088ba <_printf_i+0x15a>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	079b      	lsls	r3, r3, #30
 8008962:	d413      	bmi.n	800898c <_printf_i+0x22c>
 8008964:	68e0      	ldr	r0, [r4, #12]
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	4298      	cmp	r0, r3
 800896a:	bfb8      	it	lt
 800896c:	4618      	movlt	r0, r3
 800896e:	e7a6      	b.n	80088be <_printf_i+0x15e>
 8008970:	2301      	movs	r3, #1
 8008972:	4632      	mov	r2, r6
 8008974:	4649      	mov	r1, r9
 8008976:	4640      	mov	r0, r8
 8008978:	47d0      	blx	sl
 800897a:	3001      	adds	r0, #1
 800897c:	d09d      	beq.n	80088ba <_printf_i+0x15a>
 800897e:	3501      	adds	r5, #1
 8008980:	68e3      	ldr	r3, [r4, #12]
 8008982:	9903      	ldr	r1, [sp, #12]
 8008984:	1a5b      	subs	r3, r3, r1
 8008986:	42ab      	cmp	r3, r5
 8008988:	dcf2      	bgt.n	8008970 <_printf_i+0x210>
 800898a:	e7eb      	b.n	8008964 <_printf_i+0x204>
 800898c:	2500      	movs	r5, #0
 800898e:	f104 0619 	add.w	r6, r4, #25
 8008992:	e7f5      	b.n	8008980 <_printf_i+0x220>
 8008994:	08008ad1 	.word	0x08008ad1
 8008998:	08008ae2 	.word	0x08008ae2

0800899c <memmove>:
 800899c:	4288      	cmp	r0, r1
 800899e:	b510      	push	{r4, lr}
 80089a0:	eb01 0402 	add.w	r4, r1, r2
 80089a4:	d902      	bls.n	80089ac <memmove+0x10>
 80089a6:	4284      	cmp	r4, r0
 80089a8:	4623      	mov	r3, r4
 80089aa:	d807      	bhi.n	80089bc <memmove+0x20>
 80089ac:	1e43      	subs	r3, r0, #1
 80089ae:	42a1      	cmp	r1, r4
 80089b0:	d008      	beq.n	80089c4 <memmove+0x28>
 80089b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ba:	e7f8      	b.n	80089ae <memmove+0x12>
 80089bc:	4402      	add	r2, r0
 80089be:	4601      	mov	r1, r0
 80089c0:	428a      	cmp	r2, r1
 80089c2:	d100      	bne.n	80089c6 <memmove+0x2a>
 80089c4:	bd10      	pop	{r4, pc}
 80089c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ce:	e7f7      	b.n	80089c0 <memmove+0x24>

080089d0 <_sbrk_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	@ (80089ec <_sbrk_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7f8 f8ec 	bl	8000bb8 <_sbrk>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_sbrk_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_sbrk_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000740 	.word	0x20000740

080089f0 <_realloc_r>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4607      	mov	r7, r0
 80089f6:	4614      	mov	r4, r2
 80089f8:	460d      	mov	r5, r1
 80089fa:	b921      	cbnz	r1, 8008a06 <_realloc_r+0x16>
 80089fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	4611      	mov	r1, r2
 8008a02:	f7ff bc5b 	b.w	80082bc <_malloc_r>
 8008a06:	b92a      	cbnz	r2, 8008a14 <_realloc_r+0x24>
 8008a08:	f7ff fbec 	bl	80081e4 <_free_r>
 8008a0c:	4625      	mov	r5, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	f000 f81a 	bl	8008a4c <_malloc_usable_size_r>
 8008a18:	4284      	cmp	r4, r0
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	d802      	bhi.n	8008a24 <_realloc_r+0x34>
 8008a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a22:	d8f4      	bhi.n	8008a0e <_realloc_r+0x1e>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4638      	mov	r0, r7
 8008a28:	f7ff fc48 	bl	80082bc <_malloc_r>
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	b908      	cbnz	r0, 8008a34 <_realloc_r+0x44>
 8008a30:	4645      	mov	r5, r8
 8008a32:	e7ec      	b.n	8008a0e <_realloc_r+0x1e>
 8008a34:	42b4      	cmp	r4, r6
 8008a36:	4622      	mov	r2, r4
 8008a38:	4629      	mov	r1, r5
 8008a3a:	bf28      	it	cs
 8008a3c:	4632      	movcs	r2, r6
 8008a3e:	f7ff fbc3 	bl	80081c8 <memcpy>
 8008a42:	4629      	mov	r1, r5
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff fbcd 	bl	80081e4 <_free_r>
 8008a4a:	e7f1      	b.n	8008a30 <_realloc_r+0x40>

08008a4c <_malloc_usable_size_r>:
 8008a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a50:	1f18      	subs	r0, r3, #4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bfbc      	itt	lt
 8008a56:	580b      	ldrlt	r3, [r1, r0]
 8008a58:	18c0      	addlt	r0, r0, r3
 8008a5a:	4770      	bx	lr

08008a5c <_init>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	bf00      	nop
 8008a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a62:	bc08      	pop	{r3}
 8008a64:	469e      	mov	lr, r3
 8008a66:	4770      	bx	lr

08008a68 <_fini>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr
