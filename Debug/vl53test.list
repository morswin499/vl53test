
vl53test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008ebc  08008ebc  00009ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f3c  08008f3c  0000a31c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f3c  08008f3c  00009f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f44  08008f44  0000a31c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f44  08008f44  00009f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f48  08008f48  00009f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08008f4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  2000031c  08009268  0000a31c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  08009268  0000a74c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a31c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013813  00000000  00000000  0000a34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230a  00000000  00000000  0001db5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9d  00000000  00000000  00020d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c2b  00000000  00000000  000218f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001226f  00000000  00000000  00044520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a7d  00000000  00000000  0005678f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012820c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004488  00000000  00000000  00128250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000031c 	.word	0x2000031c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ea4 	.word	0x08008ea4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000320 	.word	0x20000320
 800020c:	08008ea4 	.word	0x08008ea4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fb41 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8ab 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f96f 	bl	80008cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f943 	bl	8000878 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005f2:	f000 f913 	bl	800081c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
 80005f6:	494a      	ldr	r1, [pc, #296]	@ (8000720 <main+0x144>)
 80005f8:	484a      	ldr	r0, [pc, #296]	@ (8000724 <main+0x148>)
 80005fa:	f007 ffab 	bl	8008554 <siprintf>
 80005fe:	4603      	mov	r3, r0
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b49      	ldr	r3, [pc, #292]	@ (8000728 <main+0x14c>)
 8000604:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8000606:	4b48      	ldr	r3, [pc, #288]	@ (8000728 <main+0x14c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	4945      	ldr	r1, [pc, #276]	@ (8000724 <main+0x148>)
 8000610:	4846      	ldr	r0, [pc, #280]	@ (800072c <main+0x150>)
 8000612:	f002 fc85 	bl	8002f20 <HAL_UART_Transmit>

  Dev->I2cHandle = &hi2c1;
 8000616:	4b46      	ldr	r3, [pc, #280]	@ (8000730 <main+0x154>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a46      	ldr	r2, [pc, #280]	@ (8000734 <main+0x158>)
 800061c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  Dev->I2cDevAddr = 0x52;
 8000620:	4b43      	ldr	r3, [pc, #268]	@ (8000730 <main+0x154>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2252      	movs	r2, #82	@ 0x52
 8000626:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

  //HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
  HAL_Delay(20);
 800062a:	2014      	movs	r0, #20
 800062c:	f000 fb8e 	bl	8000d4c <HAL_Delay>
 // HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
  HAL_Delay(20);
 8000630:	2014      	movs	r0, #20
 8000632:	f000 fb8b 	bl	8000d4c <HAL_Delay>

  //
  // VL53L0X init for Single Measurement
  //

  VL53L0X_WaitDeviceBooted( Dev );
 8000636:	4b3e      	ldr	r3, [pc, #248]	@ (8000730 <main+0x154>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f003 faca 	bl	8003bd4 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 8000640:	4b3b      	ldr	r3, [pc, #236]	@ (8000730 <main+0x154>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f003 f83b 	bl	80036c0 <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 800064a:	4b39      	ldr	r3, [pc, #228]	@ (8000730 <main+0x154>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f940 	bl	80038d4 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000654:	4b36      	ldr	r3, [pc, #216]	@ (8000730 <main+0x154>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1c7a      	adds	r2, r7, #1
 800065a:	1cb9      	adds	r1, r7, #2
 800065c:	4618      	mov	r0, r3
 800065e:	f004 f817 	bl	8004690 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000662:	4b33      	ldr	r3, [pc, #204]	@ (8000730 <main+0x154>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1cfa      	adds	r2, r7, #3
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fc5c 	bl	8004f28 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000670:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <main+0x154>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fb4a 	bl	8003d10 <VL53L0X_SetDeviceMode>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <main+0x154>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2201      	movs	r2, #1
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fdfd 	bl	8004284 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <main+0x154>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2201      	movs	r2, #1
 8000690:	2101      	movs	r1, #1
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fdf6 	bl	8004284 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <main+0x154>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f641 1299 	movw	r2, #6553	@ 0x1999
 80006a0:	2101      	movs	r1, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fe9e 	bl	80043e4 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80006a8:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <main+0x154>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fe96 	bl	80043e4 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <main+0x154>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fb83 	bl	8003dcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <main+0x154>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2212      	movs	r2, #18
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fba2 	bl	8003e18 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <main+0x154>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	220e      	movs	r2, #14
 80006da:	2101      	movs	r1, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fb9b 	bl	8003e18 <VL53L0X_SetVcselPulsePeriod>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <main+0x154>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4914      	ldr	r1, [pc, #80]	@ (8000738 <main+0x15c>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 fa35 	bl	8004b58 <VL53L0X_PerformSingleRangingMeasurement>

	  if(RangingData.RangeStatus == 0)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <main+0x15c>)
 80006f0:	7e1b      	ldrb	r3, [r3, #24]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f5      	bne.n	80006e2 <main+0x106>
	  {
		  MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <main+0x15c>)
 80006f8:	891b      	ldrh	r3, [r3, #8]
 80006fa:	461a      	mov	r2, r3
 80006fc:	490f      	ldr	r1, [pc, #60]	@ (800073c <main+0x160>)
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <main+0x148>)
 8000700:	f007 ff28 	bl	8008554 <siprintf>
 8000704:	4603      	mov	r3, r0
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <main+0x14c>)
 800070a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <main+0x14c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	2364      	movs	r3, #100	@ 0x64
 8000714:	4903      	ldr	r1, [pc, #12]	@ (8000724 <main+0x148>)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <main+0x150>)
 8000718:	f002 fc02 	bl	8002f20 <HAL_UART_Transmit>
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800071c:	e7e1      	b.n	80006e2 <main+0x106>
 800071e:	bf00      	nop
 8000720:	08008ebc 	.word	0x08008ebc
 8000724:	200003d4 	.word	0x200003d4
 8000728:	20000414 	.word	0x20000414
 800072c:	2000038c 	.word	0x2000038c
 8000730:	20000000 	.word	0x20000000
 8000734:	20000338 	.word	0x20000338
 8000738:	20000418 	.word	0x20000418
 800073c:	08008ed8 	.word	0x08008ed8

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	@ 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2234      	movs	r2, #52	@ 0x34
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f007 ff22 	bl	8008598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b2a      	ldr	r3, [pc, #168]	@ (8000814 <SystemClock_Config+0xd4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	4a29      	ldr	r2, [pc, #164]	@ (8000814 <SystemClock_Config+0xd4>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	@ 0x40
 8000774:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <SystemClock_Config+0xd4>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800078c:	4a22      	ldr	r2, [pc, #136]	@ (8000818 <SystemClock_Config+0xd8>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <SystemClock_Config+0xd8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007be:	2304      	movs	r3, #4
 80007c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 f8b8 	bl	8002944 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007da:	f000 f8e5 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2302      	movs	r3, #2
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fd58 	bl	80022b0 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000806:	f000 f8cf 	bl	80009a8 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	@ 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C1_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <MX_I2C1_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C1_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <MX_I2C1_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_I2C1_Init+0x50>)
 800083a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_I2C1_Init+0x50>)
 800085a:	f000 fd2f 	bl	80012bc <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 f8a0 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000338 	.word	0x20000338
 8000870:	40005400 	.word	0x40005400
 8000874:	00061a80 	.word	0x00061a80

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f002 fae6 	bl	8002e80 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f875 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000038c 	.word	0x2000038c
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a2c      	ldr	r2, [pc, #176]	@ (800099c <MX_GPIO_Init+0xd0>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a25      	ldr	r2, [pc, #148]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b23      	ldr	r3, [pc, #140]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a17      	ldr	r2, [pc, #92]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	4812      	ldr	r0, [pc, #72]	@ (80009a0 <MX_GPIO_Init+0xd4>)
 8000958:	f000 fc96 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000962:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <MX_GPIO_Init+0xd8>)
 8000974:	f000 faf4 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000978:	2320      	movs	r3, #32
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_GPIO_Init+0xd4>)
 8000990:	f000 fae6 	bl	8000f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020800 	.word	0x40020800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <Error_Handler+0x8>

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f2:	2007      	movs	r0, #7
 80009f4:	f000 fa80 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	@ (8000a88 <HAL_I2C_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12c      	bne.n	8000a80 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a17      	ldr	r2, [pc, #92]	@ (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a54:	2304      	movs	r3, #4
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <HAL_I2C_MspInit+0x8c>)
 8000a60:	f000 fa7e 	bl	8000f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	4a07      	ldr	r2, [pc, #28]	@ (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_I2C_MspInit+0x88>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020400 	.word	0x40020400

08000a94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <HAL_UART_MspInit+0x8c>)
 8000b0a:	f000 fa29 	bl	8000f60 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 f8c7 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	@ (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f007 fcf8 	bl	80085a8 <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20020000 	.word	0x20020000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	200005bc 	.word	0x200005bc
 8000bec:	20000750 	.word	0x20000750

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c18:	f7ff ffea 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	@ (8000c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f007 fcb7 	bl	80085b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fcc9 	bl	80005dc <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8000c58:	08008f4c 	.word	0x08008f4c
  ldr r2, =_sbss
 8000c5c:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8000c60:	2000074c 	.word	0x2000074c

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <HAL_Init+0x40>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_Init+0x40>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_Init+0x40>)
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f931 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f808 	bl	8000cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fe8a 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023c00 	.word	0x40023c00

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <HAL_InitTick+0x54>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0x58>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f93b 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00e      	b.n	8000cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d80a      	bhi.n	8000cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ce8:	f000 f911 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4a06      	ldr	r2, [pc, #24]	@ (8000d08 <HAL_InitTick+0x5c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000004 	.word	0x20000004
 8000d04:	2000000c 	.word	0x2000000c
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	200005c0 	.word	0x200005c0

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	200005c0 	.word	0x200005c0

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff ffee 	bl	8000d34 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffde 	bl	8000d34 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000000c 	.word	0x2000000c

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff47 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5c 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb0 	bl	8000eb4 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e165      	b.n	8001248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8154 	bne.w	8001242 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80ae 	beq.w	8001242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_GPIO_Init+0x300>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001260 <HAL_GPIO_Init+0x300>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001260 <HAL_GPIO_Init+0x300>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a58      	ldr	r2, [pc, #352]	@ (8001264 <HAL_GPIO_Init+0x304>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	@ (8001268 <HAL_GPIO_Init+0x308>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x21a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	@ (800126c <HAL_GPIO_Init+0x30c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x216>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	@ (8001270 <HAL_GPIO_Init+0x310>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x212>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	@ (8001274 <HAL_GPIO_Init+0x314>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x20e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	@ (8001278 <HAL_GPIO_Init+0x318>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x20a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	@ (800127c <HAL_GPIO_Init+0x31c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x206>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	@ (8001280 <HAL_GPIO_Init+0x320>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x202>
 800115e:	2306      	movs	r3, #6
 8001160:	e00c      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001162:	2307      	movs	r3, #7
 8001164:	e00a      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001166:	2305      	movs	r3, #5
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800116a:	2304      	movs	r3, #4
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	@ (8001264 <HAL_GPIO_Init+0x304>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b3a      	ldr	r3, [pc, #232]	@ (8001284 <HAL_GPIO_Init+0x324>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a31      	ldr	r2, [pc, #196]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a26      	ldr	r2, [pc, #152]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <HAL_GPIO_Init+0x324>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_GPIO_Init+0x324>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123c:	4a11      	ldr	r2, [pc, #68]	@ (8001284 <HAL_GPIO_Init+0x324>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f ae96 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e12b      	b.n	8001526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d106      	bne.n	80012e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fb8e 	bl	8000a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2224      	movs	r2, #36	@ 0x24
 80012ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800130e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800131e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001320:	f001 f8b8 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a81      	ldr	r2, [pc, #516]	@ (8001530 <HAL_I2C_Init+0x274>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d807      	bhi.n	8001340 <HAL_I2C_Init+0x84>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a80      	ldr	r2, [pc, #512]	@ (8001534 <HAL_I2C_Init+0x278>)
 8001334:	4293      	cmp	r3, r2
 8001336:	bf94      	ite	ls
 8001338:	2301      	movls	r3, #1
 800133a:	2300      	movhi	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	e006      	b.n	800134e <HAL_I2C_Init+0x92>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4a7d      	ldr	r2, [pc, #500]	@ (8001538 <HAL_I2C_Init+0x27c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	bf94      	ite	ls
 8001348:	2301      	movls	r3, #1
 800134a:	2300      	movhi	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0e7      	b.n	8001526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4a78      	ldr	r2, [pc, #480]	@ (800153c <HAL_I2C_Init+0x280>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0c9b      	lsrs	r3, r3, #18
 8001360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a6a      	ldr	r2, [pc, #424]	@ (8001530 <HAL_I2C_Init+0x274>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d802      	bhi.n	8001390 <HAL_I2C_Init+0xd4>
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	e009      	b.n	80013a4 <HAL_I2C_Init+0xe8>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a69      	ldr	r2, [pc, #420]	@ (8001540 <HAL_I2C_Init+0x284>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	3301      	adds	r3, #1
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	495c      	ldr	r1, [pc, #368]	@ (8001530 <HAL_I2C_Init+0x274>)
 80013c0:	428b      	cmp	r3, r1
 80013c2:	d819      	bhi.n	80013f8 <HAL_I2C_Init+0x13c>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e59      	subs	r1, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d2:	1c59      	adds	r1, r3, #1
 80013d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013d8:	400b      	ands	r3, r1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <HAL_I2C_Init+0x138>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1e59      	subs	r1, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f2:	e051      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e04f      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d111      	bne.n	8001424 <HAL_I2C_Init+0x168>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e58      	subs	r0, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	440b      	add	r3, r1
 800140e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001412:	3301      	adds	r3, #1
 8001414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e012      	b.n	800144a <HAL_I2C_Init+0x18e>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	0099      	lsls	r1, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	fbb0 f3f3 	udiv	r3, r0, r3
 800143a:	3301      	adds	r3, #1
 800143c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_I2C_Init+0x196>
 800144e:	2301      	movs	r3, #1
 8001450:	e022      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10e      	bne.n	8001478 <HAL_I2C_Init+0x1bc>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1e58      	subs	r0, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6859      	ldr	r1, [r3, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	440b      	add	r3, r1
 8001468:	fbb0 f3f3 	udiv	r3, r0, r3
 800146c:	3301      	adds	r3, #1
 800146e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001476:	e00f      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1e58      	subs	r0, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	0099      	lsls	r1, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	fbb0 f3f3 	udiv	r3, r0, r3
 800148e:	3301      	adds	r3, #1
 8001490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001494:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	6809      	ldr	r1, [r1, #0]
 800149c:	4313      	orrs	r3, r2
 800149e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6911      	ldr	r1, [r2, #16]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68d2      	ldr	r2, [r2, #12]
 80014d2:	4311      	orrs	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	430b      	orrs	r3, r1
 80014da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2220      	movs	r2, #32
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	000186a0 	.word	0x000186a0
 8001534:	001e847f 	.word	0x001e847f
 8001538:	003d08ff 	.word	0x003d08ff
 800153c:	431bde83 	.word	0x431bde83
 8001540:	10624dd3 	.word	0x10624dd3

08001544 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af02      	add	r7, sp, #8
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	461a      	mov	r2, r3
 8001550:	460b      	mov	r3, r1
 8001552:	817b      	strh	r3, [r7, #10]
 8001554:	4613      	mov	r3, r2
 8001556:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fbec 	bl	8000d34 <HAL_GetTick>
 800155c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b20      	cmp	r3, #32
 8001568:	f040 80e0 	bne.w	800172c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2319      	movs	r3, #25
 8001572:	2201      	movs	r2, #1
 8001574:	4970      	ldr	r1, [pc, #448]	@ (8001738 <HAL_I2C_Master_Transmit+0x1f4>)
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fc64 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	e0d3      	b.n	800172e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_I2C_Master_Transmit+0x50>
 8001590:	2302      	movs	r3, #2
 8001592:	e0cc      	b.n	800172e <HAL_I2C_Master_Transmit+0x1ea>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d007      	beq.n	80015ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2221      	movs	r2, #33	@ 0x21
 80015ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2210      	movs	r2, #16
 80015d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	893a      	ldrh	r2, [r7, #8]
 80015ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4a50      	ldr	r2, [pc, #320]	@ (800173c <HAL_I2C_Master_Transmit+0x1f8>)
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015fc:	8979      	ldrh	r1, [r7, #10]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 face 	bl	8001ba4 <I2C_MasterRequestWrite>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e08d      	b.n	800172e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001628:	e066      	b.n	80016f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fd22 	bl	8002078 <I2C_WaitOnTXEFlagUntilTimeout>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00d      	beq.n	8001656 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2b04      	cmp	r3, #4
 8001640:	d107      	bne.n	8001652 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001650:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06b      	b.n	800172e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	3b01      	subs	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b04      	cmp	r3, #4
 8001692:	d11b      	bne.n	80016cc <HAL_I2C_Master_Transmit+0x188>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d017      	beq.n	80016cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	6a39      	ldr	r1, [r7, #32]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fd19 	bl	8002108 <I2C_WaitOnBTFFlagUntilTimeout>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00d      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d107      	bne.n	80016f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e01a      	b.n	800172e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d194      	bne.n	800162a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800170e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800172c:	2302      	movs	r3, #2
  }
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	00100002 	.word	0x00100002
 800173c:	ffff0000 	.word	0xffff0000

08001740 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	@ 0x30
 8001744:	af02      	add	r7, sp, #8
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	461a      	mov	r2, r3
 800174c:	460b      	mov	r3, r1
 800174e:	817b      	strh	r3, [r7, #10]
 8001750:	4613      	mov	r3, r2
 8001752:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff faee 	bl	8000d34 <HAL_GetTick>
 8001758:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b20      	cmp	r3, #32
 8001764:	f040 8217 	bne.w	8001b96 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2319      	movs	r3, #25
 800176e:	2201      	movs	r2, #1
 8001770:	497c      	ldr	r1, [pc, #496]	@ (8001964 <HAL_I2C_Master_Receive+0x224>)
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 fb66 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800177e:	2302      	movs	r3, #2
 8001780:	e20a      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_I2C_Master_Receive+0x50>
 800178c:	2302      	movs	r3, #2
 800178e:	e203      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d007      	beq.n	80017b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2222      	movs	r2, #34	@ 0x22
 80017ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2210      	movs	r2, #16
 80017d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	893a      	ldrh	r2, [r7, #8]
 80017e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4a5c      	ldr	r2, [pc, #368]	@ (8001968 <HAL_I2C_Master_Receive+0x228>)
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017f8:	8979      	ldrh	r1, [r7, #10]
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fa52 	bl	8001ca8 <I2C_MasterRequestRead>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1c4      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001812:	2b00      	cmp	r3, #0
 8001814:	d113      	bne.n	800183e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e198      	b.n	8001b70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001842:	2b01      	cmp	r3, #1
 8001844:	d11b      	bne.n	800187e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e178      	b.n	8001b70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	2b02      	cmp	r3, #2
 8001884:	d11b      	bne.n	80018be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001894:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	e158      	b.n	8001b70 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018e4:	e144      	b.n	8001b70 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	f200 80f1 	bhi.w	8001ad2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d123      	bne.n	8001940 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fc4b 	bl	8002198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e145      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800193e:	e117      	b.n	8001b70 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001944:	2b02      	cmp	r3, #2
 8001946:	d14e      	bne.n	80019e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800194e:	2200      	movs	r2, #0
 8001950:	4906      	ldr	r1, [pc, #24]	@ (800196c <HAL_I2C_Master_Receive+0x22c>)
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fa76 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e11a      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
 8001962:	bf00      	nop
 8001964:	00100002 	.word	0x00100002
 8001968:	ffff0000 	.word	0xffff0000
 800196c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800197e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019e4:	e0c4      	b.n	8001b70 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ec:	2200      	movs	r2, #0
 80019ee:	496c      	ldr	r1, [pc, #432]	@ (8001ba0 <HAL_I2C_Master_Receive+0x460>)
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fa27 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0cb      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4955      	ldr	r1, [pc, #340]	@ (8001ba0 <HAL_I2C_Master_Receive+0x460>)
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f9f9 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e09d      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ad0:	e04e      	b.n	8001b70 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fb5e 	bl	8002198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e058      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d124      	bne.n	8001b70 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d107      	bne.n	8001b3e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f47f aeb6 	bne.w	80018e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
  }
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	00010004 	.word	0x00010004

08001ba4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d006      	beq.n	8001bce <I2C_MasterRequestWrite+0x2a>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d003      	beq.n	8001bce <I2C_MasterRequestWrite+0x2a>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bcc:	d108      	bne.n	8001be0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e00b      	b.n	8001bf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	2b12      	cmp	r3, #18
 8001be6:	d107      	bne.n	8001bf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f91d 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00d      	beq.n	8001c2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c1e:	d103      	bne.n	8001c28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e035      	b.n	8001c98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c34:	d108      	bne.n	8001c48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c36:	897b      	ldrh	r3, [r7, #10]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	e01b      	b.n	8001c80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c48:	897b      	ldrh	r3, [r7, #10]
 8001c4a:	11db      	asrs	r3, r3, #7
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f003 0306 	and.w	r3, r3, #6
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f063 030f 	orn	r3, r3, #15
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	490e      	ldr	r1, [pc, #56]	@ (8001ca0 <I2C_MasterRequestWrite+0xfc>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f966 	bl	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e010      	b.n	8001c98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4907      	ldr	r1, [pc, #28]	@ (8001ca4 <I2C_MasterRequestWrite+0x100>)
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f956 	bl	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	00010008 	.word	0x00010008
 8001ca4:	00010002 	.word	0x00010002

08001ca8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d006      	beq.n	8001ce2 <I2C_MasterRequestRead+0x3a>
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d003      	beq.n	8001ce2 <I2C_MasterRequestRead+0x3a>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ce0:	d108      	bne.n	8001cf4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e00b      	b.n	8001d0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf8:	2b11      	cmp	r3, #17
 8001cfa:	d107      	bne.n	8001d0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f893 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00d      	beq.n	8001d40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d32:	d103      	bne.n	8001d3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e079      	b.n	8001e34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d48:	d108      	bne.n	8001d5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	e05f      	b.n	8001e1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	11db      	asrs	r3, r3, #7
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f003 0306 	and.w	r3, r3, #6
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f063 030f 	orn	r3, r3, #15
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4930      	ldr	r1, [pc, #192]	@ (8001e3c <I2C_MasterRequestRead+0x194>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f8dc 	bl	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e054      	b.n	8001e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4929      	ldr	r1, [pc, #164]	@ (8001e40 <I2C_MasterRequestRead+0x198>)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f8cc 	bl	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e044      	b.n	8001e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f831 	bl	8001e44 <I2C_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00d      	beq.n	8001e04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001df6:	d103      	bne.n	8001e00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e017      	b.n	8001e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	11db      	asrs	r3, r3, #7
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f003 0306 	and.w	r3, r3, #6
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f063 030e 	orn	r3, r3, #14
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4907      	ldr	r1, [pc, #28]	@ (8001e40 <I2C_MasterRequestRead+0x198>)
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f888 	bl	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	00010008 	.word	0x00010008
 8001e40:	00010002 	.word	0x00010002

08001e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e54:	e048      	b.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e5c:	d044      	beq.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5e:	f7fe ff69 	bl	8000d34 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d302      	bcc.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d139      	bne.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10d      	bne.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	e00c      	b.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d116      	bne.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e023      	b.n	8001f30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10d      	bne.n	8001f0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	e00c      	b.n	8001f28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d093      	beq.n	8001e56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f46:	e071      	b.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f56:	d123      	bne.n	8001fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e067      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fa6:	d041      	beq.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7fe fec4 	bl	8000d34 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d302      	bcc.n	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d136      	bne.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10c      	bne.n	8001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	e00b      	b.n	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4013      	ands	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e021      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10c      	bne.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	43da      	mvns	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	e00b      	b.n	8002068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f af6d 	bne.w	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002084:	e034      	b.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8e3 	bl	8002252 <I2C_IsAcknowledgeFailed>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e034      	b.n	8002100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800209c:	d028      	beq.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	f7fe fe49 	bl	8000d34 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d11d      	bne.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020be:	2b80      	cmp	r3, #128	@ 0x80
 80020c0:	d016      	beq.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e007      	b.n	8002100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b80      	cmp	r3, #128	@ 0x80
 80020fc:	d1c3      	bne.n	8002086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002114:	e034      	b.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f89b 	bl	8002252 <I2C_IsAcknowledgeFailed>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e034      	b.n	8002190 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800212c:	d028      	beq.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212e:	f7fe fe01 	bl	8000d34 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11d      	bne.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d016      	beq.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e007      	b.n	8002190 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d1c3      	bne.n	8002116 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021a4:	e049      	b.n	800223a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d119      	bne.n	80021e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e030      	b.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e8:	f7fe fda4 	bl	8000d34 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d302      	bcc.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11d      	bne.n	800223a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b40      	cmp	r3, #64	@ 0x40
 800220a:	d016      	beq.n	800223a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002244:	2b40      	cmp	r3, #64	@ 0x40
 8002246:	d1ae      	bne.n	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002268:	d11b      	bne.n	80022a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002272:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f043 0204 	orr.w	r2, r3, #4
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0cc      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b68      	ldr	r3, [pc, #416]	@ (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d90c      	bls.n	80022ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b65      	ldr	r3, [pc, #404]	@ (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b63      	ldr	r3, [pc, #396]	@ (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b8      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002304:	4b59      	ldr	r3, [pc, #356]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a58      	ldr	r2, [pc, #352]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800230e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231c:	4b53      	ldr	r3, [pc, #332]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a52      	ldr	r2, [pc, #328]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b50      	ldr	r3, [pc, #320]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	494d      	ldr	r1, [pc, #308]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d044      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b47      	ldr	r3, [pc, #284]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d119      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d003      	beq.n	800236e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b3f      	ldr	r3, [pc, #252]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e067      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b37      	ldr	r3, [pc, #220]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4934      	ldr	r1, [pc, #208]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7fe fcc8 	bl	8000d34 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7fe fcc4 	bl	8000d34 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e04f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d20c      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e032      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b19      	ldr	r3, [pc, #100]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4916      	ldr	r1, [pc, #88]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002422:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	490e      	ldr	r1, [pc, #56]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002436:	f000 f855 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490a      	ldr	r1, [pc, #40]	@ (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a09      	ldr	r2, [pc, #36]	@ (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fc28 	bl	8000cac <HAL_InitTick>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00
 800246c:	40023800 	.word	0x40023800
 8002470:	08008ef0 	.word	0x08008ef0
 8002474:	20000004 	.word	0x20000004
 8002478:	20000008 	.word	0x20000008

0800247c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_RCC_GetHCLKFreq+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002498:	f7ff fff0 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0a9b      	lsrs	r3, r3, #10
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4903      	ldr	r1, [pc, #12]	@ (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	08008f00 	.word	0x08008f00

080024bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024c0:	f7ff ffdc 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0b5b      	lsrs	r3, r3, #13
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4903      	ldr	r1, [pc, #12]	@ (80024e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	08008f00 	.word	0x08008f00

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	b0ae      	sub	sp, #184	@ 0xb8
 80024ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250a:	4bcb      	ldr	r3, [pc, #812]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b0c      	cmp	r3, #12
 8002514:	f200 8206 	bhi.w	8002924 <HAL_RCC_GetSysClockFreq+0x440>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <HAL_RCC_GetSysClockFreq+0x3c>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002555 	.word	0x08002555
 8002524:	08002925 	.word	0x08002925
 8002528:	08002925 	.word	0x08002925
 800252c:	08002925 	.word	0x08002925
 8002530:	0800255d 	.word	0x0800255d
 8002534:	08002925 	.word	0x08002925
 8002538:	08002925 	.word	0x08002925
 800253c:	08002925 	.word	0x08002925
 8002540:	08002565 	.word	0x08002565
 8002544:	08002925 	.word	0x08002925
 8002548:	08002925 	.word	0x08002925
 800254c:	08002925 	.word	0x08002925
 8002550:	08002755 	.word	0x08002755
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4bb9      	ldr	r3, [pc, #740]	@ (800283c <HAL_RCC_GetSysClockFreq+0x358>)
 8002556:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800255a:	e1e7      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255c:	4bb8      	ldr	r3, [pc, #736]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x35c>)
 800255e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002562:	e1e3      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4bb4      	ldr	r3, [pc, #720]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800256c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002570:	4bb1      	ldr	r3, [pc, #708]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d071      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257c:	4bae      	ldr	r3, [pc, #696]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	2200      	movs	r2, #0
 8002584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002588:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800258c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800259e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025a2:	4622      	mov	r2, r4
 80025a4:	462b      	mov	r3, r5
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4621      	mov	r1, r4
 80025bc:	1a51      	subs	r1, r2, r1
 80025be:	6439      	str	r1, [r7, #64]	@ 0x40
 80025c0:	4629      	mov	r1, r5
 80025c2:	eb63 0301 	sbc.w	r3, r3, r1
 80025c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025d4:	4649      	mov	r1, r9
 80025d6:	018b      	lsls	r3, r1, #6
 80025d8:	4641      	mov	r1, r8
 80025da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025de:	4641      	mov	r1, r8
 80025e0:	018a      	lsls	r2, r1, #6
 80025e2:	4641      	mov	r1, r8
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025e8:	4649      	mov	r1, r9
 80025ea:	eb63 0301 	sbc.w	r3, r3, r1
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025fc:	4649      	mov	r1, r9
 80025fe:	00cb      	lsls	r3, r1, #3
 8002600:	4641      	mov	r1, r8
 8002602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002606:	4641      	mov	r1, r8
 8002608:	00ca      	lsls	r2, r1, #3
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	4603      	mov	r3, r0
 8002610:	4622      	mov	r2, r4
 8002612:	189b      	adds	r3, r3, r2
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
 8002616:	462b      	mov	r3, r5
 8002618:	460a      	mov	r2, r1
 800261a:	eb42 0303 	adc.w	r3, r2, r3
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800262c:	4629      	mov	r1, r5
 800262e:	024b      	lsls	r3, r1, #9
 8002630:	4621      	mov	r1, r4
 8002632:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002636:	4621      	mov	r1, r4
 8002638:	024a      	lsls	r2, r1, #9
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002642:	2200      	movs	r2, #0
 8002644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800264c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002650:	f7fd fe2e 	bl	80002b0 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800265e:	e067      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002660:	4b75      	ldr	r3, [pc, #468]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800266c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002670:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800267a:	2300      	movs	r3, #0
 800267c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800267e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	0159      	lsls	r1, r3, #5
 8002690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002694:	0150      	lsls	r0, r2, #5
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4621      	mov	r1, r4
 800269c:	1a51      	subs	r1, r2, r1
 800269e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026a0:	4629      	mov	r1, r5
 80026a2:	eb63 0301 	sbc.w	r3, r3, r1
 80026a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026b4:	4649      	mov	r1, r9
 80026b6:	018b      	lsls	r3, r1, #6
 80026b8:	4641      	mov	r1, r8
 80026ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026be:	4641      	mov	r1, r8
 80026c0:	018a      	lsls	r2, r1, #6
 80026c2:	4641      	mov	r1, r8
 80026c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80026c8:	4649      	mov	r1, r9
 80026ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e2:	4692      	mov	sl, r2
 80026e4:	469b      	mov	fp, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	eb1a 0303 	adds.w	r3, sl, r3
 80026ec:	623b      	str	r3, [r7, #32]
 80026ee:	462b      	mov	r3, r5
 80026f0:	eb4b 0303 	adc.w	r3, fp, r3
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002718:	2200      	movs	r2, #0
 800271a:	673b      	str	r3, [r7, #112]	@ 0x70
 800271c:	677a      	str	r2, [r7, #116]	@ 0x74
 800271e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002722:	f7fd fdc5 	bl	80002b0 <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4613      	mov	r3, r2
 800272c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002730:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	3301      	adds	r3, #1
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002752:	e0eb      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002754:	4b38      	ldr	r3, [pc, #224]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800275c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002760:	4b35      	ldr	r3, [pc, #212]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d06b      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276c:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x354>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	2200      	movs	r2, #0
 8002774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002776:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800277a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002780:	2300      	movs	r3, #0
 8002782:	667b      	str	r3, [r7, #100]	@ 0x64
 8002784:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002788:	4622      	mov	r2, r4
 800278a:	462b      	mov	r3, r5
 800278c:	f04f 0000 	mov.w	r0, #0
 8002790:	f04f 0100 	mov.w	r1, #0
 8002794:	0159      	lsls	r1, r3, #5
 8002796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279a:	0150      	lsls	r0, r2, #5
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4621      	mov	r1, r4
 80027a2:	1a51      	subs	r1, r2, r1
 80027a4:	61b9      	str	r1, [r7, #24]
 80027a6:	4629      	mov	r1, r5
 80027a8:	eb63 0301 	sbc.w	r3, r3, r1
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ba:	4659      	mov	r1, fp
 80027bc:	018b      	lsls	r3, r1, #6
 80027be:	4651      	mov	r1, sl
 80027c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c4:	4651      	mov	r1, sl
 80027c6:	018a      	lsls	r2, r1, #6
 80027c8:	4651      	mov	r1, sl
 80027ca:	ebb2 0801 	subs.w	r8, r2, r1
 80027ce:	4659      	mov	r1, fp
 80027d0:	eb63 0901 	sbc.w	r9, r3, r1
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027e8:	4690      	mov	r8, r2
 80027ea:	4699      	mov	r9, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	eb18 0303 	adds.w	r3, r8, r3
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	462b      	mov	r3, r5
 80027f6:	eb49 0303 	adc.w	r3, r9, r3
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002808:	4629      	mov	r1, r5
 800280a:	024b      	lsls	r3, r1, #9
 800280c:	4621      	mov	r1, r4
 800280e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002812:	4621      	mov	r1, r4
 8002814:	024a      	lsls	r2, r1, #9
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800281e:	2200      	movs	r2, #0
 8002820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002822:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002824:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002828:	f7fd fd42 	bl	80002b0 <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002836:	e065      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x420>
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400
 8002840:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_RCC_GetSysClockFreq+0x458>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	2200      	movs	r2, #0
 800284c:	4618      	mov	r0, r3
 800284e:	4611      	mov	r1, r2
 8002850:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002854:	653b      	str	r3, [r7, #80]	@ 0x50
 8002856:	2300      	movs	r3, #0
 8002858:	657b      	str	r3, [r7, #84]	@ 0x54
 800285a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800285e:	4642      	mov	r2, r8
 8002860:	464b      	mov	r3, r9
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	0159      	lsls	r1, r3, #5
 800286c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002870:	0150      	lsls	r0, r2, #5
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4641      	mov	r1, r8
 8002878:	1a51      	subs	r1, r2, r1
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	4649      	mov	r1, r9
 800287e:	eb63 0301 	sbc.w	r3, r3, r1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002890:	4659      	mov	r1, fp
 8002892:	018b      	lsls	r3, r1, #6
 8002894:	4651      	mov	r1, sl
 8002896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289a:	4651      	mov	r1, sl
 800289c:	018a      	lsls	r2, r1, #6
 800289e:	4651      	mov	r1, sl
 80028a0:	1a54      	subs	r4, r2, r1
 80028a2:	4659      	mov	r1, fp
 80028a4:	eb63 0501 	sbc.w	r5, r3, r1
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	00eb      	lsls	r3, r5, #3
 80028b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b6:	00e2      	lsls	r2, r4, #3
 80028b8:	4614      	mov	r4, r2
 80028ba:	461d      	mov	r5, r3
 80028bc:	4643      	mov	r3, r8
 80028be:	18e3      	adds	r3, r4, r3
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	464b      	mov	r3, r9
 80028c4:	eb45 0303 	adc.w	r3, r5, r3
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d6:	4629      	mov	r1, r5
 80028d8:	028b      	lsls	r3, r1, #10
 80028da:	4621      	mov	r1, r4
 80028dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e0:	4621      	mov	r1, r4
 80028e2:	028a      	lsls	r2, r1, #10
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ec:	2200      	movs	r2, #0
 80028ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80028f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028f6:	f7fd fcdb 	bl	80002b0 <__aeabi_uldivmod>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4613      	mov	r3, r2
 8002900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002904:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <HAL_RCC_GetSysClockFreq+0x458>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	0f1b      	lsrs	r3, r3, #28
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002922:	e003      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800292a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002930:	4618      	mov	r0, r3
 8002932:	37b8      	adds	r7, #184	@ 0xb8
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	00f42400 	.word	0x00f42400

08002944 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e28d      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8083 	beq.w	8002a6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002964:	4b94      	ldr	r3, [pc, #592]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b04      	cmp	r3, #4
 800296e:	d019      	beq.n	80029a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002970:	4b91      	ldr	r3, [pc, #580]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
        || \
 8002978:	2b08      	cmp	r3, #8
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800297c:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002988:	d00c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d112      	bne.n	80029bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b88      	ldr	r3, [pc, #544]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029a2:	d10b      	bne.n	80029bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	4b84      	ldr	r3, [pc, #528]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05b      	beq.n	8002a68 <HAL_RCC_OscConfig+0x124>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d157      	bne.n	8002a68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e25a      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x90>
 80029c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7b      	ldr	r2, [pc, #492]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xcc>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0xb4>
 80029de:	4b76      	ldr	r3, [pc, #472]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b73      	ldr	r3, [pc, #460]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a72      	ldr	r2, [pc, #456]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xcc>
 80029f8:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe f98c 	bl	8000d34 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe f988 	bl	8000d34 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e21f      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b61      	ldr	r3, [pc, #388]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xdc>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe f978 	bl	8000d34 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe f974 	bl	8000d34 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e20b      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	4b57      	ldr	r3, [pc, #348]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x104>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06f      	beq.n	8002b56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a76:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d017      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a82:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d11c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b44      	ldr	r3, [pc, #272]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	4b41      	ldr	r3, [pc, #260]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x186>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e1d3      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4937      	ldr	r1, [pc, #220]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	e03a      	b.n	8002b56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae8:	4b34      	ldr	r3, [pc, #208]	@ (8002bbc <HAL_RCC_OscConfig+0x278>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe f921 	bl	8000d34 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe f91d 	bl	8000d34 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1b4      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4925      	ldr	r1, [pc, #148]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <HAL_RCC_OscConfig+0x278>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe f900 	bl	8000d34 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe f8fc 	bl	8000d34 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e193      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d036      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_RCC_OscConfig+0x27c>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe f8e0 	bl	8000d34 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b78:	f7fe f8dc 	bl	8000d34 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e173      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x234>
 8002b96:	e01b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe f8c9 	bl	8000d34 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	e00e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f8c5 	bl	8000d34 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d907      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e15c      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	42470000 	.word	0x42470000
 8002bc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ea      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8097 	beq.w	8002d0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4b83      	ldr	r3, [pc, #524]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b79      	ldr	r3, [pc, #484]	@ (8002df4 <HAL_RCC_OscConfig+0x4b0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b76      	ldr	r3, [pc, #472]	@ (8002df4 <HAL_RCC_OscConfig+0x4b0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	@ (8002df4 <HAL_RCC_OscConfig+0x4b0>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fe f885 	bl	8000d34 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fe f881 	bl	8000d34 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e118      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b6c      	ldr	r3, [pc, #432]	@ (8002df4 <HAL_RCC_OscConfig+0x4b0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x31e>
 8002c54:	4b66      	ldr	r3, [pc, #408]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	4a65      	ldr	r2, [pc, #404]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0x358>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x340>
 8002c6a:	4b61      	ldr	r3, [pc, #388]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a60      	ldr	r2, [pc, #384]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c76:	4b5e      	ldr	r3, [pc, #376]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x358>
 8002c84:	4b5a      	ldr	r3, [pc, #360]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a59      	ldr	r2, [pc, #356]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c90:	4b57      	ldr	r3, [pc, #348]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	4a56      	ldr	r2, [pc, #344]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe f846 	bl	8000d34 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe f842 	bl	8000d34 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0d7      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ee      	beq.n	8002cac <HAL_RCC_OscConfig+0x368>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe f830 	bl	8000d34 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe f82c 	bl	8000d34 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0c1      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	4b40      	ldr	r3, [pc, #256]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ee      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	4a3a      	ldr	r2, [pc, #232]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80ad 	beq.w	8002e70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d16:	4b36      	ldr	r3, [pc, #216]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d060      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d145      	bne.n	8002db6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b33      	ldr	r3, [pc, #204]	@ (8002df8 <HAL_RCC_OscConfig+0x4b4>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe f800 	bl	8000d34 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fd fffc 	bl	8000d34 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e093      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	071b      	lsls	r3, r3, #28
 8002d82:	491b      	ldr	r1, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x4b4>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fd ffd1 	bl	8000d34 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fd ffcd 	bl	8000d34 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e064      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x452>
 8002db4:	e05c      	b.n	8002e70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_RCC_OscConfig+0x4b4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fd ffba 	bl	8000d34 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fd ffb6 	bl	8000d34 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04d      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x480>
 8002de2:	e045      	b.n	8002e70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e040      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e7c <HAL_RCC_OscConfig+0x538>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d030      	beq.n	8002e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d129      	bne.n	8002e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d122      	bne.n	8002e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d119      	bne.n	8002e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	3b01      	subs	r3, #1
 8002e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d10f      	bne.n	8002e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e042      	b.n	8002f18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fd fdf4 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	@ 0x24
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f973 	bl	80031b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d175      	bne.n	800302c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Transmit+0x2c>
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e06e      	b.n	800302e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2221      	movs	r2, #33	@ 0x21
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5e:	f7fd fee9 	bl	8000d34 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f78:	d108      	bne.n	8002f8c <HAL_UART_Transmit+0x6c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	e003      	b.n	8002f94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f94:	e02e      	b.n	8002ff4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	@ 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f848 	bl	8003036 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e03a      	b.n	800302e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e007      	b.n	8002fe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cb      	bne.n	8002f96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	2140      	movs	r1, #64	@ 0x40
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f814 	bl	8003036 <UART_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e006      	b.n	800302e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003046:	e03b      	b.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800304e:	d037      	beq.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003050:	f7fd fe70 	bl	8000d34 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	6a3a      	ldr	r2, [r7, #32]
 800305c:	429a      	cmp	r2, r3
 800305e:	d302      	bcc.n	8003066 <UART_WaitOnFlagUntilTimeout+0x30>
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e03a      	b.n	80030e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d023      	beq.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b80      	cmp	r3, #128	@ 0x80
 800307c:	d020      	beq.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b40      	cmp	r3, #64	@ 0x40
 8003082:	d01d      	beq.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d116      	bne.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f81d 	bl	80030e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2208      	movs	r2, #8
 80030b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00f      	b.n	80030e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d0b4      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b095      	sub	sp, #84	@ 0x54
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003102:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003110:	643a      	str	r2, [r7, #64]	@ 0x40
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003116:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800311e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e5      	bne.n	80030f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3314      	adds	r3, #20
 800312a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	61fb      	str	r3, [r7, #28]
   return(result);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3314      	adds	r3, #20
 8003142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003144:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800314a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800314c:	e841 2300 	strex	r3, r2, [r1]
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e5      	bne.n	8003124 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	2b01      	cmp	r3, #1
 800315e:	d119      	bne.n	8003194 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f023 0310 	bic.w	r3, r3, #16
 8003176:	647b      	str	r3, [r7, #68]	@ 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003180:	61ba      	str	r2, [r7, #24]
 8003182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	6979      	ldr	r1, [r7, #20]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	613b      	str	r3, [r7, #16]
   return(result);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e5      	bne.n	8003160 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031a2:	bf00      	nop
 80031a4:	3754      	adds	r7, #84	@ 0x54
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b4:	b0c0      	sub	sp, #256	@ 0x100
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	ea40 0301 	orr.w	r3, r0, r1
 80031d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003208:	f021 010c 	bic.w	r1, r1, #12
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003216:	430b      	orrs	r3, r1
 8003218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322a:	6999      	ldr	r1, [r3, #24]
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	ea40 0301 	orr.w	r3, r0, r1
 8003236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b8f      	ldr	r3, [pc, #572]	@ (800347c <UART_SetConfig+0x2cc>)
 8003240:	429a      	cmp	r2, r3
 8003242:	d005      	beq.n	8003250 <UART_SetConfig+0xa0>
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b8d      	ldr	r3, [pc, #564]	@ (8003480 <UART_SetConfig+0x2d0>)
 800324c:	429a      	cmp	r2, r3
 800324e:	d104      	bne.n	800325a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff f934 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8003254:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003258:	e003      	b.n	8003262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325a:	f7ff f91b 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 800325e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326c:	f040 810c 	bne.w	8003488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800327a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800327e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003282:	4622      	mov	r2, r4
 8003284:	462b      	mov	r3, r5
 8003286:	1891      	adds	r1, r2, r2
 8003288:	65b9      	str	r1, [r7, #88]	@ 0x58
 800328a:	415b      	adcs	r3, r3
 800328c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800328e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003292:	4621      	mov	r1, r4
 8003294:	eb12 0801 	adds.w	r8, r2, r1
 8003298:	4629      	mov	r1, r5
 800329a:	eb43 0901 	adc.w	r9, r3, r1
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b2:	4690      	mov	r8, r2
 80032b4:	4699      	mov	r9, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	eb18 0303 	adds.w	r3, r8, r3
 80032bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032c0:	462b      	mov	r3, r5
 80032c2:	eb49 0303 	adc.w	r3, r9, r3
 80032c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032de:	460b      	mov	r3, r1
 80032e0:	18db      	adds	r3, r3, r3
 80032e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e4:	4613      	mov	r3, r2
 80032e6:	eb42 0303 	adc.w	r3, r2, r3
 80032ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032f4:	f7fc ffdc 	bl	80002b0 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b61      	ldr	r3, [pc, #388]	@ (8003484 <UART_SetConfig+0x2d4>)
 80032fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	011c      	lsls	r4, r3, #4
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003310:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003320:	415b      	adcs	r3, r3
 8003322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003328:	4641      	mov	r1, r8
 800332a:	eb12 0a01 	adds.w	sl, r2, r1
 800332e:	4649      	mov	r1, r9
 8003330:	eb43 0b01 	adc.w	fp, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003348:	4692      	mov	sl, r2
 800334a:	469b      	mov	fp, r3
 800334c:	4643      	mov	r3, r8
 800334e:	eb1a 0303 	adds.w	r3, sl, r3
 8003352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003356:	464b      	mov	r3, r9
 8003358:	eb4b 0303 	adc.w	r3, fp, r3
 800335c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800336c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003374:	460b      	mov	r3, r1
 8003376:	18db      	adds	r3, r3, r3
 8003378:	643b      	str	r3, [r7, #64]	@ 0x40
 800337a:	4613      	mov	r3, r2
 800337c:	eb42 0303 	adc.w	r3, r2, r3
 8003380:	647b      	str	r3, [r7, #68]	@ 0x44
 8003382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800338a:	f7fc ff91 	bl	80002b0 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4611      	mov	r1, r2
 8003394:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <UART_SetConfig+0x2d4>)
 8003396:	fba3 2301 	umull	r2, r3, r3, r1
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2264      	movs	r2, #100	@ 0x64
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	1acb      	subs	r3, r1, r3
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033aa:	4b36      	ldr	r3, [pc, #216]	@ (8003484 <UART_SetConfig+0x2d4>)
 80033ac:	fba3 2302 	umull	r2, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033b8:	441c      	add	r4, r3
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d4:	415b      	adcs	r3, r3
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033dc:	4641      	mov	r1, r8
 80033de:	1851      	adds	r1, r2, r1
 80033e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80033e2:	4649      	mov	r1, r9
 80033e4:	414b      	adcs	r3, r1
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033f4:	4659      	mov	r1, fp
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4651      	mov	r1, sl
 80033fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fe:	4651      	mov	r1, sl
 8003400:	00ca      	lsls	r2, r1, #3
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	4603      	mov	r3, r0
 8003408:	4642      	mov	r2, r8
 800340a:	189b      	adds	r3, r3, r2
 800340c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003410:	464b      	mov	r3, r9
 8003412:	460a      	mov	r2, r1
 8003414:	eb42 0303 	adc.w	r3, r2, r3
 8003418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003428:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800342c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003430:	460b      	mov	r3, r1
 8003432:	18db      	adds	r3, r3, r3
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003436:	4613      	mov	r3, r2
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003446:	f7fc ff33 	bl	80002b0 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <UART_SetConfig+0x2d4>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	@ 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	3332      	adds	r3, #50	@ 0x32
 8003462:	4a08      	ldr	r2, [pc, #32]	@ (8003484 <UART_SetConfig+0x2d4>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 0207 	and.w	r2, r3, #7
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4422      	add	r2, r4
 8003476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003478:	e106      	b.n	8003688 <UART_SetConfig+0x4d8>
 800347a:	bf00      	nop
 800347c:	40011000 	.word	0x40011000
 8003480:	40011400 	.word	0x40011400
 8003484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800349a:	4642      	mov	r2, r8
 800349c:	464b      	mov	r3, r9
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	6239      	str	r1, [r7, #32]
 80034a2:	415b      	adcs	r3, r3
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034aa:	4641      	mov	r1, r8
 80034ac:	1854      	adds	r4, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb43 0501 	adc.w	r5, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	00eb      	lsls	r3, r5, #3
 80034be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c2:	00e2      	lsls	r2, r4, #3
 80034c4:	4614      	mov	r4, r2
 80034c6:	461d      	mov	r5, r3
 80034c8:	4643      	mov	r3, r8
 80034ca:	18e3      	adds	r3, r4, r3
 80034cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034d0:	464b      	mov	r3, r9
 80034d2:	eb45 0303 	adc.w	r3, r5, r3
 80034d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034f6:	4629      	mov	r1, r5
 80034f8:	008b      	lsls	r3, r1, #2
 80034fa:	4621      	mov	r1, r4
 80034fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003500:	4621      	mov	r1, r4
 8003502:	008a      	lsls	r2, r1, #2
 8003504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003508:	f7fc fed2 	bl	80002b0 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4b60      	ldr	r3, [pc, #384]	@ (8003694 <UART_SetConfig+0x4e4>)
 8003512:	fba3 2302 	umull	r2, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	011c      	lsls	r4, r3, #4
 800351a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003524:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	1891      	adds	r1, r2, r2
 8003532:	61b9      	str	r1, [r7, #24]
 8003534:	415b      	adcs	r3, r3
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353c:	4641      	mov	r1, r8
 800353e:	1851      	adds	r1, r2, r1
 8003540:	6139      	str	r1, [r7, #16]
 8003542:	4649      	mov	r1, r9
 8003544:	414b      	adcs	r3, r1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003554:	4659      	mov	r1, fp
 8003556:	00cb      	lsls	r3, r1, #3
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355e:	4651      	mov	r1, sl
 8003560:	00ca      	lsls	r2, r1, #3
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	4603      	mov	r3, r0
 8003568:	4642      	mov	r2, r8
 800356a:	189b      	adds	r3, r3, r2
 800356c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003570:	464b      	mov	r3, r9
 8003572:	460a      	mov	r2, r1
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003594:	4649      	mov	r1, r9
 8003596:	008b      	lsls	r3, r1, #2
 8003598:	4641      	mov	r1, r8
 800359a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359e:	4641      	mov	r1, r8
 80035a0:	008a      	lsls	r2, r1, #2
 80035a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035a6:	f7fc fe83 	bl	80002b0 <__aeabi_uldivmod>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 2301 	umull	r2, r3, r3, r1
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2264      	movs	r2, #100	@ 0x64
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	1acb      	subs	r3, r1, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	@ 0x32
 80035c4:	4a33      	ldr	r2, [pc, #204]	@ (8003694 <UART_SetConfig+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80035da:	677a      	str	r2, [r7, #116]	@ 0x74
 80035dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	415b      	adcs	r3, r3
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f0:	4641      	mov	r1, r8
 80035f2:	1851      	adds	r1, r2, r1
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	4649      	mov	r1, r9
 80035f8:	414b      	adcs	r3, r1
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003608:	4659      	mov	r1, fp
 800360a:	00cb      	lsls	r3, r1, #3
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003612:	4651      	mov	r1, sl
 8003614:	00ca      	lsls	r2, r1, #3
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4603      	mov	r3, r0
 800361c:	4642      	mov	r2, r8
 800361e:	189b      	adds	r3, r3, r2
 8003620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003622:	464b      	mov	r3, r9
 8003624:	460a      	mov	r2, r1
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	663b      	str	r3, [r7, #96]	@ 0x60
 8003636:	667a      	str	r2, [r7, #100]	@ 0x64
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003644:	4649      	mov	r1, r9
 8003646:	008b      	lsls	r3, r1, #2
 8003648:	4641      	mov	r1, r8
 800364a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364e:	4641      	mov	r1, r8
 8003650:	008a      	lsls	r2, r1, #2
 8003652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003656:	f7fc fe2b 	bl	80002b0 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <UART_SetConfig+0x4e4>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2164      	movs	r1, #100	@ 0x64
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	@ 0x32
 8003672:	4a08      	ldr	r2, [pc, #32]	@ (8003694 <UART_SetConfig+0x4e4>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4422      	add	r2, r4
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	bf00      	nop
 800368a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800368e:	46bd      	mov	sp, r7
 8003690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003694:	51eb851f 	.word	0x51eb851f

08003698 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f001 fc52 	bl	8004f52 <VL53L0X_get_offset_calibration_data_micro_meter>
 80036ae:	4603      	mov	r3, r0
 80036b0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b094      	sub	sp, #80	@ 0x50
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80036ce:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d107      	bne.n	80036e6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2188      	movs	r1, #136	@ 0x88
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f004 fea8 	bl	8008430 <VL53L0X_WrByte>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036f4:	f8a3 214e 	strh.w	r2, [r3, #334]	@ 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80036fe:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a71      	ldr	r2, [pc, #452]	@ (80038cc <VL53L0X_DataInit+0x20c>)
 8003706:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a70      	ldr	r2, [pc, #448]	@ (80038d0 <VL53L0X_DataInit+0x210>)
 800370e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa66 	bl	8003bf0 <VL53L0X_GetDeviceParameters>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 800372a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800372e:	2b00      	cmp	r3, #0
 8003730:	d112      	bne.n	8003758 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003732:	2300      	movs	r3, #0
 8003734:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003736:	2300      	movs	r3, #0
 8003738:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 0410 	add.w	r4, r3, #16
 8003740:	f107 0508 	add.w	r5, r7, #8
 8003744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800374a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800374c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800374e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003750:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2264      	movs	r2, #100	@ 0x64
 800375c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8003766:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003770:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800377a:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003786:	2300      	movs	r3, #0
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378a:	e014      	b.n	80037b6 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 800378c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003790:	2b00      	cmp	r3, #0
 8003792:	d114      	bne.n	80037be <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003796:	b29b      	uxth	r3, r3
 8003798:	2201      	movs	r2, #1
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fd71 	bl	8004284 <VL53L0X_SetLimitCheckEnable>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80037b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037b2:	3301      	adds	r3, #1
 80037b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	dde7      	ble.n	800378c <VL53L0X_DataInit+0xcc>
 80037bc:	e000      	b.n	80037c0 <VL53L0X_DataInit+0x100>
		else
			break;
 80037be:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80037c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80037c8:	2200      	movs	r2, #0
 80037ca:	2102      	movs	r1, #2
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fd59 	bl	8004284 <VL53L0X_SetLimitCheckEnable>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80037d8:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80037e0:	2200      	movs	r2, #0
 80037e2:	2103      	movs	r1, #3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fd4d 	bl	8004284 <VL53L0X_SetLimitCheckEnable>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80037f0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80037f8:	2200      	movs	r2, #0
 80037fa:	2104      	movs	r1, #4
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fd41 	bl	8004284 <VL53L0X_SetLimitCheckEnable>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003808:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003810:	2200      	movs	r2, #0
 8003812:	2105      	movs	r1, #5
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fd35 	bl	8004284 <VL53L0X_SetLimitCheckEnable>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003820:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003828:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fdd8 	bl	80043e4 <VL53L0X_SetLimitCheckValue>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800383a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003846:	2101      	movs	r1, #1
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fdcb 	bl	80043e4 <VL53L0X_SetLimitCheckValue>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003854:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800385c:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8003860:	2102      	movs	r1, #2
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fdbe 	bl	80043e4 <VL53L0X_SetLimitCheckValue>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800386e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003876:	2200      	movs	r2, #0
 8003878:	2103      	movs	r1, #3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fdb2 	bl	80043e4 <VL53L0X_SetLimitCheckValue>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003886:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	22ff      	movs	r2, #255	@ 0xff
 8003892:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003896:	22ff      	movs	r2, #255	@ 0xff
 8003898:	2101      	movs	r1, #1
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f004 fdc8 	bl	8008430 <VL53L0X_WrByte>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80038ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80038be:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3750      	adds	r7, #80	@ 0x50
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bdb0      	pop	{r4, r5, r7, pc}
 80038ca:	bf00      	nop
 80038cc:	00016b85 	.word	0x00016b85
 80038d0:	000970a4 	.word	0x000970a4

080038d4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80038d4:	b5b0      	push	{r4, r5, r7, lr}
 80038d6:	b09e      	sub	sp, #120	@ 0x78
 80038d8:	af02      	add	r7, sp, #8
 80038da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	2240      	movs	r2, #64	@ 0x40
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f004 fe54 	bl	8008598 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003910:	2101      	movs	r1, #1
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f002 fa70 	bl	8005df8 <VL53L0X_get_info_from_device>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8003924:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800392c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003930:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003934:	2b01      	cmp	r3, #1
 8003936:	d80d      	bhi.n	8003954 <VL53L0X_StaticInit+0x80>
 8003938:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003940:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003942:	2b20      	cmp	r3, #32
 8003944:	d806      	bhi.n	8003954 <VL53L0X_StaticInit+0x80>
 8003946:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10e      	bne.n	800396c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800394e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003950:	2b0c      	cmp	r3, #12
 8003952:	d90b      	bls.n	800396c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003954:	f107 0218 	add.w	r2, r7, #24
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f001 fcf2 	bl	8005348 <VL53L0X_perform_ref_spad_management>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800396a:	e009      	b.n	8003980 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800396c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003970:	461a      	mov	r2, r3
 8003972:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f001 fef3 	bl	8005760 <VL53L0X_set_reference_spads>
 800397a:	4603      	mov	r3, r0
 800397c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003980:	4b93      	ldr	r3, [pc, #588]	@ (8003bd0 <VL53L0X_StaticInit+0x2fc>)
 8003982:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003984:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003992:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003996:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80039a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039a6:	e001      	b.n	80039ac <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80039a8:	4b89      	ldr	r3, [pc, #548]	@ (8003bd0 <VL53L0X_StaticInit+0x2fc>)
 80039aa:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80039ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80039b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f003 fdc4 	bl	8007544 <VL53L0X_load_tuning_settings>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80039c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80039ca:	2300      	movs	r3, #0
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	2304      	movs	r3, #4
 80039d0:	2200      	movs	r2, #0
 80039d2:	2100      	movs	r1, #0
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f001 f8ef 	bl	8004bb8 <VL53L0X_SetGpioConfig>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d121      	bne.n	8003a2c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80039e8:	2201      	movs	r2, #1
 80039ea:	21ff      	movs	r1, #255	@ 0xff
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f004 fd1f 	bl	8008430 <VL53L0X_WrByte>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80039f8:	f107 031a 	add.w	r3, r7, #26
 80039fc:	461a      	mov	r2, r3
 80039fe:	2184      	movs	r1, #132	@ 0x84
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f004 fca3 	bl	800834c <VL53L0X_RdWord>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003a14:	2200      	movs	r2, #0
 8003a16:	21ff      	movs	r1, #255	@ 0xff
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f004 fd09 	bl	8008430 <VL53L0X_WrByte>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003a34:	8b7b      	ldrh	r3, [r7, #26]
 8003a36:	011a      	lsls	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003a3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003a46:	f107 031c 	add.w	r3, r7, #28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8cf 	bl	8003bf0 <VL53L0X_GetDeviceParameters>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003a58:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d110      	bne.n	8003a82 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003a60:	f107 0319 	add.w	r3, r7, #25
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f991 	bl	8003d8e <VL53L0X_GetFractionEnable>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003a72:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003a7a:	7e7a      	ldrb	r2, [r7, #25]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003a82:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10e      	bne.n	8003aa8 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f103 0410 	add.w	r4, r3, #16
 8003a90:	f107 051c 	add.w	r5, r7, #28
 8003a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003aa8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 8003ab0:	f107 0319 	add.w	r3, r7, #25
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f004 fbc1 	bl	8008240 <VL53L0X_RdByte>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003ac4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003acc:	7e7a      	ldrb	r2, [r7, #25]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003ad4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f9c9 	bl	8003e78 <VL53L0X_SetSequenceStepEnable>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003aec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003af4:	2200      	movs	r2, #0
 8003af6:	2102      	movs	r1, #2
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9bd 	bl	8003e78 <VL53L0X_SetSequenceStepEnable>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003b04:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b14:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003b1c:	f107 0313 	add.w	r3, r7, #19
 8003b20:	461a      	mov	r2, r3
 8003b22:	2100      	movs	r1, #0
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f98f 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b30:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003b38:	7cfa      	ldrb	r2, [r7, #19]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b40:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003b48:	f107 0313 	add.w	r3, r7, #19
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2101      	movs	r1, #1
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f979 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003b64:	7cfa      	ldrb	r2, [r7, #19]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b6c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <VL53L0X_StaticInit+0x2b4>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2103      	movs	r1, #3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fac5 	bl	800410c <VL53L0X_GetSequenceStepTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b88:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b98:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <VL53L0X_StaticInit+0x2e0>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2104      	movs	r1, #4
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 faaf 	bl	800410c <VL53L0X_GetSequenceStepTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003bb4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bc4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3770      	adds	r7, #112	@ 0x70
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd0:	20000010 	.word	0x20000010

08003bd4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003bdc:	239d      	movs	r3, #157	@ 0x9d
 8003bde:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8b0 	bl	8003d68 <VL53L0X_GetDeviceMode>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	3308      	adds	r3, #8
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fab6 	bl	800418c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3310      	adds	r3, #16
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 faec 	bl	800421e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003c46:	4603      	mov	r3, r0
 8003c48:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d107      	bne.n	8003c62 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	3314      	adds	r3, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fd1d 	bl	8003698 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d134      	bne.n	8003cd4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	e02a      	b.n	8003cc6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d12a      	bne.n	8003cce <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	b299      	uxth	r1, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	3304      	adds	r3, #4
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fc0c 	bl	80044a8 <VL53L0X_GetLimitCheckValue>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d117      	bne.n	8003cd2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	b299      	uxth	r1, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb73 	bl	800439c <VL53L0X_GetLimitCheckEnable>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	ddd1      	ble.n	8003c70 <VL53L0X_GetDeviceParameters+0x80>
 8003ccc:	e002      	b.n	8003cd4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003cd2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	333c      	adds	r3, #60	@ 0x3c
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fc6e 	bl	80045c4 <VL53L0X_GetWrapAroundCheckEnable>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f879 	bl	8003df2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	2b15      	cmp	r3, #21
 8003d24:	bf8c      	ite	hi
 8003d26:	2201      	movhi	r2, #1
 8003d28:	2200      	movls	r2, #0
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d10f      	bne.n	8003d50 <VL53L0X_SetDeviceMode+0x40>
 8003d30:	4a0c      	ldr	r2, [pc, #48]	@ (8003d64 <VL53L0X_SetDeviceMode+0x54>)
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	741a      	strb	r2, [r3, #16]
		break;
 8003d4e:	e001      	b.n	8003d54 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003d50:	23f8      	movs	r3, #248	@ 0xf8
 8003d52:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	0030000b 	.word	0x0030000b

08003d68 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7c1a      	ldrb	r2, [r3, #16]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	2109      	movs	r1, #9
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f004 fa4d 	bl	8008240 <VL53L0X_RdByte>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f003 fa1f 	bl	8007220 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003de2:	4603      	mov	r3, r0
 8003de4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f003 faec 	bl	80073e0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	70fb      	strb	r3, [r7, #3]
 8003e24:	4613      	mov	r3, r2
 8003e26:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003e2c:	78ba      	ldrb	r2, [r7, #2]
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f002 ff36 	bl	8006ca4 <VL53L0X_set_vcsel_pulse_period>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	460b      	mov	r3, r1
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f003 f9a6 	bl	80071b2 <VL53L0X_get_vcsel_pulse_period>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
 8003e84:	4613      	mov	r3, r2
 8003e86:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003e94:	f107 030f 	add.w	r3, r7, #15
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f004 f9cf 	bl	8008240 <VL53L0X_RdByte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d159      	bne.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8003eb2:	78bb      	ldrb	r3, [r7, #2]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d12b      	bne.n	8003f10 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d825      	bhi.n	8003f0a <VL53L0X_SetSequenceStepEnable+0x92>
 8003ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed9 	.word	0x08003ed9
 8003ec8:	08003ee3 	.word	0x08003ee3
 8003ecc:	08003eed 	.word	0x08003eed
 8003ed0:	08003ef7 	.word	0x08003ef7
 8003ed4:	08003f01 	.word	0x08003f01
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003ed8:	7dbb      	ldrb	r3, [r7, #22]
 8003eda:	f043 0310 	orr.w	r3, r3, #16
 8003ede:	75bb      	strb	r3, [r7, #22]
				break;
 8003ee0:	e041      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003ee2:	7dbb      	ldrb	r3, [r7, #22]
 8003ee4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8003ee8:	75bb      	strb	r3, [r7, #22]
				break;
 8003eea:	e03c      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003eec:	7dbb      	ldrb	r3, [r7, #22]
 8003eee:	f043 0304 	orr.w	r3, r3, #4
 8003ef2:	75bb      	strb	r3, [r7, #22]
				break;
 8003ef4:	e037      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003ef6:	7dbb      	ldrb	r3, [r7, #22]
 8003ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003efc:	75bb      	strb	r3, [r7, #22]
				break;
 8003efe:	e032      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003f00:	7dbb      	ldrb	r3, [r7, #22]
 8003f02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f06:	75bb      	strb	r3, [r7, #22]
				break;
 8003f08:	e02d      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003f0a:	23fc      	movs	r3, #252	@ 0xfc
 8003f0c:	75fb      	strb	r3, [r7, #23]
 8003f0e:	e02a      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d825      	bhi.n	8003f62 <VL53L0X_SetSequenceStepEnable+0xea>
 8003f16:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f31 	.word	0x08003f31
 8003f20:	08003f3b 	.word	0x08003f3b
 8003f24:	08003f45 	.word	0x08003f45
 8003f28:	08003f4f 	.word	0x08003f4f
 8003f2c:	08003f59 	.word	0x08003f59
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003f30:	7dbb      	ldrb	r3, [r7, #22]
 8003f32:	f023 0310 	bic.w	r3, r3, #16
 8003f36:	75bb      	strb	r3, [r7, #22]
				break;
 8003f38:	e015      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003f3a:	7dbb      	ldrb	r3, [r7, #22]
 8003f3c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8003f40:	75bb      	strb	r3, [r7, #22]
				break;
 8003f42:	e010      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003f44:	7dbb      	ldrb	r3, [r7, #22]
 8003f46:	f023 0304 	bic.w	r3, r3, #4
 8003f4a:	75bb      	strb	r3, [r7, #22]
				break;
 8003f4c:	e00b      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003f4e:	7dbb      	ldrb	r3, [r7, #22]
 8003f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f54:	75bb      	strb	r3, [r7, #22]
				break;
 8003f56:	e006      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003f58:	7dbb      	ldrb	r3, [r7, #22]
 8003f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f5e:	75bb      	strb	r3, [r7, #22]
				break;
 8003f60:	e001      	b.n	8003f66 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003f62:	23fc      	movs	r3, #252	@ 0xfc
 8003f64:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	7dba      	ldrb	r2, [r7, #22]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d01e      	beq.n	8003fac <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8003f76:	7dbb      	ldrb	r3, [r7, #22]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f004 fa57 	bl	8008430 <VL53L0X_WrByte>
 8003f82:	4603      	mov	r3, r0
 8003f84:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8003f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	7dba      	ldrb	r2, [r7, #22]
 8003f92:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8003f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003fa4:	6939      	ldr	r1, [r7, #16]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ff10 	bl	8003dcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	72fb      	strb	r3, [r7, #11]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d836      	bhi.n	8004048 <sequence_step_enabled+0x90>
 8003fda:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <sequence_step_enabled+0x28>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08003ff5 	.word	0x08003ff5
 8003fe4:	08004007 	.word	0x08004007
 8003fe8:	08004019 	.word	0x08004019
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800403d 	.word	0x0800403d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003ff4:	7abb      	ldrb	r3, [r7, #10]
 8003ff6:	111b      	asrs	r3, r3, #4
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	701a      	strb	r2, [r3, #0]
		break;
 8004004:	e022      	b.n	800404c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004006:	7abb      	ldrb	r3, [r7, #10]
 8004008:	10db      	asrs	r3, r3, #3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	b2da      	uxtb	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	701a      	strb	r2, [r3, #0]
		break;
 8004016:	e019      	b.n	800404c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004018:	7abb      	ldrb	r3, [r7, #10]
 800401a:	109b      	asrs	r3, r3, #2
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	701a      	strb	r2, [r3, #0]
		break;
 8004028:	e010      	b.n	800404c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800402a:	7abb      	ldrb	r3, [r7, #10]
 800402c:	119b      	asrs	r3, r3, #6
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	b2da      	uxtb	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	701a      	strb	r2, [r3, #0]
		break;
 800403a:	e007      	b.n	800404c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800403c:	7abb      	ldrb	r3, [r7, #10]
 800403e:	09db      	lsrs	r3, r3, #7
 8004040:	b2da      	uxtb	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	701a      	strb	r2, [r3, #0]
		break;
 8004046:	e001      	b.n	800404c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004048:	23fc      	movs	r3, #252	@ 0xfc
 800404a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800404c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004050:	4618      	mov	r0, r3
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800406e:	f107 030e 	add.w	r3, r7, #14
 8004072:	461a      	mov	r2, r3
 8004074:	2101      	movs	r1, #1
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f004 f8e2 	bl	8008240 <VL53L0X_RdByte>
 800407c:	4603      	mov	r3, r0
 800407e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004088:	7bba      	ldrb	r2, [r7, #14]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2100      	movs	r1, #0
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ff92 	bl	8003fb8 <sequence_step_enabled>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d108      	bne.n	80040b2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80040a0:	7bba      	ldrb	r2, [r7, #14]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	3302      	adds	r3, #2
 80040a6:	2101      	movs	r1, #1
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff85 	bl	8003fb8 <sequence_step_enabled>
 80040ae:	4603      	mov	r3, r0
 80040b0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d108      	bne.n	80040cc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80040ba:	7bba      	ldrb	r2, [r7, #14]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	3301      	adds	r3, #1
 80040c0:	2102      	movs	r1, #2
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ff78 	bl	8003fb8 <sequence_step_enabled>
 80040c8:	4603      	mov	r3, r0
 80040ca:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80040cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80040d4:	7bba      	ldrb	r2, [r7, #14]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	3303      	adds	r3, #3
 80040da:	2103      	movs	r1, #3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ff6b 	bl	8003fb8 <sequence_step_enabled>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d108      	bne.n	8004100 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80040ee:	7bba      	ldrb	r2, [r7, #14]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	3304      	adds	r3, #4
 80040f4:	2104      	movs	r1, #4
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ff5e 	bl	8003fb8 <sequence_step_enabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	460b      	mov	r3, r1
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800411a:	2300      	movs	r3, #0
 800411c:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8004126:	f107 0210 	add.w	r2, r7, #16
 800412a:	7afb      	ldrb	r3, [r7, #11]
 800412c:	4619      	mov	r1, r3
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f002 fbe4 	bl	80068fc <get_sequence_step_timeout>
 8004134:	4603      	mov	r3, r0
 8004136:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8004138:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11c      	bne.n	800417a <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4613      	mov	r3, r2
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800416c:	4a06      	ldr	r2, [pc, #24]	@ (8004188 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800417a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	10624dd3 	.word	0x10624dd3

0800418c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800419a:	f107 030c 	add.w	r3, r7, #12
 800419e:	461a      	mov	r2, r3
 80041a0:	21f8      	movs	r1, #248	@ 0xf8
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f004 f8d2 	bl	800834c <VL53L0X_RdWord>
 80041a8:	4603      	mov	r3, r0
 80041aa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80041ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	461a      	mov	r2, r3
 80041ba:	2104      	movs	r1, #4
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f004 f8fb 	bl	80083b8 <VL53L0X_RdDWord>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80041c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10c      	bne.n	80041e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80041ce:	89bb      	ldrh	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	89ba      	ldrh	r2, [r7, #12]
 80041d8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	7f1b      	ldrb	r3, [r3, #28]
 8004206:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	7bba      	ldrb	r2, [r7, #14]
 800420c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800420e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800422c:	f107 030e 	add.w	r3, r7, #14
 8004230:	461a      	mov	r2, r3
 8004232:	2120      	movs	r1, #32
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f004 f889 	bl	800834c <VL53L0X_RdWord>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800423e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d118      	bne.n	8004278 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	771a      	strb	r2, [r3, #28]
 800425e:	e00b      	b.n	8004278 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004260:	89fb      	ldrh	r3, [r7, #14]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004294:	2300      	movs	r3, #0
 8004296:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d902      	bls.n	80042b0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80042aa:	23fc      	movs	r3, #252	@ 0xfc
 80042ac:	75fb      	strb	r3, [r7, #23]
 80042ae:	e05b      	b.n	8004368 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80042b0:	787b      	ldrb	r3, [r7, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80042be:	2301      	movs	r3, #1
 80042c0:	73bb      	strb	r3, [r7, #14]
 80042c2:	e00a      	b.n	80042da <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	330c      	adds	r3, #12
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d841      	bhi.n	8004364 <VL53L0X_SetLimitCheckEnable+0xe0>
 80042e0:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	08004301 	.word	0x08004301
 80042ec:	0800430b 	.word	0x0800430b
 80042f0:	08004321 	.word	0x08004321
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	08004335 	.word	0x08004335
 80042fc:	0800434d 	.word	0x0800434d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004308:	e02e      	b.n	8004368 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800430e:	b29b      	uxth	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	2144      	movs	r1, #68	@ 0x44
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f004 f8af 	bl	8008478 <VL53L0X_WrWord>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

			break;
 800431e:	e023      	b.n	8004368 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004328:	e01e      	b.n	8004368 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004332:	e019      	b.n	8004368 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800433a:	7b7b      	ldrb	r3, [r7, #13]
 800433c:	22fe      	movs	r2, #254	@ 0xfe
 800433e:	2160      	movs	r1, #96	@ 0x60
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f004 f8c3 	bl	80084cc <VL53L0X_UpdateByte>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800434a:	e00d      	b.n	8004368 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800434c:	7bbb      	ldrb	r3, [r7, #14]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004352:	7b7b      	ldrb	r3, [r7, #13]
 8004354:	22ef      	movs	r2, #239	@ 0xef
 8004356:	2160      	movs	r1, #96	@ 0x60
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f004 f8b7 	bl	80084cc <VL53L0X_UpdateByte>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004362:	e001      	b.n	8004368 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004364:	23fc      	movs	r3, #252	@ 0xfc
 8004366:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10f      	bne.n	8004390 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004370:	787b      	ldrb	r3, [r7, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004382:	e005      	b.n	8004390 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	460b      	mov	r3, r1
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80043ae:	897b      	ldrh	r3, [r7, #10]
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	d905      	bls.n	80043c0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043b4:	23fc      	movs	r3, #252	@ 0xfc
 80043b6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e008      	b.n	80043d2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80043c0:	897b      	ldrh	r3, [r7, #10]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043ca:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	7dba      	ldrb	r2, [r7, #22]
 80043d0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	460b      	mov	r3, r1
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80043f6:	897b      	ldrh	r3, [r7, #10]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004400:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004402:	7dbb      	ldrb	r3, [r7, #22]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d107      	bne.n	8004418 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	330c      	adds	r3, #12
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e040      	b.n	800449a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004418:	897b      	ldrh	r3, [r7, #10]
 800441a:	2b05      	cmp	r3, #5
 800441c:	d830      	bhi.n	8004480 <VL53L0X_SetLimitCheckValue+0x9c>
 800441e:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <VL53L0X_SetLimitCheckValue+0x40>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	0800443d 	.word	0x0800443d
 8004428:	08004445 	.word	0x08004445
 800442c:	0800445b 	.word	0x0800445b
 8004430:	08004463 	.word	0x08004463
 8004434:	0800446b 	.word	0x0800446b
 8004438:	0800446b 	.word	0x0800446b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004442:	e01f      	b.n	8004484 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004448:	b29b      	uxth	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	2144      	movs	r1, #68	@ 0x44
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f004 f812 	bl	8008478 <VL53L0X_WrWord>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004458:	e014      	b.n	8004484 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004460:	e010      	b.n	8004484 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004468:	e00c      	b.n	8004484 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800446e:	b29b      	uxth	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	2164      	movs	r1, #100	@ 0x64
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f003 ffff 	bl	8008478 <VL53L0X_WrWord>
 800447a:	4603      	mov	r3, r0
 800447c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800447e:	e001      	b.n	8004484 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004480:	23fc      	movs	r3, #252	@ 0xfc
 8004482:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800448c:	897b      	ldrh	r3, [r7, #10]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	330c      	adds	r3, #12
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800449a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop

080044a8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	460b      	mov	r3, r1
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80044be:	897b      	ldrh	r3, [r7, #10]
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d847      	bhi.n	8004554 <VL53L0X_GetLimitCheckValue+0xac>
 80044c4:	a201      	add	r2, pc, #4	@ (adr r2, 80044cc <VL53L0X_GetLimitCheckValue+0x24>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044e5 	.word	0x080044e5
 80044d0:	080044f1 	.word	0x080044f1
 80044d4:	08004517 	.word	0x08004517
 80044d8:	08004523 	.word	0x08004523
 80044dc:	0800452f 	.word	0x0800452f
 80044e0:	0800452f 	.word	0x0800452f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	77bb      	strb	r3, [r7, #30]
		break;
 80044ee:	e033      	b.n	8004558 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80044f0:	f107 0316 	add.w	r3, r7, #22
 80044f4:	461a      	mov	r2, r3
 80044f6:	2144      	movs	r1, #68	@ 0x44
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f003 ff27 	bl	800834c <VL53L0X_RdWord>
 80044fe:	4603      	mov	r3, r0
 8004500:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004502:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800450a:	8afb      	ldrh	r3, [r7, #22]
 800450c:	025b      	lsls	r3, r3, #9
 800450e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004510:	2301      	movs	r3, #1
 8004512:	77bb      	strb	r3, [r7, #30]
		break;
 8004514:	e020      	b.n	8004558 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	77bb      	strb	r3, [r7, #30]
		break;
 8004520:	e01a      	b.n	8004558 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	77bb      	strb	r3, [r7, #30]
		break;
 800452c:	e014      	b.n	8004558 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800452e:	f107 0316 	add.w	r3, r7, #22
 8004532:	461a      	mov	r2, r3
 8004534:	2164      	movs	r1, #100	@ 0x64
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f003 ff08 	bl	800834c <VL53L0X_RdWord>
 800453c:	4603      	mov	r3, r0
 800453e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004540:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004548:	8afb      	ldrh	r3, [r7, #22]
 800454a:	025b      	lsls	r3, r3, #9
 800454c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	77bb      	strb	r3, [r7, #30]
		break;
 8004552:	e001      	b.n	8004558 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004554:	23fc      	movs	r3, #252	@ 0xfc
 8004556:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004558:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d12a      	bne.n	80045b6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004560:	7fbb      	ldrb	r3, [r7, #30]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d124      	bne.n	80045b0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d110      	bne.n	800458e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800456c:	897b      	ldrh	r3, [r7, #10]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	330c      	adds	r3, #12
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004580:	897b      	ldrh	r3, [r7, #10]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800458c:	e013      	b.n	80045b6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004594:	897b      	ldrh	r3, [r7, #10]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	330c      	adds	r3, #12
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80045ae:	e002      	b.n	80045b6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80045b6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop

080045c4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80045d2:	f107 030e 	add.w	r3, r7, #14
 80045d6:	461a      	mov	r2, r3
 80045d8:	2101      	movs	r1, #1
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f003 fe30 	bl	8008240 <VL53L0X_RdByte>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80045e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10e      	bne.n	800460a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80045ec:	7bba      	ldrb	r2, [r7, #14]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 80045f4:	7bbb      	ldrb	r3, [r7, #14]
 80045f6:	b25b      	sxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da03      	bge.n	8004604 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e002      	b.n	800460a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800460a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800461c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004630:	2300      	movs	r3, #0
 8004632:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004634:	f107 030e 	add.w	r3, r7, #14
 8004638:	4619      	mov	r1, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fb94 	bl	8003d68 <VL53L0X_GetDeviceMode>
 8004640:	4603      	mov	r3, r0
 8004642:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800464c:	7bbb      	ldrb	r3, [r7, #14]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f898 	bl	8004788 <VL53L0X_StartMeasurement>
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800465c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fafd 	bl	8005c64 <VL53L0X_measurement_poll_for_completion>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004676:	7bbb      	ldrb	r3, [r7, #14]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2203      	movs	r2, #3
 8004680:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800469c:	2300      	movs	r3, #0
 800469e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80046a0:	2301      	movs	r3, #1
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f001 fa9f 	bl	8005bea <VL53L0X_perform_ref_calibration>
 80046ac:	4603      	mov	r3, r0
 80046ae:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80046b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80046d2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80046d4:	7dbb      	ldrb	r3, [r7, #22]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d005      	beq.n	80046e6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80046da:	7dbb      	ldrb	r3, [r7, #22]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d002      	beq.n	80046e6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80046e0:	7dbb      	ldrb	r3, [r7, #22]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d147      	bne.n	8004776 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80046e6:	f107 030c 	add.w	r3, r7, #12
 80046ea:	f107 0210 	add.w	r2, r7, #16
 80046ee:	2101      	movs	r1, #1
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb83 	bl	8004dfc <VL53L0X_GetInterruptThresholds>
 80046f6:	4603      	mov	r3, r0
 80046f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8004700:	d803      	bhi.n	800470a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004702:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004704:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8004708:	d935      	bls.n	8004776 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800470a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d131      	bne.n	8004776 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004718:	491a      	ldr	r1, [pc, #104]	@ (8004784 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f002 ff12 	bl	8007544 <VL53L0X_load_tuning_settings>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]
 8004724:	e027      	b.n	8004776 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004726:	2204      	movs	r2, #4
 8004728:	21ff      	movs	r1, #255	@ 0xff
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f003 fe80 	bl	8008430 <VL53L0X_WrByte>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	4313      	orrs	r3, r2
 8004738:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800473a:	2200      	movs	r2, #0
 800473c:	2170      	movs	r1, #112	@ 0x70
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f003 fe76 	bl	8008430 <VL53L0X_WrByte>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	4313      	orrs	r3, r2
 800474c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800474e:	2200      	movs	r2, #0
 8004750:	21ff      	movs	r1, #255	@ 0xff
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f003 fe6c 	bl	8008430 <VL53L0X_WrByte>
 8004758:	4603      	mov	r3, r0
 800475a:	461a      	mov	r2, r3
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	4313      	orrs	r3, r2
 8004760:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004762:	2200      	movs	r2, #0
 8004764:	2180      	movs	r1, #128	@ 0x80
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f003 fe62 	bl	8008430 <VL53L0X_WrByte>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	4313      	orrs	r3, r2
 8004774:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004776:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000104 	.word	0x20000104

08004788 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004798:	f107 030e 	add.w	r3, r7, #14
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fae2 	bl	8003d68 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 80047a4:	7bbb      	ldrb	r3, [r7, #14]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d052      	beq.n	8004850 <VL53L0X_StartMeasurement+0xc8>
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	dc6a      	bgt.n	8004884 <VL53L0X_StartMeasurement+0xfc>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <VL53L0X_StartMeasurement+0x30>
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d032      	beq.n	800481c <VL53L0X_StartMeasurement+0x94>
 80047b6:	e065      	b.n	8004884 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80047b8:	2201      	movs	r2, #1
 80047ba:	2100      	movs	r1, #0
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f003 fe37 	bl	8008430 <VL53L0X_WrByte>
 80047c2:	4603      	mov	r3, r0
 80047c4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80047ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d15b      	bne.n	800488a <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 80047dc:	f107 030d 	add.w	r3, r7, #13
 80047e0:	461a      	mov	r2, r3
 80047e2:	2100      	movs	r1, #0
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f003 fd2b 	bl	8008240 <VL53L0X_RdByte>
 80047ea:	4603      	mov	r3, r0
 80047ec:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3301      	adds	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80047f4:	7b7a      	ldrb	r2, [r7, #13]
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	4013      	ands	r3, r2
 80047fa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d106      	bne.n	8004810 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 8004802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2bc7      	cmp	r3, #199	@ 0xc7
 800480e:	d9e2      	bls.n	80047d6 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2bc7      	cmp	r3, #199	@ 0xc7
 8004814:	d939      	bls.n	800488a <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004816:	23f9      	movs	r3, #249	@ 0xf9
 8004818:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800481a:	e036      	b.n	800488a <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800481c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004824:	2101      	movs	r1, #1
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff48 	bl	80046bc <VL53L0X_CheckAndLoadInterruptSettings>
 800482c:	4603      	mov	r3, r0
 800482e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004830:	2202      	movs	r2, #2
 8004832:	2100      	movs	r1, #0
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f003 fdfb 	bl	8008430 <VL53L0X_WrByte>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800483e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d123      	bne.n	800488e <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2204      	movs	r2, #4
 800484a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800484e:	e01e      	b.n	800488e <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004858:	2101      	movs	r1, #1
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff ff2e 	bl	80046bc <VL53L0X_CheckAndLoadInterruptSettings>
 8004860:	4603      	mov	r3, r0
 8004862:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004864:	2204      	movs	r2, #4
 8004866:	2100      	movs	r1, #0
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f003 fde1 	bl	8008430 <VL53L0X_WrByte>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8004882:	e006      	b.n	8004892 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004884:	23f8      	movs	r3, #248	@ 0xf8
 8004886:	75fb      	strb	r3, [r7, #23]
 8004888:	e004      	b.n	8004894 <VL53L0X_StartMeasurement+0x10c>
		break;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <VL53L0X_StartMeasurement+0x10c>
		break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <VL53L0X_StartMeasurement+0x10c>
		break;
 8004892:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004894:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80048b4:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d112      	bne.n	80048e2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80048bc:	f107 0308 	add.w	r3, r7, #8
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb0e 	bl	8004ee4 <VL53L0X_GetInterruptMaskStatus>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d103      	bne.n	80048da <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e01c      	b.n	8004914 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	e018      	b.n	8004914 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80048e2:	f107 030d 	add.w	r3, r7, #13
 80048e6:	461a      	mov	r2, r3
 80048e8:	2114      	movs	r1, #20
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f003 fca8 	bl	8008240 <VL53L0X_RdByte>
 80048f0:	4603      	mov	r3, r0
 80048f2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80048f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80048fc:	7b7b      	ldrb	r3, [r7, #13]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e002      	b.n	8004914 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b096      	sub	sp, #88	@ 0x58
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004930:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004934:	230c      	movs	r3, #12
 8004936:	2114      	movs	r1, #20
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f003 fcdb 	bl	80082f4 <VL53L0X_ReadMulti>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004944:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 80c8 	bne.w	8004ade <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800495a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	b29b      	uxth	r3, r3
 8004962:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004966:	4413      	add	r3, r2
 8004968:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	b29b      	uxth	r3, r3
 800497a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800497e:	4413      	add	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	025b      	lsls	r3, r3, #9
 8004984:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800498a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800498c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	b29b      	uxth	r3, r3
 8004994:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8004998:	4413      	add	r3, r2
 800499a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800499e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80049a2:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80049a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80049b4:	4413      	add	r3, r2
 80049b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80049c0:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80049c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8b3 314e 	ldrh.w	r3, [r3, #334]	@ 0x14e
 80049d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80049d8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80049dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80049de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049e2:	d046      	beq.n	8004a72 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80049e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80049e6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80049f2:	4a58      	ldr	r2, [pc, #352]	@ (8004b54 <VL53L0X_GetRangingMeasurementData+0x234>)
 80049f4:	fb82 1203 	smull	r1, r2, r2, r3
 80049f8:	1192      	asrs	r2, r2, #6
 80049fa:	17db      	asrs	r3, r3, #31
 80049fc:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80049fe:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7f1b      	ldrb	r3, [r3, #28]
 8004a0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004a10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02c      	beq.n	8004a72 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004a18:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a1a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d10d      	bne.n	8004a46 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 8004a2a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8004a32:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004a36:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004a3a:	e016      	b.n	8004a6a <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8004a3c:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8004a40:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004a44:	e011      	b.n	8004a6a <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004a46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a4c:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004a50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a52:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004a5a:	121b      	asrs	r3, r3, #8
 8004a5c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a60:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004a66:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004a6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004a6e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004a72:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004a7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004a7e:	089b      	lsrs	r3, r3, #2
 8004a80:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004a86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	75da      	strb	r2, [r3, #23]
 8004a94:	e006      	b.n	8004aa4 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004a9c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004aa4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004aa8:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004aac:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f003 f9a4 	bl	8007e08 <VL53L0X_get_pal_range_status>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004ace:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004ad6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ade:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d12f      	bne.n	8004b46 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f107 040c 	add.w	r4, r7, #12
 8004aec:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8004af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004b00:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004b0e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004b14:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004b1a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004b20:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004b26:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004b2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8004b36:	f107 050c 	add.w	r5, r7, #12
 8004b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b46:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3750      	adds	r7, #80	@ 0x50
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bdb0      	pop	{r4, r5, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	10624dd3 	.word	0x10624dd3

08004b58 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004b66:	2100      	movs	r1, #0
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff f8d1 	bl	8003d10 <VL53L0X_SetDeviceMode>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fd54 	bl	8004628 <VL53L0X_PerformSingleMeasurement>
 8004b80:	4603      	mov	r3, r0
 8004b82:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fec6 	bl	8004920 <VL53L0X_GetRangingMeasurementData>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f95e 	bl	8004e64 <VL53L0X_ClearInterruptMask>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	70fb      	strb	r3, [r7, #3]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70bb      	strb	r3, [r7, #2]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004bdc:	23f6      	movs	r3, #246	@ 0xf6
 8004bde:	73fb      	strb	r3, [r7, #15]
 8004be0:	e105      	b.n	8004dee <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004be2:	78bb      	ldrb	r3, [r7, #2]
 8004be4:	2b14      	cmp	r3, #20
 8004be6:	d110      	bne.n	8004c0a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004be8:	7e3b      	ldrb	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004bee:	2310      	movs	r3, #16
 8004bf0:	73bb      	strb	r3, [r7, #14]
 8004bf2:	e001      	b.n	8004bf8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004bf8:	7bbb      	ldrb	r3, [r7, #14]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2184      	movs	r1, #132	@ 0x84
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f003 fc16 	bl	8008430 <VL53L0X_WrByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e0f1      	b.n	8004dee <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004c0a:	78bb      	ldrb	r3, [r7, #2]
 8004c0c:	2b15      	cmp	r3, #21
 8004c0e:	f040 8097 	bne.w	8004d40 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004c12:	2201      	movs	r2, #1
 8004c14:	21ff      	movs	r1, #255	@ 0xff
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f003 fc0a 	bl	8008430 <VL53L0X_WrByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004c26:	2200      	movs	r2, #0
 8004c28:	2100      	movs	r1, #0
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f003 fc00 	bl	8008430 <VL53L0X_WrByte>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	21ff      	movs	r1, #255	@ 0xff
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f003 fbf6 	bl	8008430 <VL53L0X_WrByte>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461a      	mov	r2, r3
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2180      	movs	r1, #128	@ 0x80
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f003 fbec 	bl	8008430 <VL53L0X_WrByte>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004c62:	2202      	movs	r2, #2
 8004c64:	2185      	movs	r1, #133	@ 0x85
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f003 fbe2 	bl	8008430 <VL53L0X_WrByte>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004c76:	2204      	movs	r2, #4
 8004c78:	21ff      	movs	r1, #255	@ 0xff
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f003 fbd8 	bl	8008430 <VL53L0X_WrByte>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	21cd      	movs	r1, #205	@ 0xcd
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f003 fbce 	bl	8008430 <VL53L0X_WrByte>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004c9e:	2211      	movs	r2, #17
 8004ca0:	21cc      	movs	r1, #204	@ 0xcc
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f003 fbc4 	bl	8008430 <VL53L0X_WrByte>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	21ff      	movs	r1, #255	@ 0xff
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f003 fbba 	bl	8008430 <VL53L0X_WrByte>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	21be      	movs	r1, #190	@ 0xbe
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f003 fbb0 	bl	8008430 <VL53L0X_WrByte>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004cda:	2206      	movs	r2, #6
 8004cdc:	21ff      	movs	r1, #255	@ 0xff
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f003 fba6 	bl	8008430 <VL53L0X_WrByte>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004cee:	2209      	movs	r2, #9
 8004cf0:	21cc      	movs	r1, #204	@ 0xcc
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f003 fb9c 	bl	8008430 <VL53L0X_WrByte>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004d02:	2200      	movs	r2, #0
 8004d04:	21ff      	movs	r1, #255	@ 0xff
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f003 fb92 	bl	8008430 <VL53L0X_WrByte>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004d16:	2201      	movs	r2, #1
 8004d18:	21ff      	movs	r1, #255	@ 0xff
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f003 fb88 	bl	8008430 <VL53L0X_WrByte>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f003 fb7e 	bl	8008430 <VL53L0X_WrByte>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	73fb      	strb	r3, [r7, #15]
 8004d3e:	e056      	b.n	8004dee <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d120      	bne.n	8004d8a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004d48:	787b      	ldrb	r3, [r7, #1]
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d81b      	bhi.n	8004d86 <VL53L0X_SetGpioConfig+0x1ce>
 8004d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <VL53L0X_SetGpioConfig+0x19c>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d69 	.word	0x08004d69
 8004d58:	08004d6f 	.word	0x08004d6f
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d7b 	.word	0x08004d7b
 8004d64:	08004d81 	.word	0x08004d81
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73bb      	strb	r3, [r7, #14]
				break;
 8004d6c:	e00d      	b.n	8004d8a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73bb      	strb	r3, [r7, #14]
				break;
 8004d72:	e00a      	b.n	8004d8a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004d74:	2302      	movs	r3, #2
 8004d76:	73bb      	strb	r3, [r7, #14]
				break;
 8004d78:	e007      	b.n	8004d8a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	73bb      	strb	r3, [r7, #14]
				break;
 8004d7e:	e004      	b.n	8004d8a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004d80:	2304      	movs	r3, #4
 8004d82:	73bb      	strb	r3, [r7, #14]
				break;
 8004d84:	e001      	b.n	8004d8a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8004d86:	23f5      	movs	r3, #245	@ 0xf5
 8004d88:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	461a      	mov	r2, r3
 8004d96:	210a      	movs	r1, #10
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f003 fb49 	bl	8008430 <VL53L0X_WrByte>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10f      	bne.n	8004dca <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004daa:	7e3b      	ldrb	r3, [r7, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73bb      	strb	r3, [r7, #14]
 8004db4:	e001      	b.n	8004dba <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8004db6:	2310      	movs	r3, #16
 8004db8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004dba:	7bbb      	ldrb	r3, [r7, #14]
 8004dbc:	22ef      	movs	r2, #239	@ 0xef
 8004dbe:	2184      	movs	r1, #132	@ 0x84
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f003 fb83 	bl	80084cc <VL53L0X_UpdateByte>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	787a      	ldrb	r2, [r7, #1]
 8004dd6:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004de2:	2100      	movs	r1, #0
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f83d 	bl	8004e64 <VL53L0X_ClearInterruptMask>
 8004dea:	4603      	mov	r3, r0
 8004dec:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop

08004dfc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	461a      	mov	r2, r3
 8004e16:	210e      	movs	r1, #14
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f003 fa97 	bl	800834c <VL53L0X_RdWord>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004e22:	8abb      	ldrh	r3, [r7, #20]
 8004e24:	045a      	lsls	r2, r3, #17
 8004e26:	4b0e      	ldr	r3, [pc, #56]	@ (8004e60 <VL53L0X_GetInterruptThresholds+0x64>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10e      	bne.n	8004e54 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	210c      	movs	r1, #12
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f003 fa84 	bl	800834c <VL53L0X_RdWord>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004e48:	8abb      	ldrh	r3, [r7, #20]
 8004e4a:	045a      	lsls	r2, r3, #17
 8004e4c:	4b04      	ldr	r3, [pc, #16]	@ (8004e60 <VL53L0X_GetInterruptThresholds+0x64>)
 8004e4e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	1ffe0000 	.word	0x1ffe0000

08004e64 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004e76:	2201      	movs	r2, #1
 8004e78:	210b      	movs	r1, #11
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f003 fad8 	bl	8008430 <VL53L0X_WrByte>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004e84:	2200      	movs	r2, #0
 8004e86:	210b      	movs	r1, #11
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f003 fad1 	bl	8008430 <VL53L0X_WrByte>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461a      	mov	r2, r3
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004e98:	f107 030d 	add.w	r3, r7, #13
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2113      	movs	r1, #19
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f003 f9cd 	bl	8008240 <VL53L0X_RdByte>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004eb6:	7b7b      	ldrb	r3, [r7, #13]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d803      	bhi.n	8004ece <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0d3      	beq.n	8004e76 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004ed4:	23f4      	movs	r3, #244	@ 0xf4
 8004ed6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004ef2:	f107 030e 	add.w	r3, r7, #14
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2113      	movs	r1, #19
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f003 f9a0 	bl	8008240 <VL53L0X_RdByte>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	f003 0207 	and.w	r2, r3, #7
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	f003 0318 	and.w	r3, r3, #24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004f18:	23fa      	movs	r3, #250	@ 0xfa
 8004f1a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fa03 	bl	8005348 <VL53L0X_perform_ref_spad_management>
 8004f42:	4603      	mov	r3, r0
 8004f44:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004f60:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004f64:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f6a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	461a      	mov	r2, r3
 8004f72:	2128      	movs	r1, #40	@ 0x28
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f003 f9e9 	bl	800834c <VL53L0X_RdWord>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d11e      	bne.n	8004fc4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004f86:	893b      	ldrh	r3, [r7, #8]
 8004f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004f90:	893b      	ldrh	r3, [r7, #8]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	dd0b      	ble.n	8004fb4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004f9c:	893a      	ldrh	r2, [r7, #8]
 8004f9e:	897b      	ldrh	r3, [r7, #10]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
					* 250;
 8004fa8:	23fa      	movs	r3, #250	@ 0xfa
 8004faa:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e007      	b.n	8004fc4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004fb4:	893b      	ldrh	r3, [r7, #8]
 8004fb6:	b21b      	sxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	23fa      	movs	r3, #250	@ 0xfa
 8004fbc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b08b      	sub	sp, #44	@ 0x2c
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004fde:	2308      	movs	r3, #8
 8004fe0:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fec:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	fb01 f202 	mul.w	r2, r1, r2
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
 800500e:	e030      	b.n	8005072 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	4413      	add	r3, r2
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800501e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	429a      	cmp	r2, r3
 8005024:	d11e      	bne.n	8005064 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005026:	7ffa      	ldrb	r2, [r7, #31]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	fa42 f303 	asr.w	r3, r2, r3
 800502e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005034:	e016      	b.n	8005064 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005036:	7ffb      	ldrb	r3, [r7, #31]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <get_next_good_spad+0x88>
				success = 1;
 8005040:	2301      	movs	r3, #1
 8005042:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	fb03 f202 	mul.w	r2, r3, r2
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	4413      	add	r3, r2
 8005050:	461a      	mov	r2, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	601a      	str	r2, [r3, #0]
				break;
 8005056:	e009      	b.n	800506c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005058:	7ffb      	ldrb	r3, [r7, #31]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	3301      	adds	r3, #1
 8005062:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	429a      	cmp	r2, r3
 800506a:	d3e4      	bcc.n	8005036 <get_next_good_spad+0x66>
				coarseIndex++) {
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	3301      	adds	r3, #1
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d202      	bcs.n	8005080 <get_next_good_spad+0xb0>
 800507a:	7fbb      	ldrb	r3, [r7, #30]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0c7      	beq.n	8005010 <get_next_good_spad+0x40>
		}
	}
}
 8005080:	bf00      	nop
 8005082:	372c      	adds	r7, #44	@ 0x2c
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800509e:	4a07      	ldr	r2, [pc, #28]	@ (80050bc <is_aperture+0x30>)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <is_aperture+0x22>
		isAperture = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	200002bc 	.word	0x200002bc

080050c0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	@ 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80050d0:	2308      	movs	r3, #8
 80050d2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	fb01 f202 	mul.w	r2, r1, r2
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d302      	bcc.n	80050fe <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80050f8:	23ce      	movs	r3, #206	@ 0xce
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	e010      	b.n	8005120 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	b25a      	sxtb	r2, r3
 8005108:	2101      	movs	r1, #1
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	b25b      	sxtb	r3, r3
 8005112:	4313      	orrs	r3, r2
 8005114:	b259      	sxtb	r1, r3
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4413      	add	r3, r2
 800511c:	b2ca      	uxtb	r2, r1
 800511e:	701a      	strb	r2, [r3, #0]

	return status;
 8005120:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3724      	adds	r7, #36	@ 0x24
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800513a:	2306      	movs	r3, #6
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	21b0      	movs	r1, #176	@ 0xb0
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f003 f8a7 	bl	8008294 <VL53L0X_WriteMulti>
 8005146:	4603      	mov	r3, r0
 8005148:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800514a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005160:	2306      	movs	r3, #6
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	21b0      	movs	r1, #176	@ 0xb0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f003 f8c4 	bl	80082f4 <VL53L0X_ReadMulti>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	@ 0x30
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	460b      	mov	r3, r1
 800518a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800518c:	2300      	movs	r3, #0
 800518e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005194:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005198:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800519a:	2300      	movs	r3, #0
 800519c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800519e:	e02b      	b.n	80051f8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80051a0:	f107 031c 	add.w	r3, r7, #28
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff11 	bl	8004fd0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051b4:	d103      	bne.n	80051be <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80051b6:	23ce      	movs	r3, #206	@ 0xce
 80051b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80051bc:	e020      	b.n	8005200 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	461a      	mov	r2, r3
 80051c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c4:	4413      	add	r3, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff ff60 	bl	800508c <is_aperture>
 80051cc:	4603      	mov	r3, r0
 80051ce:	461a      	mov	r2, r3
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80051d6:	23ce      	movs	r3, #206	@ 0xce
 80051d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80051dc:	e010      	b.n	8005200 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80051e2:	6a3a      	ldr	r2, [r7, #32]
 80051e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051e6:	6838      	ldr	r0, [r7, #0]
 80051e8:	f7ff ff6a 	bl	80050c0 <enable_spad_bit>
		currentSpad++;
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	3301      	adds	r3, #1
 80051f0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	3301      	adds	r3, #1
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d3cf      	bcc.n	80051a0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005206:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff ff8d 	bl	8005130 <set_ref_spad_map>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800521c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d121      	bne.n	8005268 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4619      	mov	r1, r3
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ff93 	bl	8005156 <get_ref_spad_map>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800523a:	e011      	b.n	8005260 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	4413      	add	r3, r2
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	f107 0114 	add.w	r1, r7, #20
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	440b      	add	r3, r1
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d003      	beq.n	800525a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005252:	23ce      	movs	r3, #206	@ 0xce
 8005254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8005258:	e006      	b.n	8005268 <enable_ref_spads+0xec>
			}
			i++;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	3301      	adds	r3, #1
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8005260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	429a      	cmp	r2, r3
 8005266:	d3e9      	bcc.n	800523c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005268:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800526c:	4618      	mov	r0, r3
 800526e:	3730      	adds	r7, #48	@ 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	@ 0x28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005290:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005294:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005298:	2b00      	cmp	r3, #0
 800529a:	d107      	bne.n	80052ac <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800529c:	22c0      	movs	r2, #192	@ 0xc0
 800529e:	2101      	movs	r1, #1
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f003 f8c5 	bl	8008430 <VL53L0X_WrByte>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80052ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d108      	bne.n	80052c6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fc4c 	bl	8004b58 <VL53L0X_PerformSingleRangingMeasurement>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80052c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d107      	bne.n	80052de <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80052ce:	2201      	movs	r2, #1
 80052d0:	21ff      	movs	r1, #255	@ 0xff
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f003 f8ac 	bl	8008430 <VL53L0X_WrByte>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 80052de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	21b6      	movs	r1, #182	@ 0xb6
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f003 f82e 	bl	800834c <VL53L0X_RdWord>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80052f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d107      	bne.n	800530e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80052fe:	2200      	movs	r2, #0
 8005300:	21ff      	movs	r1, #255	@ 0xff
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f003 f894 	bl	8008430 <VL53L0X_WrByte>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800530e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005312:	2b00      	cmp	r3, #0
 8005314:	d112      	bne.n	800533c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005316:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800531a:	461a      	mov	r2, r3
 800531c:	2101      	movs	r1, #1
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f003 f886 	bl	8008430 <VL53L0X_WrByte>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800532a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005338:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800533c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005340:	4618      	mov	r0, r3
 8005342:	3728      	adds	r7, #40	@ 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b09d      	sub	sp, #116	@ 0x74
 800534c:	af06      	add	r7, sp, #24
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800535a:	23b4      	movs	r3, #180	@ 0xb4
 800535c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8005360:	2303      	movs	r3, #3
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8005364:	232c      	movs	r3, #44	@ 0x2c
 8005366:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005374:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005378:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8005382:	2306      	movs	r3, #6
 8005384:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 80053ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b2:	e009      	b.n	80053c8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80053c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c4:	3301      	adds	r3, #1
 80053c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d3f1      	bcc.n	80053b4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80053d0:	2201      	movs	r2, #1
 80053d2:	21ff      	movs	r1, #255	@ 0xff
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f003 f82b 	bl	8008430 <VL53L0X_WrByte>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80053e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80053e8:	2200      	movs	r2, #0
 80053ea:	214f      	movs	r1, #79	@ 0x4f
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f003 f81f 	bl	8008430 <VL53L0X_WrByte>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80053f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005400:	222c      	movs	r2, #44	@ 0x2c
 8005402:	214e      	movs	r1, #78	@ 0x4e
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f003 f813 	bl	8008430 <VL53L0X_WrByte>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005410:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005418:	2200      	movs	r2, #0
 800541a:	21ff      	movs	r1, #255	@ 0xff
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f003 f807 	bl	8008430 <VL53L0X_WrByte>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005428:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005430:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005434:	461a      	mov	r2, r3
 8005436:	21b6      	movs	r1, #182	@ 0xb6
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f002 fff9 	bl	8008430 <VL53L0X_WrByte>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005444:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	@ 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f002 ffed 	bl	8008430 <VL53L0X_WrByte>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800545c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005464:	f107 0210 	add.w	r2, r7, #16
 8005468:	f107 0111 	add.w	r1, r7, #17
 800546c:	2300      	movs	r3, #0
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fbbb 	bl	8005bea <VL53L0X_perform_ref_calibration>
 8005474:	4603      	mov	r3, r0
 8005476:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800547a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800547e:	2b00      	cmp	r3, #0
 8005480:	d121      	bne.n	80054c6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8005486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005488:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800548e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005490:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800549e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80054a2:	f107 0218 	add.w	r2, r7, #24
 80054a6:	9204      	str	r2, [sp, #16]
 80054a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054aa:	9203      	str	r2, [sp, #12]
 80054ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054ae:	9202      	str	r2, [sp, #8]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4623      	mov	r3, r4
 80054b8:	4602      	mov	r2, r0
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff fe5e 	bl	800517c <enable_ref_spads>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d174      	bne.n	80055b8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 80054d2:	f107 0312 	add.w	r3, r7, #18
 80054d6:	4619      	mov	r1, r3
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fecb 	bl	8005274 <perform_ref_signal_measurement>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80054e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d161      	bne.n	80055b0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80054ec:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80054ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d25d      	bcs.n	80055b0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054f8:	e009      	b.n	800550e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054fe:	4413      	add	r3, r2
 8005500:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800550a:	3301      	adds	r3, #1
 800550c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800550e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	429a      	cmp	r2, r3
 8005514:	d3f1      	bcc.n	80054fa <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005516:	e002      	b.n	800551e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800551a:	3301      	adds	r3, #1
 800551c:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800551e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8005522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005524:	4413      	add	r3, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fdb0 	bl	800508c <is_aperture>
 800552c:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <VL53L0X_perform_ref_spad_management+0x1f2>
 8005532:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	429a      	cmp	r2, r3
 8005538:	d3ee      	bcc.n	8005518 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800553a:	2301      	movs	r3, #1
 800553c:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800553e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005540:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800554e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005552:	f107 0218 	add.w	r2, r7, #24
 8005556:	9204      	str	r2, [sp, #16]
 8005558:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800555a:	9203      	str	r2, [sp, #12]
 800555c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800555e:	9202      	str	r2, [sp, #8]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	4623      	mov	r3, r4
 8005568:	4602      	mov	r2, r0
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff fe06 	bl	800517c <enable_ref_spads>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005576:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800557a:	2b00      	cmp	r3, #0
 800557c:	d11b      	bne.n	80055b6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005582:	f107 0312 	add.w	r3, r7, #18
 8005586:	4619      	mov	r1, r3
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fe73 	bl	8005274 <perform_ref_signal_measurement>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005594:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10c      	bne.n	80055b6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800559c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800559e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d208      	bcs.n	80055b6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80055ae:	e002      	b.n	80055b6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b4:	e000      	b.n	80055b8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80055b6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80055b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 80af 	bne.w	8005720 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80055c2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80055c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80055c6:	429a      	cmp	r2, r3
 80055c8:	f240 80aa 	bls.w	8005720 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80055cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ce:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 80055d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 80055dc:	f107 031c 	add.w	r3, r7, #28
 80055e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055e2:	4618      	mov	r0, r3
 80055e4:	f003 f814 	bl	8008610 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80055e8:	8a7b      	ldrh	r3, [r7, #18]
 80055ea:	461a      	mov	r2, r3
 80055ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfb8      	it	lt
 80055f4:	425b      	neglt	r3, r3
 80055f6:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 80055fe:	e086      	b.n	800570e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800560c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800560e:	f7ff fcdf 	bl	8004fd0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005618:	d103      	bne.n	8005622 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800561a:	23ce      	movs	r3, #206	@ 0xce
 800561c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8005620:	e07e      	b.n	8005720 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005624:	3301      	adds	r3, #1
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005628:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fd2b 	bl	800508c <is_aperture>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005640:	23ce      	movs	r3, #206	@ 0xce
 8005642:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8005646:	e06b      	b.n	8005720 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 8005652:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fd32 	bl	80050c0 <enable_spad_bit>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005662:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10c      	bne.n	8005684 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800566a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800566c:	3301      	adds	r3, #1
 800566e:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 8005676:	4619      	mov	r1, r3
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff fd59 	bl	8005130 <set_ref_spad_map>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005684:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005688:	2b00      	cmp	r3, #0
 800568a:	d146      	bne.n	800571a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800568c:	f107 0312 	add.w	r3, r7, #18
 8005690:	4619      	mov	r1, r3
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fdee 	bl	8005274 <perform_ref_signal_measurement>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800569e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d13b      	bne.n	800571e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80056a6:	8a7b      	ldrh	r3, [r7, #18]
 80056a8:	461a      	mov	r2, r3
 80056aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bfb8      	it	lt
 80056b2:	425b      	neglt	r3, r3
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 80056b6:	8a7b      	ldrh	r3, [r7, #18]
 80056b8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d21c      	bcs.n	80056f8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80056be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d914      	bls.n	80056f0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80056c6:	f107 031c 	add.w	r3, r7, #28
 80056ca:	4619      	mov	r1, r3
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff fd2f 	bl	8005130 <set_ref_spad_map>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 80056de:	f107 011c 	add.w	r1, r7, #28
 80056e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056e4:	4618      	mov	r0, r3
 80056e6:	f002 ff93 	bl	8008610 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	3b01      	subs	r3, #1
 80056ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e00a      	b.n	800570e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 8005702:	f107 031c 	add.w	r3, r7, #28
 8005706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005708:	4618      	mov	r0, r3
 800570a:	f002 ff81 	bl	8008610 <memcpy>
		while (!complete) {
 800570e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005712:	2b00      	cmp	r3, #0
 8005714:	f43f af74 	beq.w	8005600 <VL53L0X_perform_ref_spad_management+0x2b8>
 8005718:	e002      	b.n	8005720 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800571e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005720:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005724:	2b00      	cmp	r3, #0
 8005726:	d115      	bne.n	8005754 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800572c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8005734:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005754:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8005758:	4618      	mov	r0, r3
 800575a:	375c      	adds	r7, #92	@ 0x5c
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}

08005760 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b093      	sub	sp, #76	@ 0x4c
 8005764:	af06      	add	r7, sp, #24
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800576e:	2300      	movs	r3, #0
 8005770:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8005778:	23b4      	movs	r3, #180	@ 0xb4
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800577e:	2306      	movs	r3, #6
 8005780:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005782:	232c      	movs	r3, #44	@ 0x2c
 8005784:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005786:	2201      	movs	r2, #1
 8005788:	21ff      	movs	r1, #255	@ 0xff
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f002 fe50 	bl	8008430 <VL53L0X_WrByte>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005796:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800579a:	2b00      	cmp	r3, #0
 800579c:	d107      	bne.n	80057ae <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800579e:	2200      	movs	r2, #0
 80057a0:	214f      	movs	r1, #79	@ 0x4f
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f002 fe44 	bl	8008430 <VL53L0X_WrByte>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80057ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80057b6:	222c      	movs	r2, #44	@ 0x2c
 80057b8:	214e      	movs	r1, #78	@ 0x4e
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f002 fe38 	bl	8008430 <VL53L0X_WrByte>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80057c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80057ce:	2200      	movs	r2, #0
 80057d0:	21ff      	movs	r1, #255	@ 0xff
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f002 fe2c 	bl	8008430 <VL53L0X_WrByte>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80057de:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80057e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057ea:	461a      	mov	r2, r3
 80057ec:	21b6      	movs	r1, #182	@ 0xb6
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f002 fe1e 	bl	8008430 <VL53L0X_WrByte>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80057fa:	2300      	movs	r3, #0
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fe:	e009      	b.n	8005814 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	4413      	add	r3, r2
 8005806:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	3301      	adds	r3, #1
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	429a      	cmp	r2, r3
 800581a:	d3f1      	bcc.n	8005800 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d011      	beq.n	8005846 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005822:	e002      	b.n	800582a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005826:	3301      	adds	r3, #1
 8005828:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800582a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	4413      	add	r3, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fc2a 	bl	800508c <is_aperture>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <VL53L0X_set_reference_spads+0xe6>
 800583e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3ee      	bcc.n	8005824 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 8005852:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005856:	79f9      	ldrb	r1, [r7, #7]
 8005858:	f107 0214 	add.w	r2, r7, #20
 800585c:	9204      	str	r2, [sp, #16]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	9203      	str	r2, [sp, #12]
 8005862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4623      	mov	r3, r4
 800586e:	4602      	mov	r2, r0
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff fc83 	bl	800517c <enable_ref_spads>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800587c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10c      	bne.n	800589e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	79fa      	ldrb	r2, [r7, #7]
 800589a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800589e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3734      	adds	r7, #52	@ 0x34
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd90      	pop	{r4, r7, pc}

080058aa <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80058ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	2100      	movs	r1, #0
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f002 fdae 	bl	8008430 <VL53L0X_WrByte>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80058d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9bf 	bl	8005c64 <VL53L0X_measurement_poll_for_completion>
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80058ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d105      	bne.n	80058fe <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80058f2:	2100      	movs	r1, #0
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fab5 	bl	8004e64 <VL53L0X_ClearInterruptMask>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80058fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f002 fd90 	bl	8008430 <VL53L0X_WrByte>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4603      	mov	r3, r0
 8005930:	70fb      	strb	r3, [r7, #3]
 8005932:	460b      	mov	r3, r1
 8005934:	70bb      	strb	r3, [r7, #2]
 8005936:	4613      	mov	r3, r2
 8005938:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005942:	2201      	movs	r2, #1
 8005944:	21ff      	movs	r1, #255	@ 0xff
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f002 fd72 	bl	8008430 <VL53L0X_WrByte>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	4313      	orrs	r3, r2
 8005954:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005956:	2200      	movs	r2, #0
 8005958:	2100      	movs	r1, #0
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f002 fd68 	bl	8008430 <VL53L0X_WrByte>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	4313      	orrs	r3, r2
 8005968:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800596a:	2200      	movs	r2, #0
 800596c:	21ff      	movs	r1, #255	@ 0xff
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f002 fd5e 	bl	8008430 <VL53L0X_WrByte>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	4313      	orrs	r3, r2
 800597c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01e      	beq.n	80059c2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005984:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	21cb      	movs	r1, #203	@ 0xcb
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f002 fc55 	bl	8008240 <VL53L0X_RdByte>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	4313      	orrs	r3, r2
 800599e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80059a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02a      	beq.n	80059fe <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80059a8:	f107 030e 	add.w	r3, r7, #14
 80059ac:	461a      	mov	r2, r3
 80059ae:	21ee      	movs	r1, #238	@ 0xee
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f002 fc45 	bl	8008240 <VL53L0X_RdByte>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461a      	mov	r2, r3
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	4313      	orrs	r3, r2
 80059be:	73fb      	strb	r3, [r7, #15]
 80059c0:	e01d      	b.n	80059fe <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80059c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80059ca:	78bb      	ldrb	r3, [r7, #2]
 80059cc:	461a      	mov	r2, r3
 80059ce:	21cb      	movs	r1, #203	@ 0xcb
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f002 fd2d 	bl	8008430 <VL53L0X_WrByte>
 80059d6:	4603      	mov	r3, r0
 80059d8:	461a      	mov	r2, r3
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	4313      	orrs	r3, r2
 80059de:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80059e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80059e8:	787b      	ldrb	r3, [r7, #1]
 80059ea:	2280      	movs	r2, #128	@ 0x80
 80059ec:	21ee      	movs	r1, #238	@ 0xee
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f002 fd6c 	bl	80084cc <VL53L0X_UpdateByte>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80059fe:	2201      	movs	r2, #1
 8005a00:	21ff      	movs	r1, #255	@ 0xff
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f002 fd14 	bl	8008430 <VL53L0X_WrByte>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005a12:	2201      	movs	r2, #1
 8005a14:	2100      	movs	r1, #0
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f002 fd0a 	bl	8008430 <VL53L0X_WrByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a26:	2200      	movs	r2, #0
 8005a28:	21ff      	movs	r1, #255	@ 0xff
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f002 fd00 	bl	8008430 <VL53L0X_WrByte>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	f023 0310 	bic.w	r3, r3, #16
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	701a      	strb	r2, [r3, #0]

	return Status;
 8005a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08a      	sub	sp, #40	@ 0x28
 8005a56:	af04      	add	r7, sp, #16
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	460b      	mov	r3, r1
 8005a62:	71fb      	strb	r3, [r7, #7]
 8005a64:	4613      	mov	r3, r2
 8005a66:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005a7c:	79bb      	ldrb	r3, [r7, #6]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005a88:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f002 fcce 	bl	8008430 <VL53L0X_WrByte>
 8005a94:	4603      	mov	r3, r0
 8005a96:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005aa0:	2140      	movs	r1, #64	@ 0x40
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff ff01 	bl	80058aa <VL53L0X_perform_single_ref_calibration>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d115      	bne.n	8005ae0 <VL53L0X_perform_vhv_calibration+0x8e>
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d112      	bne.n	8005ae0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005aba:	7d39      	ldrb	r1, [r7, #20]
 8005abc:	7d7a      	ldrb	r2, [r7, #21]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9303      	str	r3, [sp, #12]
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	9302      	str	r3, [sp, #8]
 8005ac6:	f107 0313 	add.w	r3, r7, #19
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff ff23 	bl	8005920 <VL53L0X_ref_calibration_io>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]
 8005ade:	e002      	b.n	8005ae6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d112      	bne.n	8005b14 <VL53L0X_perform_vhv_calibration+0xc2>
 8005aee:	79bb      	ldrb	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00f      	beq.n	8005b14 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005af4:	7dbb      	ldrb	r3, [r7, #22]
 8005af6:	461a      	mov	r2, r3
 8005af8:	2101      	movs	r1, #1
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f002 fc98 	bl	8008430 <VL53L0X_WrByte>
 8005b00:	4603      	mov	r3, r0
 8005b02:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	7dba      	ldrb	r2, [r7, #22]
 8005b10:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	@ 0x28
 8005b24:	af04      	add	r7, sp, #16
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	460b      	mov	r3, r1
 8005b30:	71fb      	strb	r3, [r7, #7]
 8005b32:	4613      	mov	r3, r2
 8005b34:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005b46:	79bb      	ldrb	r3, [r7, #6]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005b52:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005b54:	2202      	movs	r2, #2
 8005b56:	2101      	movs	r1, #1
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f002 fc69 	bl	8008430 <VL53L0X_WrByte>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fe9c 	bl	80058aa <VL53L0X_perform_single_ref_calibration>
 8005b72:	4603      	mov	r3, r0
 8005b74:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d115      	bne.n	8005baa <VL53L0X_perform_phase_calibration+0x8a>
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d112      	bne.n	8005baa <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005b84:	7d39      	ldrb	r1, [r7, #20]
 8005b86:	7d7a      	ldrb	r2, [r7, #21]
 8005b88:	2301      	movs	r3, #1
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	f107 0313 	add.w	r3, r7, #19
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7ff febe 	bl	8005920 <VL53L0X_ref_calibration_io>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]
 8005ba8:	e002      	b.n	8005bb0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d112      	bne.n	8005bde <VL53L0X_perform_phase_calibration+0xbe>
 8005bb8:	79bb      	ldrb	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bbe:	7dbb      	ldrb	r3, [r7, #22]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f002 fc33 	bl	8008430 <VL53L0X_WrByte>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	7dba      	ldrb	r2, [r7, #22]
 8005bda:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005c06:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff ff1f 	bl	8005a52 <VL53L0X_perform_vhv_calibration>
 8005c14:	4603      	mov	r3, r0
 8005c16:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d107      	bne.n	8005c30 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005c20:	78fa      	ldrb	r2, [r7, #3]
 8005c22:	2300      	movs	r3, #0
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff ff7a 	bl	8005b20 <VL53L0X_perform_phase_calibration>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10f      	bne.n	8005c58 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005c38:	7dbb      	ldrb	r3, [r7, #22]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f002 fbf6 	bl	8008430 <VL53L0X_WrByte>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	7dba      	ldrb	r2, [r7, #22]
 8005c54:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005c78:	f107 030f 	add.w	r3, r7, #15
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fe fe0e 	bl	80048a0 <VL53L0X_GetMeasurementDataReady>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10f      	bne.n	8005cb0 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d00e      	beq.n	8005cb4 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ca0:	d902      	bls.n	8005ca8 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005ca2:	23f9      	movs	r3, #249	@ 0xf9
 8005ca4:	75fb      	strb	r3, [r7, #23]
			break;
 8005ca6:	e006      	b.n	8005cb6 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f002 fc43 	bl	8008534 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005cae:	e7e3      	b.n	8005c78 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005cb0:	bf00      	nop
 8005cb2:	e000      	b.n	8005cb6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8005cb4:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	4603      	mov	r3, r0
 8005cca:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005d1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d1e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005d20:	e002      	b.n	8005d28 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	089b      	lsrs	r3, r3, #2
 8005d26:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d8f8      	bhi.n	8005d22 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005d30:	e017      	b.n	8005d62 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4413      	add	r3, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d30b      	bcc.n	8005d56 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4413      	add	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4413      	add	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e002      	b.n	8005d5c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e4      	bne.n	8005d32 <VL53L0X_isqrt+0x24>
	}

	return res;
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005d82:	2200      	movs	r2, #0
 8005d84:	2183      	movs	r1, #131	@ 0x83
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f002 fb52 	bl	8008430 <VL53L0X_WrByte>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d11c      	bne.n	8005dd8 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005da2:	f107 030f 	add.w	r3, r7, #15
 8005da6:	461a      	mov	r2, r3
 8005da8:	2183      	movs	r1, #131	@ 0x83
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f002 fa48 	bl	8008240 <VL53L0X_RdByte>
 8005db0:	4603      	mov	r3, r0
 8005db2:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <VL53L0X_device_read_strobe+0x58>
 8005dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dcc:	d9e9      	bls.n	8005da2 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dd2:	d901      	bls.n	8005dd8 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005dd4:	23f9      	movs	r3, #249	@ 0xf9
 8005dd6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005dd8:	2201      	movs	r2, #1
 8005dda:	2183      	movs	r1, #131	@ 0x83
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f002 fb27 	bl	8008430 <VL53L0X_WrByte>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005dec:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b098      	sub	sp, #96	@ 0x60
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005e28:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8005e2c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8005e40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005e44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e48:	2b07      	cmp	r3, #7
 8005e4a:	f000 8408 	beq.w	800665e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005e4e:	2201      	movs	r2, #1
 8005e50:	2180      	movs	r1, #128	@ 0x80
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f002 faec 	bl	8008430 <VL53L0X_WrByte>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e66:	2201      	movs	r2, #1
 8005e68:	21ff      	movs	r1, #255	@ 0xff
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f002 fae0 	bl	8008430 <VL53L0X_WrByte>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2100      	movs	r1, #0
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f002 fad4 	bl	8008430 <VL53L0X_WrByte>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005e96:	2206      	movs	r2, #6
 8005e98:	21ff      	movs	r1, #255	@ 0xff
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f002 fac8 	bl	8008430 <VL53L0X_WrByte>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005eae:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2183      	movs	r1, #131	@ 0x83
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f002 f9c2 	bl	8008240 <VL53L0X_RdByte>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005eca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2183      	movs	r1, #131	@ 0x83
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f002 faa9 	bl	8008430 <VL53L0X_WrByte>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005eec:	2207      	movs	r2, #7
 8005eee:	21ff      	movs	r1, #255	@ 0xff
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f002 fa9d 	bl	8008430 <VL53L0X_WrByte>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005f04:	2201      	movs	r2, #1
 8005f06:	2181      	movs	r1, #129	@ 0x81
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f002 fa91 	bl	8008430 <VL53L0X_WrByte>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	461a      	mov	r2, r3
 8005f12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f002 fb09 	bl	8008534 <VL53L0X_PollingDelay>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005f30:	2201      	movs	r2, #1
 8005f32:	2180      	movs	r1, #128	@ 0x80
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f002 fa7b 	bl	8008430 <VL53L0X_WrByte>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8098 	beq.w	8006084 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005f54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f58:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 8091 	bne.w	8006084 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005f62:	226b      	movs	r2, #107	@ 0x6b
 8005f64:	2194      	movs	r1, #148	@ 0x94
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f002 fa62 	bl	8008430 <VL53L0X_WrByte>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fefb 	bl	8005d76 <VL53L0X_device_read_strobe>
 8005f80:	4603      	mov	r3, r0
 8005f82:	461a      	mov	r2, r3
 8005f84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005f92:	461a      	mov	r2, r3
 8005f94:	2190      	movs	r1, #144	@ 0x90
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f002 fa0e 	bl	80083b8 <VL53L0X_RdDWord>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	0bdb      	lsrs	r3, r3, #15
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005fc6:	2224      	movs	r2, #36	@ 0x24
 8005fc8:	2194      	movs	r1, #148	@ 0x94
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f002 fa30 	bl	8008430 <VL53L0X_WrByte>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fec9 	bl	8005d76 <VL53L0X_device_read_strobe>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005ff2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2190      	movs	r1, #144	@ 0x90
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 f9dc 	bl	80083b8 <VL53L0X_RdDWord>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006008:	4313      	orrs	r3, r2
 800600a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	0e1b      	lsrs	r3, r3, #24
 8006012:	b2db      	uxtb	r3, r3
 8006014:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	b2db      	uxtb	r3, r3
 800601c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	b2db      	uxtb	r3, r3
 8006024:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	b2db      	uxtb	r3, r3
 800602a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800602c:	2225      	movs	r2, #37	@ 0x25
 800602e:	2194      	movs	r1, #148	@ 0x94
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f002 f9fd 	bl	8008430 <VL53L0X_WrByte>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800603e:	4313      	orrs	r3, r2
 8006040:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fe96 	bl	8005d76 <VL53L0X_device_read_strobe>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006052:	4313      	orrs	r3, r2
 8006054:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006058:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800605c:	461a      	mov	r2, r3
 800605e:	2190      	movs	r1, #144	@ 0x90
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f002 f9a9 	bl	80083b8 <VL53L0X_RdDWord>
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800606e:	4313      	orrs	r3, r2
 8006070:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	0e1b      	lsrs	r3, r3, #24
 8006078:	b2db      	uxtb	r3, r3
 800607a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	b2db      	uxtb	r3, r3
 8006082:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8189 	beq.w	80063a2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006090:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006094:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006098:	2b00      	cmp	r3, #0
 800609a:	f040 8182 	bne.w	80063a2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800609e:	2202      	movs	r2, #2
 80060a0:	2194      	movs	r1, #148	@ 0x94
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f002 f9c4 	bl	8008430 <VL53L0X_WrByte>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fe5d 	bl	8005d76 <VL53L0X_device_read_strobe>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80060ca:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80060ce:	461a      	mov	r2, r3
 80060d0:	2190      	movs	r1, #144	@ 0x90
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f002 f8b4 	bl	8008240 <VL53L0X_RdByte>
 80060d8:	4603      	mov	r3, r0
 80060da:	461a      	mov	r2, r3
 80060dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80060e6:	227b      	movs	r2, #123	@ 0x7b
 80060e8:	2194      	movs	r1, #148	@ 0x94
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f002 f9a0 	bl	8008430 <VL53L0X_WrByte>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fe39 	bl	8005d76 <VL53L0X_device_read_strobe>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800610c:	4313      	orrs	r3, r2
 800610e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006112:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8006116:	461a      	mov	r2, r3
 8006118:	2190      	movs	r1, #144	@ 0x90
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f002 f890 	bl	8008240 <VL53L0X_RdByte>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006128:	4313      	orrs	r3, r2
 800612a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800612e:	2277      	movs	r2, #119	@ 0x77
 8006130:	2194      	movs	r1, #148	@ 0x94
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f002 f97c 	bl	8008430 <VL53L0X_WrByte>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006140:	4313      	orrs	r3, r2
 8006142:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fe15 	bl	8005d76 <VL53L0X_device_read_strobe>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006154:	4313      	orrs	r3, r2
 8006156:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800615a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800615e:	461a      	mov	r2, r3
 8006160:	2190      	movs	r1, #144	@ 0x90
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f002 f928 	bl	80083b8 <VL53L0X_RdDWord>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006170:	4313      	orrs	r3, r2
 8006172:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	0e5b      	lsrs	r3, r3, #25
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006180:	b2db      	uxtb	r3, r3
 8006182:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	0c9b      	lsrs	r3, r3, #18
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618e:	b2db      	uxtb	r3, r3
 8006190:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	0adb      	lsrs	r3, r3, #11
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619c:	b2db      	uxtb	r3, r3
 800619e:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80061c0:	2278      	movs	r2, #120	@ 0x78
 80061c2:	2194      	movs	r1, #148	@ 0x94
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f002 f933 	bl	8008430 <VL53L0X_WrByte>
 80061ca:	4603      	mov	r3, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fdcc 	bl	8005d76 <VL53L0X_device_read_strobe>
 80061de:	4603      	mov	r3, r0
 80061e0:	461a      	mov	r2, r3
 80061e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80061ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80061f0:	461a      	mov	r2, r3
 80061f2:	2190      	movs	r1, #144	@ 0x90
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f002 f8df 	bl	80083b8 <VL53L0X_RdDWord>
 80061fa:	4603      	mov	r3, r0
 80061fc:	461a      	mov	r2, r3
 80061fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006202:	4313      	orrs	r3, r2
 8006204:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	0f5b      	lsrs	r3, r3, #29
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006212:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006214:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006218:	4413      	add	r3, r2
 800621a:	b2db      	uxtb	r3, r3
 800621c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	0d9b      	lsrs	r3, r3, #22
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006228:	b2db      	uxtb	r3, r3
 800622a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	0bdb      	lsrs	r3, r3, #15
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006236:	b2db      	uxtb	r3, r3
 8006238:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006244:	b2db      	uxtb	r3, r3
 8006246:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006252:	b2db      	uxtb	r3, r3
 8006254:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	b2db      	uxtb	r3, r3
 800625a:	019b      	lsls	r3, r3, #6
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006268:	2279      	movs	r2, #121	@ 0x79
 800626a:	2194      	movs	r1, #148	@ 0x94
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 f8df 	bl	8008430 <VL53L0X_WrByte>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800627a:	4313      	orrs	r3, r2
 800627c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fd78 	bl	8005d76 <VL53L0X_device_read_strobe>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800628e:	4313      	orrs	r3, r2
 8006290:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006294:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006298:	461a      	mov	r2, r3
 800629a:	2190      	movs	r1, #144	@ 0x90
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f002 f88b 	bl	80083b8 <VL53L0X_RdDWord>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	0e9b      	lsrs	r3, r3, #26
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ba:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80062bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062c0:	4413      	add	r3, r2
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	0cdb      	lsrs	r3, r3, #19
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	0b1b      	lsrs	r3, r3, #12
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006302:	227a      	movs	r2, #122	@ 0x7a
 8006304:	2194      	movs	r1, #148	@ 0x94
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f002 f892 	bl	8008430 <VL53L0X_WrByte>
 800630c:	4603      	mov	r3, r0
 800630e:	461a      	mov	r2, r3
 8006310:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006314:	4313      	orrs	r3, r2
 8006316:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff fd2b 	bl	8005d76 <VL53L0X_device_read_strobe>
 8006320:	4603      	mov	r3, r0
 8006322:	461a      	mov	r2, r3
 8006324:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006328:	4313      	orrs	r3, r2
 800632a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800632e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006332:	461a      	mov	r2, r3
 8006334:	2190      	movs	r1, #144	@ 0x90
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f002 f83e 	bl	80083b8 <VL53L0X_RdDWord>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006344:	4313      	orrs	r3, r2
 8006346:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	0f9b      	lsrs	r3, r3, #30
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006354:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006356:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800635a:	4413      	add	r3, r2
 800635c:	b2db      	uxtb	r3, r3
 800635e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	0ddb      	lsrs	r3, r3, #23
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800636a:	b2db      	uxtb	r3, r3
 800636c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006378:	b2db      	uxtb	r3, r3
 800637a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	0a5b      	lsrs	r3, r3, #9
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800639c:	2300      	movs	r3, #0
 800639e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80f1 	beq.w	8006590 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80063ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80063b2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 80ea 	bne.w	8006590 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80063bc:	227b      	movs	r2, #123	@ 0x7b
 80063be:	2194      	movs	r1, #148	@ 0x94
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 f835 	bl	8008430 <VL53L0X_WrByte>
 80063c6:	4603      	mov	r3, r0
 80063c8:	461a      	mov	r2, r3
 80063ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fcce 	bl	8005d76 <VL53L0X_device_read_strobe>
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80063e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80063ec:	461a      	mov	r2, r3
 80063ee:	2190      	movs	r1, #144	@ 0x90
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 ffe1 	bl	80083b8 <VL53L0X_RdDWord>
 80063f6:	4603      	mov	r3, r0
 80063f8:	461a      	mov	r2, r3
 80063fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063fe:	4313      	orrs	r3, r2
 8006400:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006404:	227c      	movs	r2, #124	@ 0x7c
 8006406:	2194      	movs	r1, #148	@ 0x94
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f002 f811 	bl	8008430 <VL53L0X_WrByte>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006416:	4313      	orrs	r3, r2
 8006418:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fcaa 	bl	8005d76 <VL53L0X_device_read_strobe>
 8006422:	4603      	mov	r3, r0
 8006424:	461a      	mov	r2, r3
 8006426:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800642a:	4313      	orrs	r3, r2
 800642c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006434:	461a      	mov	r2, r3
 8006436:	2190      	movs	r1, #144	@ 0x90
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 ffbd 	bl	80083b8 <VL53L0X_RdDWord>
 800643e:	4603      	mov	r3, r0
 8006440:	461a      	mov	r2, r3
 8006442:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006446:	4313      	orrs	r3, r2
 8006448:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800644c:	2273      	movs	r2, #115	@ 0x73
 800644e:	2194      	movs	r1, #148	@ 0x94
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 ffed 	bl	8008430 <VL53L0X_WrByte>
 8006456:	4603      	mov	r3, r0
 8006458:	461a      	mov	r2, r3
 800645a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800645e:	4313      	orrs	r3, r2
 8006460:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fc86 	bl	8005d76 <VL53L0X_device_read_strobe>
 800646a:	4603      	mov	r3, r0
 800646c:	461a      	mov	r2, r3
 800646e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006472:	4313      	orrs	r3, r2
 8006474:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006478:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800647c:	461a      	mov	r2, r3
 800647e:	2190      	movs	r1, #144	@ 0x90
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 ff99 	bl	80083b8 <VL53L0X_RdDWord>
 8006486:	4603      	mov	r3, r0
 8006488:	461a      	mov	r2, r3
 800648a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800648e:	4313      	orrs	r3, r2
 8006490:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006498:	b29b      	uxth	r3, r3
 800649a:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800649c:	2274      	movs	r2, #116	@ 0x74
 800649e:	2194      	movs	r1, #148	@ 0x94
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 ffc5 	bl	8008430 <VL53L0X_WrByte>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fc5e 	bl	8005d76 <VL53L0X_device_read_strobe>
 80064ba:	4603      	mov	r3, r0
 80064bc:	461a      	mov	r2, r3
 80064be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80064cc:	461a      	mov	r2, r3
 80064ce:	2190      	movs	r1, #144	@ 0x90
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 ff71 	bl	80083b8 <VL53L0X_RdDWord>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461a      	mov	r2, r3
 80064da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064de:	4313      	orrs	r3, r2
 80064e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80064e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064ea:	4313      	orrs	r3, r2
 80064ec:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80064ee:	2275      	movs	r2, #117	@ 0x75
 80064f0:	2194      	movs	r1, #148	@ 0x94
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 ff9c 	bl	8008430 <VL53L0X_WrByte>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006500:	4313      	orrs	r3, r2
 8006502:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fc35 	bl	8005d76 <VL53L0X_device_read_strobe>
 800650c:	4603      	mov	r3, r0
 800650e:	461a      	mov	r2, r3
 8006510:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006514:	4313      	orrs	r3, r2
 8006516:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800651a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800651e:	461a      	mov	r2, r3
 8006520:	2190      	movs	r1, #144	@ 0x90
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 ff48 	bl	80083b8 <VL53L0X_RdDWord>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006530:	4313      	orrs	r3, r2
 8006532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 800653a:	b29b      	uxth	r3, r3
 800653c:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800653e:	2276      	movs	r2, #118	@ 0x76
 8006540:	2194      	movs	r1, #148	@ 0x94
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 ff74 	bl	8008430 <VL53L0X_WrByte>
 8006548:	4603      	mov	r3, r0
 800654a:	461a      	mov	r2, r3
 800654c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006550:	4313      	orrs	r3, r2
 8006552:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fc0d 	bl	8005d76 <VL53L0X_device_read_strobe>
 800655c:	4603      	mov	r3, r0
 800655e:	461a      	mov	r2, r3
 8006560:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006564:	4313      	orrs	r3, r2
 8006566:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800656a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800656e:	461a      	mov	r2, r3
 8006570:	2190      	movs	r1, #144	@ 0x90
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 ff20 	bl	80083b8 <VL53L0X_RdDWord>
 8006578:	4603      	mov	r3, r0
 800657a:	461a      	mov	r2, r3
 800657c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006580:	4313      	orrs	r3, r2
 8006582:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800658a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800658c:	4313      	orrs	r3, r2
 800658e:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006590:	2200      	movs	r2, #0
 8006592:	2181      	movs	r1, #129	@ 0x81
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 ff4b 	bl	8008430 <VL53L0X_WrByte>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80065a8:	2206      	movs	r2, #6
 80065aa:	21ff      	movs	r1, #255	@ 0xff
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 ff3f 	bl	8008430 <VL53L0X_WrByte>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80065c0:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 80065c4:	461a      	mov	r2, r3
 80065c6:	2183      	movs	r1, #131	@ 0x83
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fe39 	bl	8008240 <VL53L0X_RdByte>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80065dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065e0:	f023 0304 	bic.w	r3, r3, #4
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	2183      	movs	r1, #131	@ 0x83
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f001 ff20 	bl	8008430 <VL53L0X_WrByte>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
 80065f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065fe:	2201      	movs	r2, #1
 8006600:	21ff      	movs	r1, #255	@ 0xff
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 ff14 	bl	8008430 <VL53L0X_WrByte>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006610:	4313      	orrs	r3, r2
 8006612:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006616:	2201      	movs	r2, #1
 8006618:	2100      	movs	r1, #0
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 ff08 	bl	8008430 <VL53L0X_WrByte>
 8006620:	4603      	mov	r3, r0
 8006622:	461a      	mov	r2, r3
 8006624:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006628:	4313      	orrs	r3, r2
 800662a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800662e:	2200      	movs	r2, #0
 8006630:	21ff      	movs	r1, #255	@ 0xff
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fefc 	bl	8008430 <VL53L0X_WrByte>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006640:	4313      	orrs	r3, r2
 8006642:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006646:	2200      	movs	r2, #0
 8006648:	2180      	movs	r1, #128	@ 0x80
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fef0 	bl	8008430 <VL53L0X_WrByte>
 8006650:	4603      	mov	r3, r0
 8006652:	461a      	mov	r2, r3
 8006654:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006658:	4313      	orrs	r3, r2
 800665a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800665e:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8006662:	2b00      	cmp	r3, #0
 8006664:	f040 808f 	bne.w	8006786 <VL53L0X_get_info_from_device+0x98e>
 8006668:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800666c:	2b07      	cmp	r3, #7
 800666e:	f000 808a 	beq.w	8006786 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d024      	beq.n	80066c6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800667c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006680:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11e      	bne.n	80066c6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800668e:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8006698:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800669c:	2300      	movs	r3, #0
 800669e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a0:	e00e      	b.n	80066c0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80066a2:	f107 0208 	add.w	r2, r7, #8
 80066a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a8:	4413      	add	r3, r2
 80066aa:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 80066b6:	460a      	mov	r2, r1
 80066b8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80066ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066bc:	3301      	adds	r3, #1
 80066be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	dded      	ble.n	80066a2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d018      	beq.n	8006702 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80066d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80066d4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d112      	bne.n	8006702 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80066dc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80066e6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	33f3      	adds	r3, #243	@ 0xf3
 80066f4:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80066f6:	f107 0310 	add.w	r3, r7, #16
 80066fa:	4619      	mov	r1, r3
 80066fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066fe:	f001 ff7f 	bl	8008600 <strcpy>

		}

		if (((option & 4) == 4) &&
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d030      	beq.n	800676e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800670c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006710:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006714:	2b00      	cmp	r3, #0
 8006716:	d12a      	bne.n	800676e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800672a:	025b      	lsls	r3, r3, #9
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006732:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800673c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673e:	2b00      	cmp	r3, #0
 8006740:	d011      	beq.n	8006766 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006742:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800674a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800674c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006756:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800675a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800675e:	425b      	negs	r3, r3
 8006760:	b29b      	uxth	r3, r3
 8006762:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8006766:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800676e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	4313      	orrs	r3, r2
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800677c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006786:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800678a:	4618      	mov	r0, r3
 800678c:	3760      	adds	r7, #96	@ 0x60
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006792:	b480      	push	{r7}
 8006794:	b087      	sub	sp, #28
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800679e:	f240 6277 	movw	r2, #1655	@ 0x677
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80067aa:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80067ae:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80067c0:	68bb      	ldr	r3, [r7, #8]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d015      	beq.n	8006814 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80067ee:	e005      	b.n	80067fc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80067f6:	89fb      	ldrh	r3, [r7, #14]
 80067f8:	3301      	adds	r3, #1
 80067fa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2bff      	cmp	r3, #255	@ 0xff
 8006800:	d8f6      	bhi.n	80067f0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006802:	89fb      	ldrh	r3, [r7, #14]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	b29b      	uxth	r3, r3
 800680c:	b2db      	uxtb	r3, r3
 800680e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006810:	4413      	add	r3, r2
 8006812:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006814:	8afb      	ldrh	r3, [r7, #22]

}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	4603      	mov	r3, r0
 800682a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006834:	88fa      	ldrh	r2, [r7, #6]
 8006836:	0a12      	lsrs	r2, r2, #8
 8006838:	b292      	uxth	r2, r2
 800683a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff ff93 	bl	8006792 <VL53L0X_calc_macro_period_ps>
 800686c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006874:	4a0a      	ldr	r2, [pc, #40]	@ (80068a0 <VL53L0X_calc_timeout_mclks+0x50>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	099b      	lsrs	r3, r3, #6
 800687c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006884:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	441a      	add	r2, r3
	timeout_period_mclks =
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	fbb2 f3f3 	udiv	r3, r2, r3
 8006894:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8006896:	69fb      	ldr	r3, [r7, #28]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3720      	adds	r7, #32
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	10624dd3 	.word	0x10624dd3

080068a4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	807b      	strh	r3, [r7, #2]
 80068b0:	4613      	mov	r3, r2
 80068b2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80068b8:	787b      	ldrb	r3, [r7, #1]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff ff68 	bl	8006792 <VL53L0X_calc_macro_period_ps>
 80068c2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80068ca:	4a0b      	ldr	r2, [pc, #44]	@ (80068f8 <VL53L0X_calc_timeout_us+0x54>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	4413      	add	r3, r2
	actual_timeout_period_us =
 80068e2:	4a05      	ldr	r2, [pc, #20]	@ (80068f8 <VL53L0X_calc_timeout_us+0x54>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	099b      	lsrs	r3, r3, #6
 80068ea:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80068ec:	697b      	ldr	r3, [r7, #20]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	10624dd3 	.word	0x10624dd3

080068fc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08c      	sub	sp, #48	@ 0x30
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	460b      	mov	r3, r1
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800690a:	2300      	movs	r3, #0
 800690c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <get_sequence_step_timeout+0x38>
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d002      	beq.n	8006934 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d127      	bne.n	8006984 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006934:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006938:	461a      	mov	r2, r3
 800693a:	2100      	movs	r1, #0
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7fd fa83 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006948:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006950:	f107 0320 	add.w	r3, r7, #32
 8006954:	461a      	mov	r2, r3
 8006956:	2146      	movs	r1, #70	@ 0x46
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 fc71 	bl	8008240 <VL53L0X_RdByte>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006964:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff ff5a 	bl	8006822 <VL53L0X_decode_timeout>
 800696e:	4603      	mov	r3, r0
 8006970:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006972:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006976:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006978:	4619      	mov	r1, r3
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff ff92 	bl	80068a4 <VL53L0X_calc_timeout_us>
 8006980:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006982:	e092      	b.n	8006aaa <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d135      	bne.n	80069f6 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800698a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800698e:	461a      	mov	r2, r3
 8006990:	2100      	movs	r1, #0
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7fd fa58 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800699e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 8081 	bne.w	8006aaa <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069a8:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80069ac:	461a      	mov	r2, r3
 80069ae:	2100      	movs	r1, #0
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7fd fa49 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80069bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d109      	bne.n	80069d8 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 80069c4:	f107 031e 	add.w	r3, r7, #30
 80069c8:	461a      	mov	r2, r3
 80069ca:	2151      	movs	r1, #81	@ 0x51
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f001 fcbd 	bl	800834c <VL53L0X_RdWord>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80069d8:	8bfb      	ldrh	r3, [r7, #30]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff ff21 	bl	8006822 <VL53L0X_decode_timeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80069e4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80069e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069ea:	4619      	mov	r1, r3
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff ff59 	bl	80068a4 <VL53L0X_calc_timeout_us>
 80069f2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80069f4:	e059      	b.n	8006aaa <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d156      	bne.n	8006aaa <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4619      	mov	r1, r3
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7fd fb2a 	bl	800405c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01d      	beq.n	8006a4e <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a12:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006a16:	461a      	mov	r2, r3
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7fd fa14 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006a26:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10f      	bne.n	8006a4e <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8006a2e:	f107 031e 	add.w	r3, r7, #30
 8006a32:	461a      	mov	r2, r3
 8006a34:	2151      	movs	r1, #81	@ 0x51
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f001 fc88 	bl	800834c <VL53L0X_RdWord>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006a42:	8bfb      	ldrh	r3, [r7, #30]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff feec 	bl	8006822 <VL53L0X_decode_timeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006a4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a56:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7fd f9f2 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006a6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10f      	bne.n	8006a92 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 8006a72:	f107 031c 	add.w	r3, r7, #28
 8006a76:	461a      	mov	r2, r3
 8006a78:	2171      	movs	r1, #113	@ 0x71
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 fc66 	bl	800834c <VL53L0X_RdWord>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006a86:	8bbb      	ldrh	r3, [r7, #28]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff feca 	bl	8006822 <VL53L0X_decode_timeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006a92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006a9a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006a9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fefe 	bl	80068a4 <VL53L0X_calc_timeout_us>
 8006aa8:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aae:	601a      	str	r2, [r3, #0]

	return Status;
 8006ab0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3730      	adds	r7, #48	@ 0x30
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	@ 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <set_sequence_step_timeout+0x26>
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d002      	beq.n	8006ae2 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d138      	bne.n	8006b54 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ae2:	f107 031d 	add.w	r3, r7, #29
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2100      	movs	r1, #0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7fd f9ac 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006af6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d11a      	bne.n	8006b34 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006afe:	7f7b      	ldrb	r3, [r7, #29]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff fea3 	bl	8006850 <VL53L0X_calc_timeout_mclks>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006b0e:	8bfb      	ldrh	r3, [r7, #30]
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b14:	d903      	bls.n	8006b1e <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006b16:	23ff      	movs	r3, #255	@ 0xff
 8006b18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b1c:	e004      	b.n	8006b28 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006b1e:	8bfb      	ldrh	r3, [r7, #30]
 8006b20:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006b22:	3b01      	subs	r3, #1
 8006b24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80ad 	bne.w	8006c98 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8006b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b42:	461a      	mov	r2, r3
 8006b44:	2146      	movs	r1, #70	@ 0x46
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 fc72 	bl	8008430 <VL53L0X_WrByte>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006b52:	e0a1      	b.n	8006c98 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d135      	bne.n	8006bc6 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006b5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11b      	bne.n	8006b9a <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b62:	f107 031d 	add.w	r3, r7, #29
 8006b66:	461a      	mov	r2, r3
 8006b68:	2100      	movs	r1, #0
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f7fd f96c 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006b76:	7f7b      	ldrb	r3, [r7, #29]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff fe67 	bl	8006850 <VL53L0X_calc_timeout_mclks>
 8006b82:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006b84:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fe20 	bl	80067ce <VL53L0X_encode_timeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b92:	8b7a      	ldrh	r2, [r7, #26]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d108      	bne.n	8006bb4 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006ba2:	8b7b      	ldrh	r3, [r7, #26]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	2151      	movs	r1, #81	@ 0x51
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f001 fc65 	bl	8008478 <VL53L0X_WrWord>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d16d      	bne.n	8006c98 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8006bc4:	e068      	b.n	8006c98 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d162      	bne.n	8006c92 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006bcc:	f107 0314 	add.w	r3, r7, #20
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7fd fa42 	bl	800405c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01d      	beq.n	8006c1e <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006be2:	f107 031d 	add.w	r3, r7, #29
 8006be6:	461a      	mov	r2, r3
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7fd f92c 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006bf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006bfe:	f107 031a 	add.w	r3, r7, #26
 8006c02:	461a      	mov	r2, r3
 8006c04:	2151      	movs	r1, #81	@ 0x51
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f001 fba0 	bl	800834c <VL53L0X_RdWord>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006c12:	8b7b      	ldrh	r3, [r7, #26]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff fe04 	bl	8006822 <VL53L0X_decode_timeout>
 8006c1a:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006c1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006c1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c26:	f107 031d 	add.w	r3, r7, #29
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7fd f90a 	bl	8003e48 <VL53L0X_GetVcselPulsePeriod>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006c3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d12a      	bne.n	8006c98 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006c42:	7f7b      	ldrb	r3, [r7, #29]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff fe01 	bl	8006850 <VL53L0X_calc_timeout_mclks>
 8006c4e:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8006c50:	847b      	strh	r3, [r7, #34]	@ 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006c52:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006c54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c56:	4413      	add	r3, r2
 8006c58:	847b      	strh	r3, [r7, #34]	@ 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006c5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff fdb6 	bl	80067ce <VL53L0X_encode_timeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8006c66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d108      	bne.n	8006c80 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006c6e:	8c3b      	ldrh	r3, [r7, #32]
 8006c70:	461a      	mov	r2, r3
 8006c72:	2171      	movs	r1, #113	@ 0x71
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 fbff 	bl	8008478 <VL53L0X_WrWord>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006c80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d107      	bne.n	8006c98 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8006c90:	e002      	b.n	8006c98 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c92:	23fc      	movs	r3, #252	@ 0xfc
 8006c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 8006c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3728      	adds	r7, #40	@ 0x28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	@ 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006cba:	230c      	movs	r3, #12
 8006cbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006cc0:	2312      	movs	r3, #18
 8006cc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006ccc:	230e      	movs	r3, #14
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006cd6:	78bb      	ldrb	r3, [r7, #2]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ce2:	23fc      	movs	r3, #252	@ 0xfc
 8006ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ce8:	e020      	b.n	8006d2c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10d      	bne.n	8006d0c <VL53L0X_set_vcsel_pulse_period+0x68>
 8006cf0:	78ba      	ldrb	r2, [r7, #2]
 8006cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d304      	bcc.n	8006d04 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006cfa:	78ba      	ldrb	r2, [r7, #2]
 8006cfc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d903      	bls.n	8006d0c <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d04:	23fc      	movs	r3, #252	@ 0xfc
 8006d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d0a:	e00f      	b.n	8006d2c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d10c      	bne.n	8006d2c <VL53L0X_set_vcsel_pulse_period+0x88>
 8006d12:	78ba      	ldrb	r2, [r7, #2]
 8006d14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d304      	bcc.n	8006d26 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006d1c:	78ba      	ldrb	r2, [r7, #2]
 8006d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d902      	bls.n	8006d2c <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d26:	23fc      	movs	r3, #252	@ 0xfc
 8006d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006d34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d38:	e237      	b.n	80071aa <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d150      	bne.n	8006de2 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006d40:	78bb      	ldrb	r3, [r7, #2]
 8006d42:	2b0c      	cmp	r3, #12
 8006d44:	d110      	bne.n	8006d68 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006d46:	2218      	movs	r2, #24
 8006d48:	2157      	movs	r1, #87	@ 0x57
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fb70 	bl	8008430 <VL53L0X_WrByte>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006d56:	2208      	movs	r2, #8
 8006d58:	2156      	movs	r1, #86	@ 0x56
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fb68 	bl	8008430 <VL53L0X_WrByte>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d66:	e17f      	b.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006d68:	78bb      	ldrb	r3, [r7, #2]
 8006d6a:	2b0e      	cmp	r3, #14
 8006d6c:	d110      	bne.n	8006d90 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006d6e:	2230      	movs	r2, #48	@ 0x30
 8006d70:	2157      	movs	r1, #87	@ 0x57
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 fb5c 	bl	8008430 <VL53L0X_WrByte>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006d7e:	2208      	movs	r2, #8
 8006d80:	2156      	movs	r1, #86	@ 0x56
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fb54 	bl	8008430 <VL53L0X_WrByte>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d8e:	e16b      	b.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006d90:	78bb      	ldrb	r3, [r7, #2]
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d110      	bne.n	8006db8 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006d96:	2240      	movs	r2, #64	@ 0x40
 8006d98:	2157      	movs	r1, #87	@ 0x57
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fb48 	bl	8008430 <VL53L0X_WrByte>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006da6:	2208      	movs	r2, #8
 8006da8:	2156      	movs	r1, #86	@ 0x56
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fb40 	bl	8008430 <VL53L0X_WrByte>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006db6:	e157      	b.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006db8:	78bb      	ldrb	r3, [r7, #2]
 8006dba:	2b12      	cmp	r3, #18
 8006dbc:	f040 8154 	bne.w	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006dc0:	2250      	movs	r2, #80	@ 0x50
 8006dc2:	2157      	movs	r1, #87	@ 0x57
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fb33 	bl	8008430 <VL53L0X_WrByte>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	2156      	movs	r1, #86	@ 0x56
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fb2b 	bl	8008430 <VL53L0X_WrByte>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006de0:	e142      	b.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	f040 813f 	bne.w	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006dea:	78bb      	ldrb	r3, [r7, #2]
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d14c      	bne.n	8006e8a <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006df0:	2210      	movs	r2, #16
 8006df2:	2148      	movs	r1, #72	@ 0x48
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fb1b 	bl	8008430 <VL53L0X_WrByte>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006e00:	2208      	movs	r2, #8
 8006e02:	2147      	movs	r1, #71	@ 0x47
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fb13 	bl	8008430 <VL53L0X_WrByte>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006e10:	2202      	movs	r2, #2
 8006e12:	2132      	movs	r1, #50	@ 0x32
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 fb0b 	bl	8008430 <VL53L0X_WrByte>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006e28:	220c      	movs	r2, #12
 8006e2a:	2130      	movs	r1, #48	@ 0x30
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 faff 	bl	8008430 <VL53L0X_WrByte>
 8006e32:	4603      	mov	r3, r0
 8006e34:	461a      	mov	r2, r3
 8006e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e40:	2201      	movs	r2, #1
 8006e42:	21ff      	movs	r1, #255	@ 0xff
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 faf3 	bl	8008430 <VL53L0X_WrByte>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006e58:	2230      	movs	r2, #48	@ 0x30
 8006e5a:	2130      	movs	r1, #48	@ 0x30
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fae7 	bl	8008430 <VL53L0X_WrByte>
 8006e62:	4603      	mov	r3, r0
 8006e64:	461a      	mov	r2, r3
 8006e66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006e70:	2200      	movs	r2, #0
 8006e72:	21ff      	movs	r1, #255	@ 0xff
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fadb 	bl	8008430 <VL53L0X_WrByte>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e88:	e0ee      	b.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006e8a:	78bb      	ldrb	r3, [r7, #2]
 8006e8c:	2b0a      	cmp	r3, #10
 8006e8e:	d14c      	bne.n	8006f2a <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006e90:	2228      	movs	r2, #40	@ 0x28
 8006e92:	2148      	movs	r1, #72	@ 0x48
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 facb 	bl	8008430 <VL53L0X_WrByte>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	2147      	movs	r1, #71	@ 0x47
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fac3 	bl	8008430 <VL53L0X_WrByte>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	2132      	movs	r1, #50	@ 0x32
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fabb 	bl	8008430 <VL53L0X_WrByte>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006ec8:	2209      	movs	r2, #9
 8006eca:	2130      	movs	r1, #48	@ 0x30
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 faaf 	bl	8008430 <VL53L0X_WrByte>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	21ff      	movs	r1, #255	@ 0xff
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 faa3 	bl	8008430 <VL53L0X_WrByte>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006ef8:	2220      	movs	r2, #32
 8006efa:	2130      	movs	r1, #48	@ 0x30
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fa97 	bl	8008430 <VL53L0X_WrByte>
 8006f02:	4603      	mov	r3, r0
 8006f04:	461a      	mov	r2, r3
 8006f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006f10:	2200      	movs	r2, #0
 8006f12:	21ff      	movs	r1, #255	@ 0xff
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 fa8b 	bl	8008430 <VL53L0X_WrByte>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f28:	e09e      	b.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006f2a:	78bb      	ldrb	r3, [r7, #2]
 8006f2c:	2b0c      	cmp	r3, #12
 8006f2e:	d14c      	bne.n	8006fca <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006f30:	2238      	movs	r2, #56	@ 0x38
 8006f32:	2148      	movs	r1, #72	@ 0x48
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fa7b 	bl	8008430 <VL53L0X_WrByte>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006f40:	2208      	movs	r2, #8
 8006f42:	2147      	movs	r1, #71	@ 0x47
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fa73 	bl	8008430 <VL53L0X_WrByte>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006f50:	2203      	movs	r2, #3
 8006f52:	2132      	movs	r1, #50	@ 0x32
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fa6b 	bl	8008430 <VL53L0X_WrByte>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006f68:	2208      	movs	r2, #8
 8006f6a:	2130      	movs	r1, #48	@ 0x30
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 fa5f 	bl	8008430 <VL53L0X_WrByte>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006f80:	2201      	movs	r2, #1
 8006f82:	21ff      	movs	r1, #255	@ 0xff
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fa53 	bl	8008430 <VL53L0X_WrByte>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006f98:	2220      	movs	r2, #32
 8006f9a:	2130      	movs	r1, #48	@ 0x30
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fa47 	bl	8008430 <VL53L0X_WrByte>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006faa:	4313      	orrs	r3, r2
 8006fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	21ff      	movs	r1, #255	@ 0xff
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 fa3b 	bl	8008430 <VL53L0X_WrByte>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006fc8:	e04e      	b.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006fca:	78bb      	ldrb	r3, [r7, #2]
 8006fcc:	2b0e      	cmp	r3, #14
 8006fce:	d14b      	bne.n	8007068 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006fd0:	2248      	movs	r2, #72	@ 0x48
 8006fd2:	2148      	movs	r1, #72	@ 0x48
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fa2b 	bl	8008430 <VL53L0X_WrByte>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	2147      	movs	r1, #71	@ 0x47
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fa23 	bl	8008430 <VL53L0X_WrByte>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	2132      	movs	r1, #50	@ 0x32
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fa1b 	bl	8008430 <VL53L0X_WrByte>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007002:	4313      	orrs	r3, r2
 8007004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007008:	2207      	movs	r2, #7
 800700a:	2130      	movs	r1, #48	@ 0x30
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fa0f 	bl	8008430 <VL53L0X_WrByte>
 8007012:	4603      	mov	r3, r0
 8007014:	461a      	mov	r2, r3
 8007016:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800701a:	4313      	orrs	r3, r2
 800701c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007020:	2201      	movs	r2, #1
 8007022:	21ff      	movs	r1, #255	@ 0xff
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 fa03 	bl	8008430 <VL53L0X_WrByte>
 800702a:	4603      	mov	r3, r0
 800702c:	461a      	mov	r2, r3
 800702e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007032:	4313      	orrs	r3, r2
 8007034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007038:	2220      	movs	r2, #32
 800703a:	2130      	movs	r1, #48	@ 0x30
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f9f7 	bl	8008430 <VL53L0X_WrByte>
 8007042:	4603      	mov	r3, r0
 8007044:	461a      	mov	r2, r3
 8007046:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800704a:	4313      	orrs	r3, r2
 800704c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007050:	2200      	movs	r2, #0
 8007052:	21ff      	movs	r1, #255	@ 0xff
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f9eb 	bl	8008430 <VL53L0X_WrByte>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007062:	4313      	orrs	r3, r2
 8007064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007068:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800706c:	2b00      	cmp	r3, #0
 800706e:	d17e      	bne.n	800716e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007070:	78bb      	ldrb	r3, [r7, #2]
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fe38 	bl	8005ce8 <VL53L0X_encode_vcsel_period>
 8007078:	4603      	mov	r3, r0
 800707a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependent on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007084:	2b01      	cmp	r3, #1
 8007086:	d045      	beq.n	8007114 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007088:	e06e      	b.n	8007168 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800708a:	f107 0314 	add.w	r3, r7, #20
 800708e:	461a      	mov	r2, r3
 8007090:	2103      	movs	r1, #3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fc32 	bl	80068fc <get_sequence_step_timeout>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800709e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80070a6:	f107 0310 	add.w	r3, r7, #16
 80070aa:	461a      	mov	r2, r3
 80070ac:	2102      	movs	r1, #2
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fc24 	bl	80068fc <get_sequence_step_timeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80070ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80070c2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80070c6:	461a      	mov	r2, r3
 80070c8:	2150      	movs	r1, #80	@ 0x50
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 f9b0 	bl	8008430 <VL53L0X_WrByte>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80070d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d108      	bne.n	80070f0 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	461a      	mov	r2, r3
 80070e2:	2103      	movs	r1, #3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fce9 	bl	8006abc <set_sequence_step_timeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80070f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d108      	bne.n	800710a <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	461a      	mov	r2, r3
 80070fc:	2102      	movs	r1, #2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fcdc 	bl	8006abc <set_sequence_step_timeout>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	78ba      	ldrb	r2, [r7, #2]
 800710e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007112:	e02c      	b.n	800716e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007114:	f107 0318 	add.w	r3, r7, #24
 8007118:	461a      	mov	r2, r3
 800711a:	2104      	movs	r1, #4
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fbed 	bl	80068fc <get_sequence_step_timeout>
 8007122:	4603      	mov	r3, r0
 8007124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007128:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007130:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007134:	461a      	mov	r2, r3
 8007136:	2170      	movs	r1, #112	@ 0x70
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 f979 	bl	8008430 <VL53L0X_WrByte>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007144:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007148:	2b00      	cmp	r3, #0
 800714a:	d108      	bne.n	800715e <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	461a      	mov	r2, r3
 8007150:	2104      	movs	r1, #4
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fcb2 	bl	8006abc <set_sequence_step_timeout>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	78ba      	ldrb	r2, [r7, #2]
 8007162:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007166:	e002      	b.n	800716e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007168:	23fc      	movs	r3, #252	@ 0xfc
 800716a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800716e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800717c:	69f9      	ldr	r1, [r7, #28]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fc fe24 	bl	8003dcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800718a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8007192:	f107 010f 	add.w	r1, r7, #15
 8007196:	2301      	movs	r3, #1
 8007198:	2200      	movs	r2, #0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fe fcc0 	bl	8005b20 <VL53L0X_perform_phase_calibration>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80071a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3728      	adds	r7, #40	@ 0x28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b086      	sub	sp, #24
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	460b      	mov	r3, r1
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d00a      	beq.n	80071e4 <VL53L0X_get_vcsel_pulse_period+0x32>
 80071ce:	e013      	b.n	80071f8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80071d0:	f107 0316 	add.w	r3, r7, #22
 80071d4:	461a      	mov	r2, r3
 80071d6:	2150      	movs	r1, #80	@ 0x50
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f001 f831 	bl	8008240 <VL53L0X_RdByte>
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80071e2:	e00b      	b.n	80071fc <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80071e4:	f107 0316 	add.w	r3, r7, #22
 80071e8:	461a      	mov	r2, r3
 80071ea:	2170      	movs	r1, #112	@ 0x70
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f001 f827 	bl	8008240 <VL53L0X_RdByte>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80071f6:	e001      	b.n	80071fc <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071f8:	23fc      	movs	r3, #252	@ 0xfc
 80071fa:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80071fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007204:	7dbb      	ldrb	r3, [r7, #22]
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fd5b 	bl	8005cc2 <VL53L0X_decode_vcsel_period>
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	701a      	strb	r2, [r3, #0]

	return Status;
 8007214:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b092      	sub	sp, #72	@ 0x48
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007230:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007234:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8007236:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800723c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007240:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007242:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8007248:	f240 234e 	movw	r3, #590	@ 0x24e
 800724c:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800724e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007254:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007258:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800725a:	f240 2326 	movw	r3, #550	@ 0x226
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8007264:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007268:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	429a      	cmp	r2, r3
 8007274:	d205      	bcs.n	8007282 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007276:	23fc      	movs	r3, #252	@ 0xfc
 8007278:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800727c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007280:	e0aa      	b.n	80073d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007282:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800728e:	f107 0314 	add.w	r3, r7, #20
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fc fee1 	bl	800405c <VL53L0X_GetSequenceStepEnables>
 800729a:	4603      	mov	r3, r0
 800729c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80072a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d15b      	bne.n	8007360 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80072a8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80072ae:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80072b4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d052      	beq.n	8007360 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80072ba:	f107 0310 	add.w	r3, r7, #16
 80072be:	461a      	mov	r2, r3
 80072c0:	2102      	movs	r1, #2
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fb1a 	bl	80068fc <get_sequence_step_timeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80072ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80072d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80072da:	e07d      	b.n	80073d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80072dc:	7d3b      	ldrb	r3, [r7, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00f      	beq.n	8007302 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80072e2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80072e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e6:	4413      	add	r3, r2
 80072e8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d204      	bcs.n	80072fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80072f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80072fa:	e002      	b.n	8007302 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072fc:	23fc      	movs	r3, #252	@ 0xfc
 80072fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007302:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800730a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800730e:	e063      	b.n	80073d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007310:	7dbb      	ldrb	r3, [r7, #22]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d011      	beq.n	800733a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	4413      	add	r3, r2
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007324:	429a      	cmp	r2, r3
 8007326:	d204      	bcs.n	8007332 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007328:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007330:	e016      	b.n	8007360 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007332:	23fc      	movs	r3, #252	@ 0xfc
 8007334:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007338:	e012      	b.n	8007360 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800733a:	7d7b      	ldrb	r3, [r7, #21]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00f      	beq.n	8007360 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007344:	4413      	add	r3, r2
 8007346:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800734c:	429a      	cmp	r2, r3
 800734e:	d204      	bcs.n	800735a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007350:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	643b      	str	r3, [r7, #64]	@ 0x40
 8007358:	e002      	b.n	8007360 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800735a:	23fc      	movs	r3, #252	@ 0xfc
 800735c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007360:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007368:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800736c:	e034      	b.n	80073d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d019      	beq.n	80073a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007374:	f107 030c 	add.w	r3, r7, #12
 8007378:	461a      	mov	r2, r3
 800737a:	2103      	movs	r1, #3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fabd 	bl	80068fc <get_sequence_step_timeout>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800738c:	4413      	add	r3, r2
 800738e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007394:	429a      	cmp	r2, r3
 8007396:	d204      	bcs.n	80073a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	643b      	str	r3, [r7, #64]	@ 0x40
 80073a0:	e002      	b.n	80073a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073a2:	23fc      	movs	r3, #252	@ 0xfc
 80073a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80073a8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d111      	bne.n	80073d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80073b0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00e      	beq.n	80073d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80073b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	643b      	str	r3, [r7, #64]	@ 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 80073be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073c0:	2104      	movs	r1, #4
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff fb7a 	bl	8006abc <set_sequence_step_timeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80073d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3748      	adds	r7, #72	@ 0x48
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b090      	sub	sp, #64	@ 0x40
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80073f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80073f4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80073f6:	f240 7376 	movw	r3, #1910	@ 0x776
 80073fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80073fc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007402:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007406:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007408:	f240 234e 	movw	r3, #590	@ 0x24e
 800740c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800740e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8007412:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007414:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800741a:	f240 2326 	movw	r3, #550	@ 0x226
 800741e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007428:	441a      	add	r2, r3
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800742e:	f107 0318 	add.w	r3, r7, #24
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fc fe11 	bl	800405c <VL53L0X_GetSequenceStepEnables>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007440:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007448:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800744c:	e075      	b.n	800753a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800744e:	7e3b      	ldrb	r3, [r7, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007454:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800745a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800745c:	2b00      	cmp	r3, #0
 800745e:	d030      	beq.n	80074c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007460:	f107 0310 	add.w	r3, r7, #16
 8007464:	461a      	mov	r2, r3
 8007466:	2102      	movs	r1, #2
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fa47 	bl	80068fc <get_sequence_step_timeout>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007474:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007478:	2b00      	cmp	r3, #0
 800747a:	d122      	bne.n	80074c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800747c:	7e3b      	ldrb	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007486:	6939      	ldr	r1, [r7, #16]
 8007488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800748c:	441a      	add	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007492:	7ebb      	ldrb	r3, [r7, #26]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800749c:	6939      	ldr	r1, [r7, #16]
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	440b      	add	r3, r1
 80074a2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80074a4:	441a      	add	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e00a      	b.n	80074c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80074ac:	7e7b      	ldrb	r3, [r7, #25]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d007      	beq.n	80074c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80074b6:	6939      	ldr	r1, [r7, #16]
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80074bc:	441a      	add	r2, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d114      	bne.n	80074f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80074ca:	7efb      	ldrb	r3, [r7, #27]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d011      	beq.n	80074f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	461a      	mov	r2, r3
 80074d6:	2103      	movs	r1, #3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fa0f 	bl	80068fc <get_sequence_step_timeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80074e8:	68f9      	ldr	r1, [r7, #12]
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80074ee:	441a      	add	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d114      	bne.n	8007526 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80074fc:	7f3b      	ldrb	r3, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007502:	f107 0314 	add.w	r3, r7, #20
 8007506:	461a      	mov	r2, r3
 8007508:	2104      	movs	r1, #4
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff f9f6 	bl	80068fc <get_sequence_step_timeout>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800751a:	6979      	ldr	r1, [r7, #20]
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007520:	441a      	add	r2, r3
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007526:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007536:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800753a:	4618      	mov	r0, r3
 800753c:	3740      	adds	r7, #64	@ 0x40
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800754e:	2300      	movs	r3, #0
 8007550:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007556:	e0c6      	b.n	80076e6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	4413      	add	r3, r2
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	3301      	adds	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	2bff      	cmp	r3, #255	@ 0xff
 800756c:	f040 808d 	bne.w	800768a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	4413      	add	r3, r2
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	747b      	strb	r3, [r7, #17]
			Index++;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	3301      	adds	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007580:	7c7b      	ldrb	r3, [r7, #17]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d87e      	bhi.n	8007684 <VL53L0X_load_tuning_settings+0x140>
 8007586:	a201      	add	r2, pc, #4	@ (adr r2, 800758c <VL53L0X_load_tuning_settings+0x48>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075d7 	.word	0x080075d7
 8007594:	08007611 	.word	0x08007611
 8007598:	0800764b 	.word	0x0800764b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	4413      	add	r3, r2
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	743b      	strb	r3, [r7, #16]
				Index++;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	3301      	adds	r3, #1
 80075aa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	4413      	add	r3, r2
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	3301      	adds	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80075bc:	7c3b      	ldrb	r3, [r7, #16]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	4413      	add	r3, r2
 80075ca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	89ba      	ldrh	r2, [r7, #12]
 80075d0:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 80075d4:	e087      	b.n	80076e6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	4413      	add	r3, r2
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	743b      	strb	r3, [r7, #16]
				Index++;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	3301      	adds	r3, #1
 80075e4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	4413      	add	r3, r2
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	73fb      	strb	r3, [r7, #15]
				Index++;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3301      	adds	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80075f6:	7c3b      	ldrb	r3, [r7, #16]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	b29b      	uxth	r3, r3
 8007602:	4413      	add	r3, r2
 8007604:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	89ba      	ldrh	r2, [r7, #12]
 800760a:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800760e:	e06a      	b.n	80076e6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	743b      	strb	r3, [r7, #16]
				Index++;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	3301      	adds	r3, #1
 800761e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	4413      	add	r3, r2
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	73fb      	strb	r3, [r7, #15]
				Index++;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3301      	adds	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007630:	7c3b      	ldrb	r3, [r7, #16]
 8007632:	b29b      	uxth	r3, r3
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	b29a      	uxth	r2, r3
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	b29b      	uxth	r3, r3
 800763c:	4413      	add	r3, r2
 800763e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	89ba      	ldrh	r2, [r7, #12]
 8007644:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8007648:	e04d      	b.n	80076e6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	4413      	add	r3, r2
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	743b      	strb	r3, [r7, #16]
				Index++;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	3301      	adds	r3, #1
 8007658:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	3301      	adds	r3, #1
 8007668:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800766a:	7c3b      	ldrb	r3, [r7, #16]
 800766c:	b29b      	uxth	r3, r3
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	b29a      	uxth	r2, r3
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	b29b      	uxth	r3, r3
 8007676:	4413      	add	r3, r2
 8007678:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	89ba      	ldrh	r2, [r7, #12]
 800767e:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a
				break;
 8007682:	e030      	b.n	80076e6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007684:	23fc      	movs	r3, #252	@ 0xfc
 8007686:	77fb      	strb	r3, [r7, #31]
 8007688:	e02d      	b.n	80076e6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800768a:	7cfb      	ldrb	r3, [r7, #19]
 800768c:	2b04      	cmp	r3, #4
 800768e:	d828      	bhi.n	80076e2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4413      	add	r3, r2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	74bb      	strb	r3, [r7, #18]
			Index++;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	3301      	adds	r3, #1
 800769e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	e00f      	b.n	80076c6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	4413      	add	r3, r2
 80076ac:	7819      	ldrb	r1, [r3, #0]
 80076ae:	f107 0208 	add.w	r2, r7, #8
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	4413      	add	r3, r2
 80076b6:	460a      	mov	r2, r1
 80076b8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	3301      	adds	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	3301      	adds	r3, #1
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	7cfb      	ldrb	r3, [r7, #19]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	dbeb      	blt.n	80076a6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80076ce:	7cfb      	ldrb	r3, [r7, #19]
 80076d0:	f107 0208 	add.w	r2, r7, #8
 80076d4:	7cb9      	ldrb	r1, [r7, #18]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fddc 	bl	8008294 <VL53L0X_WriteMulti>
 80076dc:	4603      	mov	r3, r0
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e001      	b.n	80076e6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076e2:	23fc      	movs	r3, #252	@ 0xfc
 80076e4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	4413      	add	r3, r2
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <VL53L0X_load_tuning_settings+0x1b8>
 80076f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f43f af2e 	beq.w	8007558 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007714:	2300      	movs	r3, #0
 8007716:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800771e:	f107 0313 	add.w	r3, r7, #19
 8007722:	4619      	mov	r1, r3
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7fc fd65 	bl	80041f4 <VL53L0X_GetXTalkCompensationEnable>
 800772a:	4603      	mov	r3, r0
 800772c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800772e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d111      	bne.n	800775a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007736:	7cfb      	ldrb	r3, [r7, #19]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00e      	beq.n	800775a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	8a9b      	ldrh	r3, [r3, #20]
 8007746:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	fb02 f303 	mul.w	r3, r2, r3
 800774e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	3380      	adds	r3, #128	@ 0x80
 8007754:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800775a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800777e:	f107 0310 	add.w	r3, r7, #16
 8007782:	461a      	mov	r2, r3
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff ffbe 	bl	8007708 <VL53L0X_get_total_xtalk_rate>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	441a      	add	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]

	return Status;
 80077a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b09a      	sub	sp, #104	@ 0x68
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80077be:	2312      	movs	r3, #18
 80077c0:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80077c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80077c6:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80077c8:	2342      	movs	r3, #66	@ 0x42
 80077ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80077cc:	2306      	movs	r3, #6
 80077ce:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80077d0:	2307      	movs	r3, #7
 80077d2:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8b3 3150 	ldrh.w	r3, [r3, #336]	@ 0x150
	dmaxCalRange_mm =
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80077e8:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80077ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80077f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f6:	3380      	adds	r3, #128	@ 0x80
 80077f8:	0a1b      	lsrs	r3, r3, #8
 80077fa:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80077fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007800:	fb02 f303 	mul.w	r3, r2, r3
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01a      	beq.n	8007846 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	029b      	lsls	r3, r3, #10
 8007814:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800781a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800781c:	4413      	add	r3, r2
 800781e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007820:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	fbb2 f3f3 	udiv	r3, r2, r3
 8007828:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800782a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800782c:	4613      	mov	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	4413      	add	r3, r2
 8007832:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007836:	fb03 f303 	mul.w	r3, r3, r3
 800783a:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800783c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800783e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800784a:	fb02 f303 	mul.w	r3, r2, r3
 800784e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007852:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007856:	0c1b      	lsrs	r3, r3, #16
 8007858:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	fb03 f303 	mul.w	r3, r3, r3
 8007860:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007864:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800786c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800786e:	085a      	lsrs	r2, r3, #1
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	441a      	add	r2, r3
 8007874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007876:	fbb2 f3f3 	udiv	r3, r2, r3
 800787a:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800788c:	d302      	bcc.n	8007894 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800788e:	4b54      	ldr	r3, [pc, #336]	@ (80079e0 <VL53L0X_calc_dmax+0x230>)
 8007890:	663b      	str	r3, [r7, #96]	@ 0x60
 8007892:	e015      	b.n	80078c0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007896:	085a      	lsrs	r2, r3, #1
 8007898:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800789a:	441a      	add	r2, r3
 800789c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800789e:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a2:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80078a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078a8:	fb02 f303 	mul.w	r3, r2, r3
 80078ac:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80078ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078b0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80078b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078ba:	fb03 f303 	mul.w	r3, r3, r3
 80078be:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80078c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078c2:	039b      	lsls	r3, r3, #14
 80078c4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80078c8:	4a46      	ldr	r2, [pc, #280]	@ (80079e4 <VL53L0X_calc_dmax+0x234>)
 80078ca:	fba2 2303 	umull	r2, r3, r2, r3
 80078ce:	099b      	lsrs	r3, r3, #6
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	fb03 f303 	mul.w	r3, r3, r3
 80078d8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80078da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078dc:	fb03 f303 	mul.w	r3, r3, r3
 80078e0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	3308      	adds	r3, #8
 80078e6:	091b      	lsrs	r3, r3, #4
 80078e8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80078ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80078f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f4:	4613      	mov	r3, r2
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	4413      	add	r3, r2
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007904:	0b9b      	lsrs	r3, r3, #14
 8007906:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800790a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800790c:	4413      	add	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4413      	add	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800791e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007922:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	039b      	lsls	r3, r3, #14
 8007928:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	4413      	add	r3, r2
 8007932:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800794e:	4a25      	ldr	r2, [pc, #148]	@ (80079e4 <VL53L0X_calc_dmax+0x234>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	099b      	lsrs	r3, r3, #6
 8007956:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007964:	4a1f      	ldr	r2, [pc, #124]	@ (80079e4 <VL53L0X_calc_dmax+0x234>)
 8007966:	fba2 2303 	umull	r2, r3, r2, r3
 800796a:	099b      	lsrs	r3, r3, #6
 800796c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800796e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007970:	3380      	adds	r3, #128	@ 0x80
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	085a      	lsrs	r2, r3, #1
 8007980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007982:	441a      	add	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	fbb2 f3f3 	udiv	r3, r2, r3
 800798a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800798c:	e001      	b.n	8007992 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007992:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007994:	f7fe f9bb 	bl	8005d0e <VL53L0X_isqrt>
 8007998:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	085a      	lsrs	r2, r3, #1
 80079a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a6:	441a      	add	r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079b0:	e001      	b.n	80079b6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80079b6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80079b8:	f7fe f9a9 	bl	8005d0e <VL53L0X_isqrt>
 80079bc:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 80079be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d902      	bls.n	80079d2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80079cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079d0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80079d2:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3768      	adds	r7, #104	@ 0x68
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	fff00000 	.word	0xfff00000
 80079e4:	10624dd3 	.word	0x10624dd3

080079e8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b0b2      	sub	sp, #200	@ 0xc8
 80079ec:	af04      	add	r7, sp, #16
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80079f6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80079fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80079fe:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8007a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007a06:	2342      	movs	r3, #66	@ 0x42
 8007a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007a0c:	f241 235c 	movw	r3, #4700	@ 0x125c
 8007a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007a14:	4b6b      	ldr	r3, [pc, #428]	@ (8007bc4 <VL53L0X_calc_sigma_estimate+0x1dc>)
 8007a16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007a1a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007a1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007a22:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 8007a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007a30:	4b65      	ldr	r3, [pc, #404]	@ (8007bc8 <VL53L0X_calc_sigma_estimate+0x1e0>)
 8007a32:	67bb      	str	r3, [r7, #120]	@ 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a38:	677b      	str	r3, [r7, #116]	@ 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007a3a:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8007a3e:	673b      	str	r3, [r7, #112]	@ 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8007a40:	f240 6377 	movw	r3, #1655	@ 0x677
 8007a44:	66fb      	str	r3, [r7, #108]	@ 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007a5e:	0c1b      	lsrs	r3, r3, #16
 8007a60:	66bb      	str	r3, [r7, #104]	@ 0x68

	correctedSignalRate_mcps =
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	667b      	str	r3, [r7, #100]	@ 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007a68:	f107 0310 	add.w	r3, r7, #16
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fe78 	bl	8007766 <VL53L0X_get_total_signal_rate>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	461a      	mov	r2, r3
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff fe3f 	bl	8007708 <VL53L0X_get_total_xtalk_rate>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a96:	fb02 f303 	mul.w	r3, r2, r3
 8007a9a:	663b      	str	r3, [r7, #96]	@ 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a9e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	663b      	str	r3, [r7, #96]	@ 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007aac:	fb02 f303 	mul.w	r3, r2, r3
 8007ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007ab4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007ab8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d902      	bls.n	8007ac4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 8007ac4:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d164      	bne.n	8007b96 <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ad2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8007ada:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007ade:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f7fe feb2 	bl	8006850 <VL53L0X_calc_timeout_mclks>
 8007aec:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007af4:	653b      	str	r3, [r7, #80]	@ 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8007afc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007b00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b04:	461a      	mov	r2, r3
 8007b06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7fe fea1 	bl	8006850 <VL53L0X_calc_timeout_mclks>
 8007b0e:	64b8      	str	r0, [r7, #72]	@ 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007b10:	2303      	movs	r3, #3
 8007b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (finalRangeVcselPCLKS == 8)
 8007b16:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d102      	bne.n	8007b24 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b28:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007b2a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8007b2e:	fb02 f303 	mul.w	r3, r2, r3
 8007b32:	02db      	lsls	r3, r3, #11
 8007b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b3c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007b40:	4a22      	ldr	r2, [pc, #136]	@ (8007bcc <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	099b      	lsrs	r3, r3, #6
 8007b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8007b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b5e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007b62:	4a1a      	ldr	r2, [pc, #104]	@ (8007bcc <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007b64:	fba2 2303 	umull	r2, r3, r2, r3
 8007b68:	099b      	lsrs	r3, r3, #6
 8007b6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3380      	adds	r3, #128	@ 0x80
 8007b72:	0a1b      	lsrs	r3, r3, #8
 8007b74:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007b84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b88:	3380      	adds	r3, #128	@ 0x80
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007b96:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 8007b9e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8007ba2:	e127      	b.n	8007df4 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 8007ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d112      	bne.n	8007bd0 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007bb0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007bb8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		*pDmax_mm = 0;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e115      	b.n	8007df0 <VL53L0X_calc_sigma_estimate+0x408>
 8007bc4:	028f87ae 	.word	0x028f87ae
 8007bc8:	0006999a 	.word	0x0006999a
 8007bcc:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8007bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007bde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007be2:	647b      	str	r3, [r7, #68]	@ 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007be4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007be6:	041a      	lsls	r2, r3, #16
 8007be8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007bf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d902      	bls.n	8007c02 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007bfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007c02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c06:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
 8007c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c16:	4613      	mov	r3, r2
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe f875 	bl	8005d0e <VL53L0X_isqrt>
 8007c24:	4603      	mov	r3, r0
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	643b      	str	r3, [r7, #64]	@ 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	891b      	ldrh	r3, [r3, #8]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c3a:	041a      	lsls	r2, r3, #16
 8007c3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c40:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 8007c42:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c46:	4a6d      	ldr	r2, [pc, #436]	@ (8007dfc <VL53L0X_calc_sigma_estimate+0x414>)
 8007c48:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4c:	099b      	lsrs	r3, r3, #6
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007c50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c52:	041a      	lsls	r2, r3, #16
 8007c54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c58:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8007c5a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007c5e:	4a67      	ldr	r2, [pc, #412]	@ (8007dfc <VL53L0X_calc_sigma_estimate+0x414>)
 8007c60:	fba2 2303 	umull	r2, r3, r2, r3
 8007c64:	099b      	lsrs	r3, r3, #6
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6a:	021b      	lsls	r3, r3, #8
 8007c6c:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfb8      	it	lt
 8007c7a:	425b      	neglt	r3, r3
 8007c7c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007c84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8007c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c98:	fb02 f303 	mul.w	r3, r2, r3
 8007c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ca0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ca2:	4413      	add	r3, r2
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8007cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8007cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 8007cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb8:	fb03 f303 	mul.w	r3, r3, r3
 8007cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8007cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc0:	0b9b      	lsrs	r3, r3, #14
 8007cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cc8:	fb02 f303 	mul.w	r3, r2, r3
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007cd4:	0c1b      	lsrs	r3, r3, #16
 8007cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cda:	fb03 f303 	mul.w	r3, r3, r3
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28

		sqr2 = sigmaEstimateP2;
 8007ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	fb03 f303 	mul.w	r3, r3, r3
 8007cf6:	627b      	str	r3, [r7, #36]	@ 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	4413      	add	r3, r2
 8007cfe:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007d00:	6a38      	ldr	r0, [r7, #32]
 8007d02:	f7fe f804 	bl	8005d0e <VL53L0X_isqrt>
 8007d06:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	041b      	lsls	r3, r3, #16
 8007d0c:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	3332      	adds	r3, #50	@ 0x32
 8007d12:	4a3b      	ldr	r2, [pc, #236]	@ (8007e00 <VL53L0X_calc_sigma_estimate+0x418>)
 8007d14:	fba2 2303 	umull	r2, r3, r2, r3
 8007d18:	095a      	lsrs	r2, r3, #5
 8007d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d28:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d38:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		sigmaEstRtn		 /= 10000;
 8007d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d46:	4a2f      	ldr	r2, [pc, #188]	@ (8007e04 <VL53L0X_calc_sigma_estimate+0x41c>)
 8007d48:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4c:	0b5b      	lsrs	r3, r3, #13
 8007d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007d52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d903      	bls.n	8007d66 <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007d5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d6a:	fb03 f303 	mul.w	r3, r3, r3
 8007d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8007d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d74:	fb03 f303 	mul.w	r3, r3, r3
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	4413      	add	r3, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fd ffc4 	bl	8005d0e <VL53L0X_isqrt>
 8007d86:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d8e:	fb02 f303 	mul.w	r3, r2, r3
 8007d92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d009      	beq.n	8007db0 <VL53L0X_calc_sigma_estimate+0x3c8>
 8007d9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <VL53L0X_calc_sigma_estimate+0x3c8>
 8007da4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d903      	bls.n	8007db8 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007dbe:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		Status = VL53L0X_calc_dmax(
 8007dca:	6939      	ldr	r1, [r7, #16]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	9303      	str	r3, [sp, #12]
 8007dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dd4:	9302      	str	r3, [sp, #8]
 8007dd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff fce3 	bl	80077b0 <VL53L0X_calc_dmax>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007df0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	37b8      	adds	r7, #184	@ 0xb8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	10624dd3 	.word	0x10624dd3
 8007e00:	51eb851f 	.word	0x51eb851f
 8007e04:	d1b71759 	.word	0xd1b71759

08007e08 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b090      	sub	sp, #64	@ 0x40
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	461a      	mov	r2, r3
 8007e14:	460b      	mov	r3, r1
 8007e16:	72fb      	strb	r3, [r7, #11]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	10db      	asrs	r3, r3, #3
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007e68:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d017      	beq.n	8007ea0 <VL53L0X_get_pal_range_status+0x98>
 8007e70:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007e74:	2b05      	cmp	r3, #5
 8007e76:	d013      	beq.n	8007ea0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007e78:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007e7c:	2b07      	cmp	r3, #7
 8007e7e:	d00f      	beq.n	8007ea0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007e80:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007e84:	2b0c      	cmp	r3, #12
 8007e86:	d00b      	beq.n	8007ea0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007e88:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007e8c:	2b0d      	cmp	r3, #13
 8007e8e:	d007      	beq.n	8007ea0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007e90:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007e94:	2b0e      	cmp	r3, #14
 8007e96:	d003      	beq.n	8007ea0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007e98:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007e9c:	2b0f      	cmp	r3, #15
 8007e9e:	d103      	bne.n	8007ea8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8007ea6:	e002      	b.n	8007eae <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 8007eae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d107      	bne.n	8007ec6 <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	21ff      	movs	r1, #255	@ 0xff
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fab8 	bl	8008430 <VL53L0X_WrByte>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8007ec6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d109      	bne.n	8007ee2 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 8007ece:	f107 0316 	add.w	r3, r7, #22
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	21b6      	movs	r1, #182	@ 0xb6
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 fa38 	bl	800834c <VL53L0X_RdWord>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007ee2:	8afb      	ldrh	r3, [r7, #22]
 8007ee4:	025b      	lsls	r3, r3, #9
 8007ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8007ee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d107      	bne.n	8007f00 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	21ff      	movs	r1, #255	@ 0xff
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fa9b 	bl	8008430 <VL53L0X_WrByte>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f04:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007f08:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007f10:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007f14:	461a      	mov	r2, r3
 8007f16:	2100      	movs	r1, #0
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7fc fa3f 	bl	800439c <VL53L0X_GetLimitCheckEnable>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007f24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d02e      	beq.n	8007f8a <VL53L0X_get_pal_range_status+0x182>
 8007f2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d12a      	bne.n	8007f8a <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007f34:	f107 0310 	add.w	r3, r7, #16
 8007f38:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007f3c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff fd52 	bl	80079e8 <VL53L0X_calc_sigma_estimate>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007f4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f58:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007f5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d113      	bne.n	8007f8a <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007f62:	f107 0320 	add.w	r3, r7, #32
 8007f66:	461a      	mov	r2, r3
 8007f68:	2100      	movs	r1, #0
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7fc fa9c 	bl	80044a8 <VL53L0X_GetLimitCheckValue>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d006      	beq.n	8007f8a <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d902      	bls.n	8007f8a <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007f8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007f92:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8007f96:	461a      	mov	r2, r3
 8007f98:	2102      	movs	r1, #2
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f7fc f9fe 	bl	800439c <VL53L0X_GetLimitCheckEnable>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007fa6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d017      	beq.n	8007fde <VL53L0X_get_pal_range_status+0x1d6>
 8007fae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d113      	bne.n	8007fde <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007fb6:	f107 031c 	add.w	r3, r7, #28
 8007fba:	461a      	mov	r2, r3
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7fc fa72 	bl	80044a8 <VL53L0X_GetLimitCheckValue>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007fd0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d902      	bls.n	8007fde <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007fde:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007fea:	461a      	mov	r2, r3
 8007fec:	2103      	movs	r1, #3
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7fc f9d4 	bl	800439c <VL53L0X_GetLimitCheckEnable>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d023      	beq.n	800804a <VL53L0X_get_pal_range_status+0x242>
 8008002:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008006:	2b00      	cmp	r3, #0
 8008008:	d11f      	bne.n	800804a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800800a:	893b      	ldrh	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
 8008014:	e005      	b.n	8008022 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	021a      	lsls	r2, r3, #8
 800801a:	893b      	ldrh	r3, [r7, #8]
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008022:	f107 0318 	add.w	r3, r7, #24
 8008026:	461a      	mov	r2, r3
 8008028:	2103      	movs	r1, #3
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7fc fa3c 	bl	80044a8 <VL53L0X_GetLimitCheckValue>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800803c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800803e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008040:	429a      	cmp	r2, r3
 8008042:	d202      	bcs.n	800804a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008044:	2301      	movs	r3, #1
 8008046:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800804a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800804e:	2b00      	cmp	r3, #0
 8008050:	d14a      	bne.n	80080e8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008052:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008056:	2b01      	cmp	r3, #1
 8008058:	d103      	bne.n	8008062 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800805a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800805c:	22ff      	movs	r2, #255	@ 0xff
 800805e:	701a      	strb	r2, [r3, #0]
 8008060:	e042      	b.n	80080e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008062:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008066:	2b01      	cmp	r3, #1
 8008068:	d007      	beq.n	800807a <VL53L0X_get_pal_range_status+0x272>
 800806a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800806e:	2b02      	cmp	r3, #2
 8008070:	d003      	beq.n	800807a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008072:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008076:	2b03      	cmp	r3, #3
 8008078:	d103      	bne.n	8008082 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800807a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800807c:	2205      	movs	r2, #5
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e032      	b.n	80080e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008082:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008086:	2b06      	cmp	r3, #6
 8008088:	d003      	beq.n	8008092 <VL53L0X_get_pal_range_status+0x28a>
 800808a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800808e:	2b09      	cmp	r3, #9
 8008090:	d103      	bne.n	800809a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008094:	2204      	movs	r2, #4
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e026      	b.n	80080e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800809a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800809e:	2b08      	cmp	r3, #8
 80080a0:	d007      	beq.n	80080b2 <VL53L0X_get_pal_range_status+0x2aa>
 80080a2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80080a6:	2b0a      	cmp	r3, #10
 80080a8:	d003      	beq.n	80080b2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80080aa:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d103      	bne.n	80080ba <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80080b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b4:	2203      	movs	r2, #3
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e016      	b.n	80080e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80080ba:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d003      	beq.n	80080ca <VL53L0X_get_pal_range_status+0x2c2>
 80080c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d103      	bne.n	80080d2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80080ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080cc:	2202      	movs	r2, #2
 80080ce:	701a      	strb	r2, [r3, #0]
 80080d0:	e00a      	b.n	80080e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80080d2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d103      	bne.n	80080e2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80080da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080dc:	2201      	movs	r2, #1
 80080de:	701a      	strb	r2, [r3, #0]
 80080e0:	e002      	b.n	80080e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80080e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80080e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80080f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f2:	2200      	movs	r2, #0
 80080f4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80080f6:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 80080fa:	461a      	mov	r2, r3
 80080fc:	2101      	movs	r1, #1
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7fc f94c 	bl	800439c <VL53L0X_GetLimitCheckEnable>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800810a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800810e:	2b00      	cmp	r3, #0
 8008110:	d14f      	bne.n	80081b2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <VL53L0X_get_pal_range_status+0x31a>
 800811a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800811e:	2b01      	cmp	r3, #1
 8008120:	d103      	bne.n	800812a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008128:	e002      	b.n	8008130 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008136:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800813a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800813e:	2b04      	cmp	r3, #4
 8008140:	d003      	beq.n	800814a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008142:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800814a:	2301      	movs	r3, #1
 800814c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008150:	e002      	b.n	8008158 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800815e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008162:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <VL53L0X_get_pal_range_status+0x36a>
 800816a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d103      	bne.n	800817a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008172:	2301      	movs	r3, #1
 8008174:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008178:	e002      	b.n	8008180 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800818a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <VL53L0X_get_pal_range_status+0x392>
 8008192:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008196:	2b01      	cmp	r3, #1
 8008198:	d103      	bne.n	80081a2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80081a0:	e002      	b.n	80081a8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80081ae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3740      	adds	r7, #64	@ 0x40
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80081be:	b580      	push	{r7, lr}
 80081c0:	b088      	sub	sp, #32
 80081c2:	af02      	add	r7, sp, #8
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	330a      	adds	r3, #10
 80081ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 80081dc:	4619      	mov	r1, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	f7f9 f9ab 	bl	8001544 <HAL_I2C_Master_Transmit>
 80081ee:	4603      	mov	r3, r0
 80081f0:	613b      	str	r3, [r7, #16]
    
    return status;
 80081f2:	693b      	ldr	r3, [r7, #16]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af02      	add	r7, sp, #8
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	330a      	adds	r3, #10
 800820c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	b2db      	uxtb	r3, r3
 8008220:	4619      	mov	r1, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	b29a      	uxth	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	4613      	mov	r3, r2
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	f7f9 fa87 	bl	8001740 <HAL_I2C_Master_Receive>
 8008232:	4603      	mov	r3, r0
 8008234:	613b      	str	r3, [r7, #16]
    
    return status;
 8008236:	693b      	ldr	r3, [r7, #16]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	460b      	mov	r3, r1
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8008252:	f107 030b 	add.w	r3, r7, #11
 8008256:	2201      	movs	r2, #1
 8008258:	4619      	mov	r1, r3
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff ffaf 	bl	80081be <_I2CWrite>
 8008260:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008268:	23ec      	movs	r3, #236	@ 0xec
 800826a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800826c:	e00c      	b.n	8008288 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800826e:	2201      	movs	r2, #1
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff ffc2 	bl	80081fc <_I2CRead>
 8008278:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008280:	23ec      	movs	r3, #236	@ 0xec
 8008282:	75fb      	strb	r3, [r7, #23]
 8008284:	e000      	b.n	8008288 <VL53L0X_RdByte+0x48>
    }
done:
 8008286:	bf00      	nop
    return Status;
 8008288:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	460b      	mov	r3, r1
 80082a2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80082ac:	d902      	bls.n	80082b4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80082ae:	f06f 0303 	mvn.w	r3, #3
 80082b2:	e016      	b.n	80082e2 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 80082b4:	4a0d      	ldr	r2, [pc, #52]	@ (80082ec <VL53L0X_WriteMulti+0x58>)
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	480c      	ldr	r0, [pc, #48]	@ (80082f0 <VL53L0X_WriteMulti+0x5c>)
 80082c0:	f000 f9a6 	bl	8008610 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	461a      	mov	r2, r3
 80082ca:	4908      	ldr	r1, [pc, #32]	@ (80082ec <VL53L0X_WriteMulti+0x58>)
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff ff76 	bl	80081be <_I2CWrite>
 80082d2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80082da:	23ec      	movs	r3, #236	@ 0xec
 80082dc:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 80082de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	200005c4 	.word	0x200005c4
 80082f0:	200005c5 	.word	0x200005c5

080082f4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	460b      	mov	r3, r1
 8008302:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008304:	2300      	movs	r3, #0
 8008306:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8008308:	f107 030b 	add.w	r3, r7, #11
 800830c:	2201      	movs	r2, #1
 800830e:	4619      	mov	r1, r3
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff ff54 	bl	80081be <_I2CWrite>
 8008316:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800831e:	23ec      	movs	r3, #236	@ 0xec
 8008320:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008322:	e00c      	b.n	800833e <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff67 	bl	80081fc <_I2CRead>
 800832e:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008336:	23ec      	movs	r3, #236	@ 0xec
 8008338:	75fb      	strb	r3, [r7, #23]
 800833a:	e000      	b.n	800833e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800833c:	bf00      	nop
    return Status;
 800833e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	460b      	mov	r3, r1
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800835e:	f107 030b 	add.w	r3, r7, #11
 8008362:	2201      	movs	r2, #1
 8008364:	4619      	mov	r1, r3
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff ff29 	bl	80081be <_I2CWrite>
 800836c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008374:	23ec      	movs	r3, #236	@ 0xec
 8008376:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008378:	e015      	b.n	80083a6 <VL53L0X_RdWord+0x5a>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800837a:	2202      	movs	r2, #2
 800837c:	490d      	ldr	r1, [pc, #52]	@ (80083b4 <VL53L0X_RdWord+0x68>)
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7ff ff3c 	bl	80081fc <_I2CRead>
 8008384:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800838c:	23ec      	movs	r3, #236	@ 0xec
 800838e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008390:	e009      	b.n	80083a6 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008392:	4b08      	ldr	r3, [pc, #32]	@ (80083b4 <VL53L0X_RdWord+0x68>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	b29b      	uxth	r3, r3
 800839a:	4a06      	ldr	r2, [pc, #24]	@ (80083b4 <VL53L0X_RdWord+0x68>)
 800839c:	7852      	ldrb	r2, [r2, #1]
 800839e:	4413      	add	r3, r2
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 80083a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200005c4 	.word	0x200005c4

080083b8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	460b      	mov	r3, r1
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80083ca:	f107 030b 	add.w	r3, r7, #11
 80083ce:	2201      	movs	r2, #1
 80083d0:	4619      	mov	r1, r3
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff fef3 	bl	80081be <_I2CWrite>
 80083d8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083e0:	23ec      	movs	r3, #236	@ 0xec
 80083e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083e4:	e01b      	b.n	800841e <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80083e6:	2204      	movs	r2, #4
 80083e8:	4910      	ldr	r1, [pc, #64]	@ (800842c <VL53L0X_RdDWord+0x74>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ff06 	bl	80081fc <_I2CRead>
 80083f0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083f8:	23ec      	movs	r3, #236	@ 0xec
 80083fa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083fc:	e00f      	b.n	800841e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80083fe:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <VL53L0X_RdDWord+0x74>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	061a      	lsls	r2, r3, #24
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <VL53L0X_RdDWord+0x74>)
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	441a      	add	r2, r3
 800840c:	4b07      	ldr	r3, [pc, #28]	@ (800842c <VL53L0X_RdDWord+0x74>)
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	4413      	add	r3, r2
 8008414:	4a05      	ldr	r2, [pc, #20]	@ (800842c <VL53L0X_RdDWord+0x74>)
 8008416:	78d2      	ldrb	r2, [r2, #3]
 8008418:	441a      	add	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800841e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200005c4 	.word	0x200005c4

08008430 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
 800843c:	4613      	mov	r3, r2
 800843e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008444:	4a0b      	ldr	r2, [pc, #44]	@ (8008474 <VL53L0X_WrByte+0x44>)
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800844a:	4a0a      	ldr	r2, [pc, #40]	@ (8008474 <VL53L0X_WrByte+0x44>)
 800844c:	78bb      	ldrb	r3, [r7, #2]
 800844e:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008450:	2202      	movs	r2, #2
 8008452:	4908      	ldr	r1, [pc, #32]	@ (8008474 <VL53L0X_WrByte+0x44>)
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff feb2 	bl	80081be <_I2CWrite>
 800845a:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008462:	23ec      	movs	r3, #236	@ 0xec
 8008464:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8008466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200005c4 	.word	0x200005c4

08008478 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
 8008484:	4613      	mov	r3, r2
 8008486:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800848c:	4a0e      	ldr	r2, [pc, #56]	@ (80084c8 <VL53L0X_WrWord+0x50>)
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008492:	883b      	ldrh	r3, [r7, #0]
 8008494:	0a1b      	lsrs	r3, r3, #8
 8008496:	b29b      	uxth	r3, r3
 8008498:	b2da      	uxtb	r2, r3
 800849a:	4b0b      	ldr	r3, [pc, #44]	@ (80084c8 <VL53L0X_WrWord+0x50>)
 800849c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800849e:	883b      	ldrh	r3, [r7, #0]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <VL53L0X_WrWord+0x50>)
 80084a4:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80084a6:	2203      	movs	r2, #3
 80084a8:	4907      	ldr	r1, [pc, #28]	@ (80084c8 <VL53L0X_WrWord+0x50>)
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff fe87 	bl	80081be <_I2CWrite>
 80084b0:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80084b8:	23ec      	movs	r3, #236	@ 0xec
 80084ba:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 80084bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	200005c4 	.word	0x200005c4

080084cc <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	461a      	mov	r2, r3
 80084da:	4603      	mov	r3, r0
 80084dc:	70fb      	strb	r3, [r7, #3]
 80084de:	460b      	mov	r3, r1
 80084e0:	70bb      	strb	r3, [r7, #2]
 80084e2:	4613      	mov	r3, r2
 80084e4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80084ea:	f107 020e 	add.w	r2, r7, #14
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff fea4 	bl	8008240 <VL53L0X_RdByte>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 80084fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d110      	bne.n	8008526 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8008504:	7bba      	ldrb	r2, [r7, #14]
 8008506:	78bb      	ldrb	r3, [r7, #2]
 8008508:	4013      	ands	r3, r2
 800850a:	b2da      	uxtb	r2, r3
 800850c:	787b      	ldrb	r3, [r7, #1]
 800850e:	4313      	orrs	r3, r2
 8008510:	b2db      	uxtb	r3, r3
 8008512:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008514:	7bba      	ldrb	r2, [r7, #14]
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7ff ff88 	bl	8008430 <VL53L0X_WrByte>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]
 8008524:	e000      	b.n	8008528 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008526:	bf00      	nop
done:
    return Status;
 8008528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008540:	2002      	movs	r0, #2
 8008542:	f7f8 fc03 	bl	8000d4c <HAL_Delay>
    return status;
 8008546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <siprintf>:
 8008554:	b40e      	push	{r1, r2, r3}
 8008556:	b510      	push	{r4, lr}
 8008558:	b09d      	sub	sp, #116	@ 0x74
 800855a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800855c:	9002      	str	r0, [sp, #8]
 800855e:	9006      	str	r0, [sp, #24]
 8008560:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008564:	480a      	ldr	r0, [pc, #40]	@ (8008590 <siprintf+0x3c>)
 8008566:	9107      	str	r1, [sp, #28]
 8008568:	9104      	str	r1, [sp, #16]
 800856a:	490a      	ldr	r1, [pc, #40]	@ (8008594 <siprintf+0x40>)
 800856c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008570:	9105      	str	r1, [sp, #20]
 8008572:	2400      	movs	r4, #0
 8008574:	a902      	add	r1, sp, #8
 8008576:	6800      	ldr	r0, [r0, #0]
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800857c:	f000 f8b2 	bl	80086e4 <_svfiprintf_r>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	701c      	strb	r4, [r3, #0]
 8008584:	b01d      	add	sp, #116	@ 0x74
 8008586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858a:	b003      	add	sp, #12
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	200002cc 	.word	0x200002cc
 8008594:	ffff0208 	.word	0xffff0208

08008598 <memset>:
 8008598:	4402      	add	r2, r0
 800859a:	4603      	mov	r3, r0
 800859c:	4293      	cmp	r3, r2
 800859e:	d100      	bne.n	80085a2 <memset+0xa>
 80085a0:	4770      	bx	lr
 80085a2:	f803 1b01 	strb.w	r1, [r3], #1
 80085a6:	e7f9      	b.n	800859c <memset+0x4>

080085a8 <__errno>:
 80085a8:	4b01      	ldr	r3, [pc, #4]	@ (80085b0 <__errno+0x8>)
 80085aa:	6818      	ldr	r0, [r3, #0]
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	200002cc 	.word	0x200002cc

080085b4 <__libc_init_array>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	4d0d      	ldr	r5, [pc, #52]	@ (80085ec <__libc_init_array+0x38>)
 80085b8:	4c0d      	ldr	r4, [pc, #52]	@ (80085f0 <__libc_init_array+0x3c>)
 80085ba:	1b64      	subs	r4, r4, r5
 80085bc:	10a4      	asrs	r4, r4, #2
 80085be:	2600      	movs	r6, #0
 80085c0:	42a6      	cmp	r6, r4
 80085c2:	d109      	bne.n	80085d8 <__libc_init_array+0x24>
 80085c4:	4d0b      	ldr	r5, [pc, #44]	@ (80085f4 <__libc_init_array+0x40>)
 80085c6:	4c0c      	ldr	r4, [pc, #48]	@ (80085f8 <__libc_init_array+0x44>)
 80085c8:	f000 fc6c 	bl	8008ea4 <_init>
 80085cc:	1b64      	subs	r4, r4, r5
 80085ce:	10a4      	asrs	r4, r4, #2
 80085d0:	2600      	movs	r6, #0
 80085d2:	42a6      	cmp	r6, r4
 80085d4:	d105      	bne.n	80085e2 <__libc_init_array+0x2e>
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085dc:	4798      	blx	r3
 80085de:	3601      	adds	r6, #1
 80085e0:	e7ee      	b.n	80085c0 <__libc_init_array+0xc>
 80085e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e6:	4798      	blx	r3
 80085e8:	3601      	adds	r6, #1
 80085ea:	e7f2      	b.n	80085d2 <__libc_init_array+0x1e>
 80085ec:	08008f44 	.word	0x08008f44
 80085f0:	08008f44 	.word	0x08008f44
 80085f4:	08008f44 	.word	0x08008f44
 80085f8:	08008f48 	.word	0x08008f48

080085fc <__retarget_lock_acquire_recursive>:
 80085fc:	4770      	bx	lr

080085fe <__retarget_lock_release_recursive>:
 80085fe:	4770      	bx	lr

08008600 <strcpy>:
 8008600:	4603      	mov	r3, r0
 8008602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008606:	f803 2b01 	strb.w	r2, [r3], #1
 800860a:	2a00      	cmp	r2, #0
 800860c:	d1f9      	bne.n	8008602 <strcpy+0x2>
 800860e:	4770      	bx	lr

08008610 <memcpy>:
 8008610:	440a      	add	r2, r1
 8008612:	4291      	cmp	r1, r2
 8008614:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008618:	d100      	bne.n	800861c <memcpy+0xc>
 800861a:	4770      	bx	lr
 800861c:	b510      	push	{r4, lr}
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008626:	4291      	cmp	r1, r2
 8008628:	d1f9      	bne.n	800861e <memcpy+0xe>
 800862a:	bd10      	pop	{r4, pc}

0800862c <__ssputs_r>:
 800862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	688e      	ldr	r6, [r1, #8]
 8008632:	461f      	mov	r7, r3
 8008634:	42be      	cmp	r6, r7
 8008636:	680b      	ldr	r3, [r1, #0]
 8008638:	4682      	mov	sl, r0
 800863a:	460c      	mov	r4, r1
 800863c:	4690      	mov	r8, r2
 800863e:	d82d      	bhi.n	800869c <__ssputs_r+0x70>
 8008640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008648:	d026      	beq.n	8008698 <__ssputs_r+0x6c>
 800864a:	6965      	ldr	r5, [r4, #20]
 800864c:	6909      	ldr	r1, [r1, #16]
 800864e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008652:	eba3 0901 	sub.w	r9, r3, r1
 8008656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800865a:	1c7b      	adds	r3, r7, #1
 800865c:	444b      	add	r3, r9
 800865e:	106d      	asrs	r5, r5, #1
 8008660:	429d      	cmp	r5, r3
 8008662:	bf38      	it	cc
 8008664:	461d      	movcc	r5, r3
 8008666:	0553      	lsls	r3, r2, #21
 8008668:	d527      	bpl.n	80086ba <__ssputs_r+0x8e>
 800866a:	4629      	mov	r1, r5
 800866c:	f000 f958 	bl	8008920 <_malloc_r>
 8008670:	4606      	mov	r6, r0
 8008672:	b360      	cbz	r0, 80086ce <__ssputs_r+0xa2>
 8008674:	6921      	ldr	r1, [r4, #16]
 8008676:	464a      	mov	r2, r9
 8008678:	f7ff ffca 	bl	8008610 <memcpy>
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	6126      	str	r6, [r4, #16]
 800868a:	6165      	str	r5, [r4, #20]
 800868c:	444e      	add	r6, r9
 800868e:	eba5 0509 	sub.w	r5, r5, r9
 8008692:	6026      	str	r6, [r4, #0]
 8008694:	60a5      	str	r5, [r4, #8]
 8008696:	463e      	mov	r6, r7
 8008698:	42be      	cmp	r6, r7
 800869a:	d900      	bls.n	800869e <__ssputs_r+0x72>
 800869c:	463e      	mov	r6, r7
 800869e:	6820      	ldr	r0, [r4, #0]
 80086a0:	4632      	mov	r2, r6
 80086a2:	4641      	mov	r1, r8
 80086a4:	f000 fb82 	bl	8008dac <memmove>
 80086a8:	68a3      	ldr	r3, [r4, #8]
 80086aa:	1b9b      	subs	r3, r3, r6
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	4433      	add	r3, r6
 80086b2:	6023      	str	r3, [r4, #0]
 80086b4:	2000      	movs	r0, #0
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	462a      	mov	r2, r5
 80086bc:	f000 fb48 	bl	8008d50 <_realloc_r>
 80086c0:	4606      	mov	r6, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d1e0      	bne.n	8008688 <__ssputs_r+0x5c>
 80086c6:	6921      	ldr	r1, [r4, #16]
 80086c8:	4650      	mov	r0, sl
 80086ca:	f000 fb99 	bl	8008e00 <_free_r>
 80086ce:	230c      	movs	r3, #12
 80086d0:	f8ca 3000 	str.w	r3, [sl]
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086e0:	e7e9      	b.n	80086b6 <__ssputs_r+0x8a>
	...

080086e4 <_svfiprintf_r>:
 80086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	4698      	mov	r8, r3
 80086ea:	898b      	ldrh	r3, [r1, #12]
 80086ec:	061b      	lsls	r3, r3, #24
 80086ee:	b09d      	sub	sp, #116	@ 0x74
 80086f0:	4607      	mov	r7, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	4614      	mov	r4, r2
 80086f6:	d510      	bpl.n	800871a <_svfiprintf_r+0x36>
 80086f8:	690b      	ldr	r3, [r1, #16]
 80086fa:	b973      	cbnz	r3, 800871a <_svfiprintf_r+0x36>
 80086fc:	2140      	movs	r1, #64	@ 0x40
 80086fe:	f000 f90f 	bl	8008920 <_malloc_r>
 8008702:	6028      	str	r0, [r5, #0]
 8008704:	6128      	str	r0, [r5, #16]
 8008706:	b930      	cbnz	r0, 8008716 <_svfiprintf_r+0x32>
 8008708:	230c      	movs	r3, #12
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008710:	b01d      	add	sp, #116	@ 0x74
 8008712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008716:	2340      	movs	r3, #64	@ 0x40
 8008718:	616b      	str	r3, [r5, #20]
 800871a:	2300      	movs	r3, #0
 800871c:	9309      	str	r3, [sp, #36]	@ 0x24
 800871e:	2320      	movs	r3, #32
 8008720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008724:	f8cd 800c 	str.w	r8, [sp, #12]
 8008728:	2330      	movs	r3, #48	@ 0x30
 800872a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088c8 <_svfiprintf_r+0x1e4>
 800872e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008732:	f04f 0901 	mov.w	r9, #1
 8008736:	4623      	mov	r3, r4
 8008738:	469a      	mov	sl, r3
 800873a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873e:	b10a      	cbz	r2, 8008744 <_svfiprintf_r+0x60>
 8008740:	2a25      	cmp	r2, #37	@ 0x25
 8008742:	d1f9      	bne.n	8008738 <_svfiprintf_r+0x54>
 8008744:	ebba 0b04 	subs.w	fp, sl, r4
 8008748:	d00b      	beq.n	8008762 <_svfiprintf_r+0x7e>
 800874a:	465b      	mov	r3, fp
 800874c:	4622      	mov	r2, r4
 800874e:	4629      	mov	r1, r5
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff ff6b 	bl	800862c <__ssputs_r>
 8008756:	3001      	adds	r0, #1
 8008758:	f000 80a7 	beq.w	80088aa <_svfiprintf_r+0x1c6>
 800875c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800875e:	445a      	add	r2, fp
 8008760:	9209      	str	r2, [sp, #36]	@ 0x24
 8008762:	f89a 3000 	ldrb.w	r3, [sl]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 809f 	beq.w	80088aa <_svfiprintf_r+0x1c6>
 800876c:	2300      	movs	r3, #0
 800876e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008776:	f10a 0a01 	add.w	sl, sl, #1
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	9307      	str	r3, [sp, #28]
 800877e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008782:	931a      	str	r3, [sp, #104]	@ 0x68
 8008784:	4654      	mov	r4, sl
 8008786:	2205      	movs	r2, #5
 8008788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878c:	484e      	ldr	r0, [pc, #312]	@ (80088c8 <_svfiprintf_r+0x1e4>)
 800878e:	f7f7 fd3f 	bl	8000210 <memchr>
 8008792:	9a04      	ldr	r2, [sp, #16]
 8008794:	b9d8      	cbnz	r0, 80087ce <_svfiprintf_r+0xea>
 8008796:	06d0      	lsls	r0, r2, #27
 8008798:	bf44      	itt	mi
 800879a:	2320      	movmi	r3, #32
 800879c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087a0:	0711      	lsls	r1, r2, #28
 80087a2:	bf44      	itt	mi
 80087a4:	232b      	movmi	r3, #43	@ 0x2b
 80087a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087aa:	f89a 3000 	ldrb.w	r3, [sl]
 80087ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b0:	d015      	beq.n	80087de <_svfiprintf_r+0xfa>
 80087b2:	9a07      	ldr	r2, [sp, #28]
 80087b4:	4654      	mov	r4, sl
 80087b6:	2000      	movs	r0, #0
 80087b8:	f04f 0c0a 	mov.w	ip, #10
 80087bc:	4621      	mov	r1, r4
 80087be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c2:	3b30      	subs	r3, #48	@ 0x30
 80087c4:	2b09      	cmp	r3, #9
 80087c6:	d94b      	bls.n	8008860 <_svfiprintf_r+0x17c>
 80087c8:	b1b0      	cbz	r0, 80087f8 <_svfiprintf_r+0x114>
 80087ca:	9207      	str	r2, [sp, #28]
 80087cc:	e014      	b.n	80087f8 <_svfiprintf_r+0x114>
 80087ce:	eba0 0308 	sub.w	r3, r0, r8
 80087d2:	fa09 f303 	lsl.w	r3, r9, r3
 80087d6:	4313      	orrs	r3, r2
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	46a2      	mov	sl, r4
 80087dc:	e7d2      	b.n	8008784 <_svfiprintf_r+0xa0>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	1d19      	adds	r1, r3, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	9103      	str	r1, [sp, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfbb      	ittet	lt
 80087ea:	425b      	neglt	r3, r3
 80087ec:	f042 0202 	orrlt.w	r2, r2, #2
 80087f0:	9307      	strge	r3, [sp, #28]
 80087f2:	9307      	strlt	r3, [sp, #28]
 80087f4:	bfb8      	it	lt
 80087f6:	9204      	strlt	r2, [sp, #16]
 80087f8:	7823      	ldrb	r3, [r4, #0]
 80087fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80087fc:	d10a      	bne.n	8008814 <_svfiprintf_r+0x130>
 80087fe:	7863      	ldrb	r3, [r4, #1]
 8008800:	2b2a      	cmp	r3, #42	@ 0x2a
 8008802:	d132      	bne.n	800886a <_svfiprintf_r+0x186>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	1d1a      	adds	r2, r3, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	9203      	str	r2, [sp, #12]
 800880c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008810:	3402      	adds	r4, #2
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088d8 <_svfiprintf_r+0x1f4>
 8008818:	7821      	ldrb	r1, [r4, #0]
 800881a:	2203      	movs	r2, #3
 800881c:	4650      	mov	r0, sl
 800881e:	f7f7 fcf7 	bl	8000210 <memchr>
 8008822:	b138      	cbz	r0, 8008834 <_svfiprintf_r+0x150>
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	eba0 000a 	sub.w	r0, r0, sl
 800882a:	2240      	movs	r2, #64	@ 0x40
 800882c:	4082      	lsls	r2, r0
 800882e:	4313      	orrs	r3, r2
 8008830:	3401      	adds	r4, #1
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008838:	4824      	ldr	r0, [pc, #144]	@ (80088cc <_svfiprintf_r+0x1e8>)
 800883a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800883e:	2206      	movs	r2, #6
 8008840:	f7f7 fce6 	bl	8000210 <memchr>
 8008844:	2800      	cmp	r0, #0
 8008846:	d036      	beq.n	80088b6 <_svfiprintf_r+0x1d2>
 8008848:	4b21      	ldr	r3, [pc, #132]	@ (80088d0 <_svfiprintf_r+0x1ec>)
 800884a:	bb1b      	cbnz	r3, 8008894 <_svfiprintf_r+0x1b0>
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	3307      	adds	r3, #7
 8008850:	f023 0307 	bic.w	r3, r3, #7
 8008854:	3308      	adds	r3, #8
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885a:	4433      	add	r3, r6
 800885c:	9309      	str	r3, [sp, #36]	@ 0x24
 800885e:	e76a      	b.n	8008736 <_svfiprintf_r+0x52>
 8008860:	fb0c 3202 	mla	r2, ip, r2, r3
 8008864:	460c      	mov	r4, r1
 8008866:	2001      	movs	r0, #1
 8008868:	e7a8      	b.n	80087bc <_svfiprintf_r+0xd8>
 800886a:	2300      	movs	r3, #0
 800886c:	3401      	adds	r4, #1
 800886e:	9305      	str	r3, [sp, #20]
 8008870:	4619      	mov	r1, r3
 8008872:	f04f 0c0a 	mov.w	ip, #10
 8008876:	4620      	mov	r0, r4
 8008878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887c:	3a30      	subs	r2, #48	@ 0x30
 800887e:	2a09      	cmp	r2, #9
 8008880:	d903      	bls.n	800888a <_svfiprintf_r+0x1a6>
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0c6      	beq.n	8008814 <_svfiprintf_r+0x130>
 8008886:	9105      	str	r1, [sp, #20]
 8008888:	e7c4      	b.n	8008814 <_svfiprintf_r+0x130>
 800888a:	fb0c 2101 	mla	r1, ip, r1, r2
 800888e:	4604      	mov	r4, r0
 8008890:	2301      	movs	r3, #1
 8008892:	e7f0      	b.n	8008876 <_svfiprintf_r+0x192>
 8008894:	ab03      	add	r3, sp, #12
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	462a      	mov	r2, r5
 800889a:	4b0e      	ldr	r3, [pc, #56]	@ (80088d4 <_svfiprintf_r+0x1f0>)
 800889c:	a904      	add	r1, sp, #16
 800889e:	4638      	mov	r0, r7
 80088a0:	f3af 8000 	nop.w
 80088a4:	1c42      	adds	r2, r0, #1
 80088a6:	4606      	mov	r6, r0
 80088a8:	d1d6      	bne.n	8008858 <_svfiprintf_r+0x174>
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	065b      	lsls	r3, r3, #25
 80088ae:	f53f af2d 	bmi.w	800870c <_svfiprintf_r+0x28>
 80088b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088b4:	e72c      	b.n	8008710 <_svfiprintf_r+0x2c>
 80088b6:	ab03      	add	r3, sp, #12
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	462a      	mov	r2, r5
 80088bc:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <_svfiprintf_r+0x1f0>)
 80088be:	a904      	add	r1, sp, #16
 80088c0:	4638      	mov	r0, r7
 80088c2:	f000 f91b 	bl	8008afc <_printf_i>
 80088c6:	e7ed      	b.n	80088a4 <_svfiprintf_r+0x1c0>
 80088c8:	08008f08 	.word	0x08008f08
 80088cc:	08008f12 	.word	0x08008f12
 80088d0:	00000000 	.word	0x00000000
 80088d4:	0800862d 	.word	0x0800862d
 80088d8:	08008f0e 	.word	0x08008f0e

080088dc <sbrk_aligned>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4e0f      	ldr	r6, [pc, #60]	@ (800891c <sbrk_aligned+0x40>)
 80088e0:	460c      	mov	r4, r1
 80088e2:	6831      	ldr	r1, [r6, #0]
 80088e4:	4605      	mov	r5, r0
 80088e6:	b911      	cbnz	r1, 80088ee <sbrk_aligned+0x12>
 80088e8:	f000 fa7a 	bl	8008de0 <_sbrk_r>
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 fa75 	bl	8008de0 <_sbrk_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d103      	bne.n	8008902 <sbrk_aligned+0x26>
 80088fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80088fe:	4620      	mov	r0, r4
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	1cc4      	adds	r4, r0, #3
 8008904:	f024 0403 	bic.w	r4, r4, #3
 8008908:	42a0      	cmp	r0, r4
 800890a:	d0f8      	beq.n	80088fe <sbrk_aligned+0x22>
 800890c:	1a21      	subs	r1, r4, r0
 800890e:	4628      	mov	r0, r5
 8008910:	f000 fa66 	bl	8008de0 <_sbrk_r>
 8008914:	3001      	adds	r0, #1
 8008916:	d1f2      	bne.n	80088fe <sbrk_aligned+0x22>
 8008918:	e7ef      	b.n	80088fa <sbrk_aligned+0x1e>
 800891a:	bf00      	nop
 800891c:	20000740 	.word	0x20000740

08008920 <_malloc_r>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	1ccd      	adds	r5, r1, #3
 8008926:	f025 0503 	bic.w	r5, r5, #3
 800892a:	3508      	adds	r5, #8
 800892c:	2d0c      	cmp	r5, #12
 800892e:	bf38      	it	cc
 8008930:	250c      	movcc	r5, #12
 8008932:	2d00      	cmp	r5, #0
 8008934:	4606      	mov	r6, r0
 8008936:	db01      	blt.n	800893c <_malloc_r+0x1c>
 8008938:	42a9      	cmp	r1, r5
 800893a:	d904      	bls.n	8008946 <_malloc_r+0x26>
 800893c:	230c      	movs	r3, #12
 800893e:	6033      	str	r3, [r6, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a1c <_malloc_r+0xfc>
 800894a:	f000 f9f5 	bl	8008d38 <__malloc_lock>
 800894e:	f8d8 3000 	ldr.w	r3, [r8]
 8008952:	461c      	mov	r4, r3
 8008954:	bb44      	cbnz	r4, 80089a8 <_malloc_r+0x88>
 8008956:	4629      	mov	r1, r5
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ffbf 	bl	80088dc <sbrk_aligned>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	4604      	mov	r4, r0
 8008962:	d158      	bne.n	8008a16 <_malloc_r+0xf6>
 8008964:	f8d8 4000 	ldr.w	r4, [r8]
 8008968:	4627      	mov	r7, r4
 800896a:	2f00      	cmp	r7, #0
 800896c:	d143      	bne.n	80089f6 <_malloc_r+0xd6>
 800896e:	2c00      	cmp	r4, #0
 8008970:	d04b      	beq.n	8008a0a <_malloc_r+0xea>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	4639      	mov	r1, r7
 8008976:	4630      	mov	r0, r6
 8008978:	eb04 0903 	add.w	r9, r4, r3
 800897c:	f000 fa30 	bl	8008de0 <_sbrk_r>
 8008980:	4581      	cmp	r9, r0
 8008982:	d142      	bne.n	8008a0a <_malloc_r+0xea>
 8008984:	6821      	ldr	r1, [r4, #0]
 8008986:	1a6d      	subs	r5, r5, r1
 8008988:	4629      	mov	r1, r5
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffa6 	bl	80088dc <sbrk_aligned>
 8008990:	3001      	adds	r0, #1
 8008992:	d03a      	beq.n	8008a0a <_malloc_r+0xea>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	442b      	add	r3, r5
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	f8d8 3000 	ldr.w	r3, [r8]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	bb62      	cbnz	r2, 80089fc <_malloc_r+0xdc>
 80089a2:	f8c8 7000 	str.w	r7, [r8]
 80089a6:	e00f      	b.n	80089c8 <_malloc_r+0xa8>
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	1b52      	subs	r2, r2, r5
 80089ac:	d420      	bmi.n	80089f0 <_malloc_r+0xd0>
 80089ae:	2a0b      	cmp	r2, #11
 80089b0:	d917      	bls.n	80089e2 <_malloc_r+0xc2>
 80089b2:	1961      	adds	r1, r4, r5
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	6025      	str	r5, [r4, #0]
 80089b8:	bf18      	it	ne
 80089ba:	6059      	strne	r1, [r3, #4]
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	bf08      	it	eq
 80089c0:	f8c8 1000 	streq.w	r1, [r8]
 80089c4:	5162      	str	r2, [r4, r5]
 80089c6:	604b      	str	r3, [r1, #4]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 f9bb 	bl	8008d44 <__malloc_unlock>
 80089ce:	f104 000b 	add.w	r0, r4, #11
 80089d2:	1d23      	adds	r3, r4, #4
 80089d4:	f020 0007 	bic.w	r0, r0, #7
 80089d8:	1ac2      	subs	r2, r0, r3
 80089da:	bf1c      	itt	ne
 80089dc:	1a1b      	subne	r3, r3, r0
 80089de:	50a3      	strne	r3, [r4, r2]
 80089e0:	e7af      	b.n	8008942 <_malloc_r+0x22>
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	bf0c      	ite	eq
 80089e8:	f8c8 2000 	streq.w	r2, [r8]
 80089ec:	605a      	strne	r2, [r3, #4]
 80089ee:	e7eb      	b.n	80089c8 <_malloc_r+0xa8>
 80089f0:	4623      	mov	r3, r4
 80089f2:	6864      	ldr	r4, [r4, #4]
 80089f4:	e7ae      	b.n	8008954 <_malloc_r+0x34>
 80089f6:	463c      	mov	r4, r7
 80089f8:	687f      	ldr	r7, [r7, #4]
 80089fa:	e7b6      	b.n	800896a <_malloc_r+0x4a>
 80089fc:	461a      	mov	r2, r3
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d1fb      	bne.n	80089fc <_malloc_r+0xdc>
 8008a04:	2300      	movs	r3, #0
 8008a06:	6053      	str	r3, [r2, #4]
 8008a08:	e7de      	b.n	80089c8 <_malloc_r+0xa8>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f998 	bl	8008d44 <__malloc_unlock>
 8008a14:	e794      	b.n	8008940 <_malloc_r+0x20>
 8008a16:	6005      	str	r5, [r0, #0]
 8008a18:	e7d6      	b.n	80089c8 <_malloc_r+0xa8>
 8008a1a:	bf00      	nop
 8008a1c:	20000744 	.word	0x20000744

08008a20 <_printf_common>:
 8008a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	4616      	mov	r6, r2
 8008a26:	4698      	mov	r8, r3
 8008a28:	688a      	ldr	r2, [r1, #8]
 8008a2a:	690b      	ldr	r3, [r1, #16]
 8008a2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	bfb8      	it	lt
 8008a34:	4613      	movlt	r3, r2
 8008a36:	6033      	str	r3, [r6, #0]
 8008a38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	b10a      	cbz	r2, 8008a46 <_printf_common+0x26>
 8008a42:	3301      	adds	r3, #1
 8008a44:	6033      	str	r3, [r6, #0]
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	0699      	lsls	r1, r3, #26
 8008a4a:	bf42      	ittt	mi
 8008a4c:	6833      	ldrmi	r3, [r6, #0]
 8008a4e:	3302      	addmi	r3, #2
 8008a50:	6033      	strmi	r3, [r6, #0]
 8008a52:	6825      	ldr	r5, [r4, #0]
 8008a54:	f015 0506 	ands.w	r5, r5, #6
 8008a58:	d106      	bne.n	8008a68 <_printf_common+0x48>
 8008a5a:	f104 0a19 	add.w	sl, r4, #25
 8008a5e:	68e3      	ldr	r3, [r4, #12]
 8008a60:	6832      	ldr	r2, [r6, #0]
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	dc26      	bgt.n	8008ab6 <_printf_common+0x96>
 8008a68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	3b00      	subs	r3, #0
 8008a70:	bf18      	it	ne
 8008a72:	2301      	movne	r3, #1
 8008a74:	0692      	lsls	r2, r2, #26
 8008a76:	d42b      	bmi.n	8008ad0 <_printf_common+0xb0>
 8008a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a7c:	4641      	mov	r1, r8
 8008a7e:	4638      	mov	r0, r7
 8008a80:	47c8      	blx	r9
 8008a82:	3001      	adds	r0, #1
 8008a84:	d01e      	beq.n	8008ac4 <_printf_common+0xa4>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	6922      	ldr	r2, [r4, #16]
 8008a8a:	f003 0306 	and.w	r3, r3, #6
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	bf02      	ittt	eq
 8008a92:	68e5      	ldreq	r5, [r4, #12]
 8008a94:	6833      	ldreq	r3, [r6, #0]
 8008a96:	1aed      	subeq	r5, r5, r3
 8008a98:	68a3      	ldr	r3, [r4, #8]
 8008a9a:	bf0c      	ite	eq
 8008a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aa0:	2500      	movne	r5, #0
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	bfc4      	itt	gt
 8008aa6:	1a9b      	subgt	r3, r3, r2
 8008aa8:	18ed      	addgt	r5, r5, r3
 8008aaa:	2600      	movs	r6, #0
 8008aac:	341a      	adds	r4, #26
 8008aae:	42b5      	cmp	r5, r6
 8008ab0:	d11a      	bne.n	8008ae8 <_printf_common+0xc8>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e008      	b.n	8008ac8 <_printf_common+0xa8>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4641      	mov	r1, r8
 8008abc:	4638      	mov	r0, r7
 8008abe:	47c8      	blx	r9
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d103      	bne.n	8008acc <_printf_common+0xac>
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008acc:	3501      	adds	r5, #1
 8008ace:	e7c6      	b.n	8008a5e <_printf_common+0x3e>
 8008ad0:	18e1      	adds	r1, r4, r3
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	2030      	movs	r0, #48	@ 0x30
 8008ad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ada:	4422      	add	r2, r4
 8008adc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ae4:	3302      	adds	r3, #2
 8008ae6:	e7c7      	b.n	8008a78 <_printf_common+0x58>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	4622      	mov	r2, r4
 8008aec:	4641      	mov	r1, r8
 8008aee:	4638      	mov	r0, r7
 8008af0:	47c8      	blx	r9
 8008af2:	3001      	adds	r0, #1
 8008af4:	d0e6      	beq.n	8008ac4 <_printf_common+0xa4>
 8008af6:	3601      	adds	r6, #1
 8008af8:	e7d9      	b.n	8008aae <_printf_common+0x8e>
	...

08008afc <_printf_i>:
 8008afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	7e0f      	ldrb	r7, [r1, #24]
 8008b02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b04:	2f78      	cmp	r7, #120	@ 0x78
 8008b06:	4691      	mov	r9, r2
 8008b08:	4680      	mov	r8, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	469a      	mov	sl, r3
 8008b0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b12:	d807      	bhi.n	8008b24 <_printf_i+0x28>
 8008b14:	2f62      	cmp	r7, #98	@ 0x62
 8008b16:	d80a      	bhi.n	8008b2e <_printf_i+0x32>
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	f000 80d1 	beq.w	8008cc0 <_printf_i+0x1c4>
 8008b1e:	2f58      	cmp	r7, #88	@ 0x58
 8008b20:	f000 80b8 	beq.w	8008c94 <_printf_i+0x198>
 8008b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b2c:	e03a      	b.n	8008ba4 <_printf_i+0xa8>
 8008b2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b32:	2b15      	cmp	r3, #21
 8008b34:	d8f6      	bhi.n	8008b24 <_printf_i+0x28>
 8008b36:	a101      	add	r1, pc, #4	@ (adr r1, 8008b3c <_printf_i+0x40>)
 8008b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b3c:	08008b95 	.word	0x08008b95
 8008b40:	08008ba9 	.word	0x08008ba9
 8008b44:	08008b25 	.word	0x08008b25
 8008b48:	08008b25 	.word	0x08008b25
 8008b4c:	08008b25 	.word	0x08008b25
 8008b50:	08008b25 	.word	0x08008b25
 8008b54:	08008ba9 	.word	0x08008ba9
 8008b58:	08008b25 	.word	0x08008b25
 8008b5c:	08008b25 	.word	0x08008b25
 8008b60:	08008b25 	.word	0x08008b25
 8008b64:	08008b25 	.word	0x08008b25
 8008b68:	08008ca7 	.word	0x08008ca7
 8008b6c:	08008bd3 	.word	0x08008bd3
 8008b70:	08008c61 	.word	0x08008c61
 8008b74:	08008b25 	.word	0x08008b25
 8008b78:	08008b25 	.word	0x08008b25
 8008b7c:	08008cc9 	.word	0x08008cc9
 8008b80:	08008b25 	.word	0x08008b25
 8008b84:	08008bd3 	.word	0x08008bd3
 8008b88:	08008b25 	.word	0x08008b25
 8008b8c:	08008b25 	.word	0x08008b25
 8008b90:	08008c69 	.word	0x08008c69
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	1d1a      	adds	r2, r3, #4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6032      	str	r2, [r6, #0]
 8008b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e09c      	b.n	8008ce2 <_printf_i+0x1e6>
 8008ba8:	6833      	ldr	r3, [r6, #0]
 8008baa:	6820      	ldr	r0, [r4, #0]
 8008bac:	1d19      	adds	r1, r3, #4
 8008bae:	6031      	str	r1, [r6, #0]
 8008bb0:	0606      	lsls	r6, r0, #24
 8008bb2:	d501      	bpl.n	8008bb8 <_printf_i+0xbc>
 8008bb4:	681d      	ldr	r5, [r3, #0]
 8008bb6:	e003      	b.n	8008bc0 <_printf_i+0xc4>
 8008bb8:	0645      	lsls	r5, r0, #25
 8008bba:	d5fb      	bpl.n	8008bb4 <_printf_i+0xb8>
 8008bbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	da03      	bge.n	8008bcc <_printf_i+0xd0>
 8008bc4:	232d      	movs	r3, #45	@ 0x2d
 8008bc6:	426d      	negs	r5, r5
 8008bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bcc:	4858      	ldr	r0, [pc, #352]	@ (8008d30 <_printf_i+0x234>)
 8008bce:	230a      	movs	r3, #10
 8008bd0:	e011      	b.n	8008bf6 <_printf_i+0xfa>
 8008bd2:	6821      	ldr	r1, [r4, #0]
 8008bd4:	6833      	ldr	r3, [r6, #0]
 8008bd6:	0608      	lsls	r0, r1, #24
 8008bd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bdc:	d402      	bmi.n	8008be4 <_printf_i+0xe8>
 8008bde:	0649      	lsls	r1, r1, #25
 8008be0:	bf48      	it	mi
 8008be2:	b2ad      	uxthmi	r5, r5
 8008be4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008be6:	4852      	ldr	r0, [pc, #328]	@ (8008d30 <_printf_i+0x234>)
 8008be8:	6033      	str	r3, [r6, #0]
 8008bea:	bf14      	ite	ne
 8008bec:	230a      	movne	r3, #10
 8008bee:	2308      	moveq	r3, #8
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bf6:	6866      	ldr	r6, [r4, #4]
 8008bf8:	60a6      	str	r6, [r4, #8]
 8008bfa:	2e00      	cmp	r6, #0
 8008bfc:	db05      	blt.n	8008c0a <_printf_i+0x10e>
 8008bfe:	6821      	ldr	r1, [r4, #0]
 8008c00:	432e      	orrs	r6, r5
 8008c02:	f021 0104 	bic.w	r1, r1, #4
 8008c06:	6021      	str	r1, [r4, #0]
 8008c08:	d04b      	beq.n	8008ca2 <_printf_i+0x1a6>
 8008c0a:	4616      	mov	r6, r2
 8008c0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c10:	fb03 5711 	mls	r7, r3, r1, r5
 8008c14:	5dc7      	ldrb	r7, [r0, r7]
 8008c16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c1a:	462f      	mov	r7, r5
 8008c1c:	42bb      	cmp	r3, r7
 8008c1e:	460d      	mov	r5, r1
 8008c20:	d9f4      	bls.n	8008c0c <_printf_i+0x110>
 8008c22:	2b08      	cmp	r3, #8
 8008c24:	d10b      	bne.n	8008c3e <_printf_i+0x142>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	07df      	lsls	r7, r3, #31
 8008c2a:	d508      	bpl.n	8008c3e <_printf_i+0x142>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	6861      	ldr	r1, [r4, #4]
 8008c30:	4299      	cmp	r1, r3
 8008c32:	bfde      	ittt	le
 8008c34:	2330      	movle	r3, #48	@ 0x30
 8008c36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008c3e:	1b92      	subs	r2, r2, r6
 8008c40:	6122      	str	r2, [r4, #16]
 8008c42:	f8cd a000 	str.w	sl, [sp]
 8008c46:	464b      	mov	r3, r9
 8008c48:	aa03      	add	r2, sp, #12
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	f7ff fee7 	bl	8008a20 <_printf_common>
 8008c52:	3001      	adds	r0, #1
 8008c54:	d14a      	bne.n	8008cec <_printf_i+0x1f0>
 8008c56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c5a:	b004      	add	sp, #16
 8008c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	f043 0320 	orr.w	r3, r3, #32
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	4832      	ldr	r0, [pc, #200]	@ (8008d34 <_printf_i+0x238>)
 8008c6a:	2778      	movs	r7, #120	@ 0x78
 8008c6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	6831      	ldr	r1, [r6, #0]
 8008c74:	061f      	lsls	r7, r3, #24
 8008c76:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c7a:	d402      	bmi.n	8008c82 <_printf_i+0x186>
 8008c7c:	065f      	lsls	r7, r3, #25
 8008c7e:	bf48      	it	mi
 8008c80:	b2ad      	uxthmi	r5, r5
 8008c82:	6031      	str	r1, [r6, #0]
 8008c84:	07d9      	lsls	r1, r3, #31
 8008c86:	bf44      	itt	mi
 8008c88:	f043 0320 	orrmi.w	r3, r3, #32
 8008c8c:	6023      	strmi	r3, [r4, #0]
 8008c8e:	b11d      	cbz	r5, 8008c98 <_printf_i+0x19c>
 8008c90:	2310      	movs	r3, #16
 8008c92:	e7ad      	b.n	8008bf0 <_printf_i+0xf4>
 8008c94:	4826      	ldr	r0, [pc, #152]	@ (8008d30 <_printf_i+0x234>)
 8008c96:	e7e9      	b.n	8008c6c <_printf_i+0x170>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	f023 0320 	bic.w	r3, r3, #32
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	e7f6      	b.n	8008c90 <_printf_i+0x194>
 8008ca2:	4616      	mov	r6, r2
 8008ca4:	e7bd      	b.n	8008c22 <_printf_i+0x126>
 8008ca6:	6833      	ldr	r3, [r6, #0]
 8008ca8:	6825      	ldr	r5, [r4, #0]
 8008caa:	6961      	ldr	r1, [r4, #20]
 8008cac:	1d18      	adds	r0, r3, #4
 8008cae:	6030      	str	r0, [r6, #0]
 8008cb0:	062e      	lsls	r6, r5, #24
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	d501      	bpl.n	8008cba <_printf_i+0x1be>
 8008cb6:	6019      	str	r1, [r3, #0]
 8008cb8:	e002      	b.n	8008cc0 <_printf_i+0x1c4>
 8008cba:	0668      	lsls	r0, r5, #25
 8008cbc:	d5fb      	bpl.n	8008cb6 <_printf_i+0x1ba>
 8008cbe:	8019      	strh	r1, [r3, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	e7bc      	b.n	8008c42 <_printf_i+0x146>
 8008cc8:	6833      	ldr	r3, [r6, #0]
 8008cca:	1d1a      	adds	r2, r3, #4
 8008ccc:	6032      	str	r2, [r6, #0]
 8008cce:	681e      	ldr	r6, [r3, #0]
 8008cd0:	6862      	ldr	r2, [r4, #4]
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7f7 fa9b 	bl	8000210 <memchr>
 8008cda:	b108      	cbz	r0, 8008ce0 <_printf_i+0x1e4>
 8008cdc:	1b80      	subs	r0, r0, r6
 8008cde:	6060      	str	r0, [r4, #4]
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cea:	e7aa      	b.n	8008c42 <_printf_i+0x146>
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	47d0      	blx	sl
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d0ad      	beq.n	8008c56 <_printf_i+0x15a>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	079b      	lsls	r3, r3, #30
 8008cfe:	d413      	bmi.n	8008d28 <_printf_i+0x22c>
 8008d00:	68e0      	ldr	r0, [r4, #12]
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	4298      	cmp	r0, r3
 8008d06:	bfb8      	it	lt
 8008d08:	4618      	movlt	r0, r3
 8008d0a:	e7a6      	b.n	8008c5a <_printf_i+0x15e>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	4632      	mov	r2, r6
 8008d10:	4649      	mov	r1, r9
 8008d12:	4640      	mov	r0, r8
 8008d14:	47d0      	blx	sl
 8008d16:	3001      	adds	r0, #1
 8008d18:	d09d      	beq.n	8008c56 <_printf_i+0x15a>
 8008d1a:	3501      	adds	r5, #1
 8008d1c:	68e3      	ldr	r3, [r4, #12]
 8008d1e:	9903      	ldr	r1, [sp, #12]
 8008d20:	1a5b      	subs	r3, r3, r1
 8008d22:	42ab      	cmp	r3, r5
 8008d24:	dcf2      	bgt.n	8008d0c <_printf_i+0x210>
 8008d26:	e7eb      	b.n	8008d00 <_printf_i+0x204>
 8008d28:	2500      	movs	r5, #0
 8008d2a:	f104 0619 	add.w	r6, r4, #25
 8008d2e:	e7f5      	b.n	8008d1c <_printf_i+0x220>
 8008d30:	08008f19 	.word	0x08008f19
 8008d34:	08008f2a 	.word	0x08008f2a

08008d38 <__malloc_lock>:
 8008d38:	4801      	ldr	r0, [pc, #4]	@ (8008d40 <__malloc_lock+0x8>)
 8008d3a:	f7ff bc5f 	b.w	80085fc <__retarget_lock_acquire_recursive>
 8008d3e:	bf00      	nop
 8008d40:	2000073c 	.word	0x2000073c

08008d44 <__malloc_unlock>:
 8008d44:	4801      	ldr	r0, [pc, #4]	@ (8008d4c <__malloc_unlock+0x8>)
 8008d46:	f7ff bc5a 	b.w	80085fe <__retarget_lock_release_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	2000073c 	.word	0x2000073c

08008d50 <_realloc_r>:
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	4607      	mov	r7, r0
 8008d56:	4614      	mov	r4, r2
 8008d58:	460d      	mov	r5, r1
 8008d5a:	b921      	cbnz	r1, 8008d66 <_realloc_r+0x16>
 8008d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d60:	4611      	mov	r1, r2
 8008d62:	f7ff bddd 	b.w	8008920 <_malloc_r>
 8008d66:	b92a      	cbnz	r2, 8008d74 <_realloc_r+0x24>
 8008d68:	f000 f84a 	bl	8008e00 <_free_r>
 8008d6c:	4625      	mov	r5, r4
 8008d6e:	4628      	mov	r0, r5
 8008d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d74:	f000 f88e 	bl	8008e94 <_malloc_usable_size_r>
 8008d78:	4284      	cmp	r4, r0
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	d802      	bhi.n	8008d84 <_realloc_r+0x34>
 8008d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d82:	d8f4      	bhi.n	8008d6e <_realloc_r+0x1e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff fdca 	bl	8008920 <_malloc_r>
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	b908      	cbnz	r0, 8008d94 <_realloc_r+0x44>
 8008d90:	4645      	mov	r5, r8
 8008d92:	e7ec      	b.n	8008d6e <_realloc_r+0x1e>
 8008d94:	42b4      	cmp	r4, r6
 8008d96:	4622      	mov	r2, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	bf28      	it	cs
 8008d9c:	4632      	movcs	r2, r6
 8008d9e:	f7ff fc37 	bl	8008610 <memcpy>
 8008da2:	4629      	mov	r1, r5
 8008da4:	4638      	mov	r0, r7
 8008da6:	f000 f82b 	bl	8008e00 <_free_r>
 8008daa:	e7f1      	b.n	8008d90 <_realloc_r+0x40>

08008dac <memmove>:
 8008dac:	4288      	cmp	r0, r1
 8008dae:	b510      	push	{r4, lr}
 8008db0:	eb01 0402 	add.w	r4, r1, r2
 8008db4:	d902      	bls.n	8008dbc <memmove+0x10>
 8008db6:	4284      	cmp	r4, r0
 8008db8:	4623      	mov	r3, r4
 8008dba:	d807      	bhi.n	8008dcc <memmove+0x20>
 8008dbc:	1e43      	subs	r3, r0, #1
 8008dbe:	42a1      	cmp	r1, r4
 8008dc0:	d008      	beq.n	8008dd4 <memmove+0x28>
 8008dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dca:	e7f8      	b.n	8008dbe <memmove+0x12>
 8008dcc:	4402      	add	r2, r0
 8008dce:	4601      	mov	r1, r0
 8008dd0:	428a      	cmp	r2, r1
 8008dd2:	d100      	bne.n	8008dd6 <memmove+0x2a>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dde:	e7f7      	b.n	8008dd0 <memmove+0x24>

08008de0 <_sbrk_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	@ (8008dfc <_sbrk_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7f7 feca 	bl	8000b84 <_sbrk>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_sbrk_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_sbrk_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20000748 	.word	0x20000748

08008e00 <_free_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4605      	mov	r5, r0
 8008e04:	2900      	cmp	r1, #0
 8008e06:	d041      	beq.n	8008e8c <_free_r+0x8c>
 8008e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e0c:	1f0c      	subs	r4, r1, #4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bfb8      	it	lt
 8008e12:	18e4      	addlt	r4, r4, r3
 8008e14:	f7ff ff90 	bl	8008d38 <__malloc_lock>
 8008e18:	4a1d      	ldr	r2, [pc, #116]	@ (8008e90 <_free_r+0x90>)
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	b933      	cbnz	r3, 8008e2c <_free_r+0x2c>
 8008e1e:	6063      	str	r3, [r4, #4]
 8008e20:	6014      	str	r4, [r2, #0]
 8008e22:	4628      	mov	r0, r5
 8008e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e28:	f7ff bf8c 	b.w	8008d44 <__malloc_unlock>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d908      	bls.n	8008e42 <_free_r+0x42>
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	1821      	adds	r1, r4, r0
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf01      	itttt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	1809      	addeq	r1, r1, r0
 8008e3e:	6021      	streq	r1, [r4, #0]
 8008e40:	e7ed      	b.n	8008e1e <_free_r+0x1e>
 8008e42:	461a      	mov	r2, r3
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b10b      	cbz	r3, 8008e4c <_free_r+0x4c>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d9fa      	bls.n	8008e42 <_free_r+0x42>
 8008e4c:	6811      	ldr	r1, [r2, #0]
 8008e4e:	1850      	adds	r0, r2, r1
 8008e50:	42a0      	cmp	r0, r4
 8008e52:	d10b      	bne.n	8008e6c <_free_r+0x6c>
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	4401      	add	r1, r0
 8008e58:	1850      	adds	r0, r2, r1
 8008e5a:	4283      	cmp	r3, r0
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	d1e0      	bne.n	8008e22 <_free_r+0x22>
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	6053      	str	r3, [r2, #4]
 8008e66:	4408      	add	r0, r1
 8008e68:	6010      	str	r0, [r2, #0]
 8008e6a:	e7da      	b.n	8008e22 <_free_r+0x22>
 8008e6c:	d902      	bls.n	8008e74 <_free_r+0x74>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	e7d6      	b.n	8008e22 <_free_r+0x22>
 8008e74:	6820      	ldr	r0, [r4, #0]
 8008e76:	1821      	adds	r1, r4, r0
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf04      	itt	eq
 8008e7c:	6819      	ldreq	r1, [r3, #0]
 8008e7e:	685b      	ldreq	r3, [r3, #4]
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	bf04      	itt	eq
 8008e84:	1809      	addeq	r1, r1, r0
 8008e86:	6021      	streq	r1, [r4, #0]
 8008e88:	6054      	str	r4, [r2, #4]
 8008e8a:	e7ca      	b.n	8008e22 <_free_r+0x22>
 8008e8c:	bd38      	pop	{r3, r4, r5, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000744 	.word	0x20000744

08008e94 <_malloc_usable_size_r>:
 8008e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e98:	1f18      	subs	r0, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bfbc      	itt	lt
 8008e9e:	580b      	ldrlt	r3, [r1, r0]
 8008ea0:	18c0      	addlt	r0, r0, r3
 8008ea2:	4770      	bx	lr

08008ea4 <_init>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr

08008eb0 <_fini>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	bf00      	nop
 8008eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb6:	bc08      	pop	{r3}
 8008eb8:	469e      	mov	lr, r3
 8008eba:	4770      	bx	lr
